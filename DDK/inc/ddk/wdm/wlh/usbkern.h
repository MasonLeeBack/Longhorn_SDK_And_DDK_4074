/*++

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

        USBKERN.H

Abstract:

        This file contains KERNEL Mode IOCTLS supported by
        the HCD (PORT) drivers ROOT HUB PDO.

Environment:

    kernel mode

Revision History:


--*/

#ifndef   __USBKERN_H__
#define   __USBKERN_H__


#include "usbiodef.h"


/*
    the following IOCTLS are supported by the ROOT HUB PDO generated by the
    USBPORT driver or equivalent.
*/

/* IOCTL_INTERNAL_USB_GET_HUB_COUNT

Routine Description:
This function is used to count the number of hubs in the stack.  It is used
to enforce the electrical limitation of no more that 5 hubs plus the root
being chained together.

Parameters:
ioStackLocation->Parameters.Others.Argument1
>>Count
This parameter contains a pointer that is filled in with the current count of
hubs in the stack. Each instance of the hub driver that receives the IRP
increments the counter and passes the irp on to its' PDO.  When the Irp
reaches the hub that is the root the IRP is completed.  This will result in
the count value being equal to the number of hubs (including the root).


*/

#define IOCTL_INTERNAL_USB_GET_HUB_COUNT    \
                USB_KERNEL_CTL(USB_GET_HUB_COUNT)


/*  IOCTL_INTERNAL_USB_GET_ROOTHUB_PDO

Routine Description:
This function is used to by hubs to get the top of the physical USB stack.
All IRPs passed to a hub PDO are either serviced by the hub or forwarded
directly to the top of the bus driver stack i.e. the root hub PDO.  A filter
driver interested only in bus traffic (AKA Urbs) can see such traffic by
attaching to the top of the root hub PDO, see section 9.

Parameters:
ioStackLocation->Parameters.Others.Argument1
>>RootHubPhysicalDeviceObject
This parameter contains a pointer that is filled in with the root hub PDO.
This is the actual PDO created by the USBPORT driver for the root hub.

ioStackLocation->Parameters.Others.Argument2
>> HcdTopOfStack
This parameter contains a pointer that is filled in with the top of the bus
driver stack is the device object returned when the hub driver attached to
top of the device stack associated with the root hub PDO.
*/

#define IOCTL_INTERNAL_USB_GET_ROOTHUB_PDO  \
                USB_KERNEL_CTL(USB_GET_ROOTHUB_PDO)


/* IOCTL_INTERNAL_USB_GET_DEVICE_HANDLE

Routine Description:
This function returns the device handle associated with the callers PDO. The
device handle is an opaque structure that is used as a parameter for other
APIs/

Parameters:
ioStackLocation->Parameters.Others.Argument1
A pointer to a device handle (pointer to pointer).
*/

#define IOCTL_INTERNAL_USB_GET_DEVICE_HANDLE  \
                USB_KERNEL_CTL(USB_GET_DEVICE_HANDLE)

/* IOCTL_INTERNAL_USB_GET_HUB_NAME

Routine Description:
This API returns the UNICODE symbolic name for the PDO if the PDO is for a
usbhub, otherwise a NULL string is returned.  The symbolic name can be used
to retrieve additional information about the hub through user mode ioctl apis
and WMI calls.

Parameters:
ioStackLocation->Parameters.DeviceIoControl.OutputBufferLength
Length of buffer passed bytes.

Irp->AssociatedIrp.SystemBuffer
A pointer to a structure (USB_HUB_NAME) to receive the symbolic name.

 USB_BUS_NOTIFICATION.
ActualLength - The structure size in bytes necessary to hold the NULL
   terminated symbolic link name.  This includes the entire structure, not
   just the name.

  HubName - The UNICODE NULL terminated symbolic link name of the external
hub attached to the port.  If there is no external hub attached to the port a
single NULL is returned.

*/
#include <pshpack1.h>

typedef struct _USB_HUB_NAME {
    ULONG ActualLength;
    WCHAR HubName[1];
} USB_HUB_NAME, *PUSB_HUB_NAME;

#include <poppack.h>
#define IOCTL_INTERNAL_USB_GET_HUB_NAME  \
                USB_KERNEL_CTL_BUFFERED(USB_GET_HUB_NAME)

#endif //__USBKERN_H__


