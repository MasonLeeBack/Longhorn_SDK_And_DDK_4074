Test Assertion_A13485

Assertion '13.4.8.5 drvGetCapabilities' 
[
When WIA_DEVICE_COMMANDS is passed to this method, it shall return the commands supported by the drvDeviceCommand method. 
When WIA_DEVICE_EVENTS is passed to this method, it shall return the list of events this minidriver can generate.
]

Var pCaps:Caps, guid: GUID
Var j, capsSize, root:Item, bExists
{
    StartWia()

    GetRoot(root)

    #Check For New Item Tree 
    If(!IsNewTree(root))
    Then
    {
        Writeln '\tThe device does not support New Item Tree'
        Exit Failed 
    }

    If ( !GetDeviceCaps(WIA_DEVICE_COMMANDS, pCaps) )
    Then 
    {
        Writeln '\tThis capability does not exist'
        Exit Failed
    }

    capsSize = GetDevCapsSize(pCaps)


    bExists = 0

    For j = 0 To capsSize - 1
    {
        GetDevCapAt(pCaps, j, guid)
        
        If ( CompareGUID (WIA_CMD_TAKE_PICTURE, guid) )
        Then
        {
            bExists = 1
            Break
        }
    }

    If ( bExists ) 
    Then
    {
        If ( !DeviceCommand(WIA_CMD_TAKE_PICTURE) ) 
        Then 
        {
            Writeln '\tIssuing valid device command failed'
            Exit Failed
        }
    }
    Else
    {
        If ( DeviceCommand(WIA_CMD_TAKE_PICTURE) ) 
        Then 
        {
            Writeln '\tIssuing invalid device command succeeded'
            Exit Failed
        }
    }

    bExists = 0

    For j = 0 To capsSize - 1
    {
        GetDevCapAt(pCaps, j, guid)

        If ( CompareGUID (WIA_CMD_DELETE_ALL_ITEMS, guid) )
        Then
        {
            bExists = 1
            Break
        }
    }

    If ( bExists ) 
    Then
    {
        If ( !DeviceCommand(WIA_CMD_DELETE_ALL_ITEMS) ) 
        Then 
        {
            Writeln '\tIssuing valid device command failed'
            Exit Failed
        }
    }
    Else
    {
        If ( DeviceCommand(WIA_CMD_DELETE_ALL_ITEMS) ) 
        Then 
        {
            Writeln '\tIssuing invalid device command succeeded'
            Exit Failed
        }
    }

    bExists = 0

    For j = 0 To capsSize - 1
    {
        GetDevCapAt(pCaps, j, guid)
        
        If ( CompareGUID (WIA_CMD_CHANGE_DOCUMENT, guid) )
        Then
        {
            bExists = 1
            Break
        }
    }

    If ( bExists ) 
    Then
    {
        If ( !DeviceCommand(WIA_CMD_CHANGE_DOCUMENT) ) 
        Then 
        {
            Writeln '\tIssuing valid device command failed'
            Exit Failed
        }
    }
    Else
    {
        If ( DeviceCommand(WIA_CMD_CHANGE_DOCUMENT) ) 
        Then 
        {
            Writeln '\tIssuing invalid device command succeeded'
            Exit Failed
        }
    }

    bExists = 0

    For j = 0 To capsSize - 1
    {
        GetDevCapAt(pCaps, j, guid)
        
        If ( CompareGUID (WIA_CMD_UNLOAD_DOCUMENT, guid) )
        Then
        {
            bExists = 1
            Break
        }
    }

    If ( bExists ) 
    Then
    {
        If ( !DeviceCommand(WIA_CMD_UNLOAD_DOCUMENT) ) 
        Then 
        {
            Writeln '\tIssuing valid device command failed'
            Exit Failed
        }
    }
    Else
    {
        If ( DeviceCommand(WIA_CMD_UNLOAD_DOCUMENT) ) 
        Then 
        {
            Writeln '\tIssuing invalid device command succeeded'
            Exit Failed
        }
    }


    bExists = 0

    For j = 0 To capsSize - 1
    {
        GetDevCapAt(pCaps, j, guid)
        
        If ( CompareGUID (WIA_CMD_SYNCHRONIZE, guid) )
        Then
        {
            bExists = 1
            Break
        }
    }

    If ( bExists ) 
    Then
    {
        If ( !DeviceCommand(WIA_CMD_SYNCHRONIZE) ) 
        Then 
        {
            Writeln '\tIssuing valid device command failed'
            Exit Failed
        }
    }
    Else
    {
        If ( DeviceCommand(WIA_CMD_SYNCHRONIZE) ) 
        Then 
        {
            Writeln '\tIssuing invalid device command succeeded'
            Exit Failed
        }
    }

    StopWia()

    StartWia()

    GetRoot(root)

    If ( !GetDeviceCaps(WIA_DEVICE_EVENTS, pCaps) )
    Then 
    {
        Writeln '\tThis capability does not exist'
        Exit Failed
    }

    StopWia()
}
