'
' File          : TCPv6_DelAckTicks.wsf
' Author        : Sandeep Prabhu [5/11/01]
'
' A script to test ACK timeout behavior
'

<package>
   <job id="Job 1">
      <reference id="Sparta" object="Spartacom.base.1" version="1.0"/>
      <reference id="Core" object="Testcore.base.1" version="1.0"/>
      <reference id="AutoSrv" object="AutoSrvCom.base.1" version="1.0"/>
      <script language="VBScript" src="..\common\InitAddress.vbs"/>
      <script language="VBScript" src="..\common\IPv6Common.Lib"/>
      <script language="VBScript" src="..\common\TCPv6Helper.Lib"/>
      <script id="TCPv6_DelAckTicks" language="VBScript">

'/**
' @area name="Offload Compliance Test Assertions"
' @group name="TCP Delayed ACK Test Assertions"
' @group name="TcpDelAckTicks Registry Variable Assertions for TCP/IP v6" 
' @define name="Offload" Offload Compliance Test Assertions
' @define name="TCPDA" TCP Delayed ACK Test Assertions
' @define name="DA6Rg" TcpDelAckTicks Registry Variable Assertions for TCP/IP v6
' @hierarchy Offload TCPDA DA6Rg
' @key Reference="WLP# - x.x.x.x; RFC-813, RFC-1122 Section 4.2.3.2"
' @key TestDesc="TD-x.xx Offload Compliance Test Description"
' @key TestName="TCPv6 TcpDelAckTicks Registry Variable Functionality Tests"
' @key TestLog="TCPv6_DelAckTicks.log"
'*/


option explicit
    
Dim Core, Sparta, Autosrv, MediaType, AutoArpObject, IFace, pControllerObj, ExceptionStatus

 
'
' Start the script
'           
StartScript "TCPv6_DelAckTicks", g_szLogDirectory, "Tests for TCP ACK timeout behavior" 



' ==================================================================================================
' Main routine
' ==================================================================================================
Sub Main

   Core.SetAssertionTracking "40700"
   '/**
   ' @test name="Stack must wait 200 msecs before triggering a delayed ACK on an unacknowledged packet."
   ' Autosrv on the test machine is requested to establish a connection back to the script machine.
   ' The script receives the SYN, sends the SYN-ACK and receives the ACK.
   ' Then it in a loop (10) it sends a single data packet and waits to receive the ACK from the test machine.
   ' The script verifies that the timeout betwen sending the data packet and getting the ACK is correct.<br/>
   '*/

   Core.StartTest "Test for default ACK timeout - " & DEFAULT_TcpDelAckTicks
   VerifyAckTimeout DEFAULT_TcpDelAckTicks
   Core.EndTest
   Core.Sleep 2500
   
End Sub   

'
' Routine to verify the ACK timeout settings
'
Sub VerifyAckTimeout(ulTcpDelAckTicks)
   Dim ulStatus, ulSeqNumber, ulAckNumber, ulSessionId, ulTID, usSrcPort, usDestPort
   Dim ulBytesRcvd, pPacket, AutoNDObject, pIFace, ulNumCycles, ulDataLength
   Dim ulCounter, ulStartTime, ulElapsedTime, ulErrors, ulModVal, ulTimeout

   ulSeqNumber = Clng(1000)
   ulAckNumber = Clng(1)
   usSrcPort = 15000
   usDestPort = 15001
   ulDataLength = 100

   Core.StartVariation

   Set AutoNDObject = Sparta.AutoNeighbor(g_szLocalMacAddress, g_szLocalMacAddress, g_szLocalSpoofIp6Address, FALSE)    
   Set pIFace = CreateInterface(TRUE, g_szRemoteMacAddress, g_szRemoteIp6Address, g_szLocalSpoofIp6Address)
   pIFace.StartListening
   
   '
   ' Esatablish a TCP connection
   '
   ulStatus = ActiveConnect(usSrcPort, usDestPort, g_szLocalSpoofIp6Address, ulSeqNumber, ulAckNumber, ulSessionId, pIFace)
   if (ulStatus <> 0) then
      Core.BlockVariation "VerifyAckTimeout: ActiveConnect - " & ulStatus
      exit sub
   end if
   
   ulErrors = 0
   ulTimeout = ulTcpDelAckTicks*100
   For ulCounter = 1 to 10
      '
      ' Send a data packet
      '
      Set pPacket = MakeTCPPacket(usSrcPort, usDestPort, ulSeqNumber, ulAckNumber, TCP_ACK or TCP_PUSH, 0)
      pPacket.UserData ulDataLength, "This is a test"
      pIFace.Send(pPacket)

      '
      ' Verify that an ACK is received within the expected timeout period
      '
      ulStartTime = Timer
      set pPacket = RecvTCPPacketEx(ulSeqNumber, ulAckNumber, ulBytesRcvd, TCP_ACK, ulTimeout*1.2, pIFace) 
      if (pPacket is Nothing) then
         Core.FailSev1Variation "VerifyAckTimeout: Didn't receive ACK for data"
         exit for
      end if
      ulElapsedTime = (Timer - ulStartTime)*1000
      if (ulElapsedTime  < CLng(ulTimeout*0.7)) then
         ulErrors = ulErrors + 1
         Core.log "VerifyAckTimeout: ACK(" & ulCounter & ") timeout incorrect " & ulElapsedTime
      end if
   Next

   if (ulErrors >= 3) then
      Core.FailSev1Variation "VerifyAckTimeout: ACK timeout incorrect"
   end if

   '
   ' Reset the connection
   '
   ulStatus = ResetConnectionEx(usSrcPort, usDestPort, g_szLocalSpoofIp6Address, ulSeqNumber, ulAckNumber, ulSessionId)
   if (ulStatus <> 0) then
      Core.log "ERROR: VerifyAckTimeout: ResetConnectionEx - " & ulStatus
   end if

End Sub


      </script>
   </job>
</package>


