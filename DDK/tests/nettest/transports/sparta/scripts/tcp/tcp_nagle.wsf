'************************************* TCP_Nagle.wsf ***********************
'*                                                                          *
'* Author            :    Sandeep Prabhu                                    *
'* Revision history  :                                                      *
'*    10/18/2000     sandeep        Created                                 *
'*                                                                          *
'* This script will test the TCP Nagle behavior                             *
'*                                                                          *
'************************************* TCP_Nagle.wsf ***********************


<package>
   <job id="Job 1">
      <reference id="Sparta" object="Spartacom.base.1" version="1.0"/>
      <reference id="Core" object="Testcore.base.1" version="1.0"/>
      <reference id="AutoSrv" object="AutoSrvCom.base.1" version="1.0"/>
      <script language="VBScript" src="..\common\InitAddress.vbs"/>
      <script language="VBScript" src="TCPLib.vbs"/>
      <script id="TCP_Nagle" language="VBScript">


option explicit

Dim Core, Sparta, Autosrv, MediaType, AutoArpObject, IFace, pControllerObj
Const usMSS = 1460

'
' Start the script
'
StartScript "TCP_Nagle", g_szLogDirectory, "Tests for Nagle behavior"



' ==================================================================================================
' Main routine
' ==================================================================================================
Sub Main
   Core.SetAssertionTracking "70100"
   '/**
   ' @area name="Offload Compliance Test Assertions"
   ' @group name="TCP Nagle Algorithm Assertions"
   ' @group name="TCP Nagle Algorithm Assertions for TCP/IP v4" 
   ' @define name="Offload" Offload Compliance Test Assertions
   ' @define name="Nagle" TCP Nagle Algorithm Assertions
   ' @define name="Naglev4" TCP Nagle Algorithm Assertions for TCP/IP v4
   ' @hierarchy Offload Nagle Naglev4
   ' @key Reference="WLP# - x.x.x.x; RFC-1122 Section 4.2.3.4"
   ' @key TestDesc="TD-x.xx Offload Compliance Test Description"
   ' @key TestName="TCPv4 Nagle Algorithm Disable/Enabled Tests"
   ' @key TestParam=""
   ' @key TestLog="TCP_Nagle.log"
   '*/

   '/**
   ' @test name="The stack must send small segments immediately when Nagle is disabled."
   '    A connection is established. The Nagle algorithm is disabled on
   '    the socket. 60 send requests each with one byte of data are given
   '    to the stack. It should ignore the Nagle algorithm and send each
   '    request as it is indicated.
   '*/
   IFace.StartListening
   Core.StartTest "Functionality test: Nagling disabled, data size = 1"
   BasicNagleTest FALSE, 1, 150
   Core.EndTest
   Core.Sleep(2500)
   IFace.StopListening

   '/**
   ' @test name="The stack must send segments under MSS immediately when Nagle is disabled."
   '    A connection is established. The Nagle algorithm is disabled on
   '    the socket. 30 send requests each with 500 bytes of data are
   '    given to the stack. It should ignore the Nagle algorithm and
   '    send each request as it is indicated.
   '*/
   IFace.StartListening
   Core.StartTest "Functionality test: Nagling disabled, data size = 500"
   BasicNagleTest FALSE, 500, 30
   Core.EndTest
   Core.Sleep(2500)
   IFace.StopListening

   '/**
   ' @test name="The stack must group segments under MSS together when Nagle is enabled"
   '    A connection is established. The Nagle algorithm is enabled on
   '    the socket. 30 send requests each with 500 bytes of data are given
   '    to the stack. It should follow the Nagle algorithm and send a
   '    segment only when the outstanding data exceeds MSS or all
   '    outstanding data has been acknowledged.
   '*/
   IFace.StartListening
   Core.StartTest "Functionality test: Nagling enabled, data size = 500"
   BasicNagleTest TRUE, 500, 30
   Core.EndTest
   Core.Sleep(2500)
   IFace.StopListening

   '/**
   ' @test name="The stack must group small segments together when Nagle is enabled"
   '    A connection is established. The Nagle algorithm is enabled on
   '    the socket. 400 send requests each with one byte of data are given
   '    to the stack. It should follow the Nagle algorithm and send only
   '    one segment of 399 bytes.
   '*/
   IFace.StartListening
   Core.StartTest "Functionality test: Nagling enabled, data size = 1"
   BasicNagleTest TRUE, 1, 400
   Core.EndTest
   Core.Sleep(2500)
   IFace.StopListening

End Sub

'
' Routine to test the basic Nagle functionality
'
Sub BasicNagleTest(fNagle, ulPerSendSize, ulNumSends)
   Dim ulStatus, ulSeqNumber, ulAckNumber, ulSessionId, ulTID, usSrcPort, usDestPort

   ulSeqNumber = Clng(1000)
   ulAckNumber = Clng(1)
   usSrcPort = 5000
   usDestPort = 5001

   Core.StartVariation

   '
   ' Esatablish a TCP connection
   '
   ulStatus = Connect(usSrcPort, usDestPort, ulSeqNumber, ulAckNumber, ulSessionId, NULL, usMSS)
   if (ulStatus <> 0) then
      Core.BlockVariation "BasicNagleTest: Connect - " & ulStatus
      exit sub
   end if


   '
   ' Disable nagel if required
   '
   if Not (IsNull(fNagle)) then
      ulStatus = pControllerObj.SetSocketOption(ulSessionId, IPPROTO_TCP, TCP_NODELAY, Not(fNagle))
      if (ulStatus <> 0) then
         Core.BlockVariation "BasicNagleTest: SetSocketOption - " & ulStatus
         ResetConnection usSrcPort, usDestPort, ulSeqNumber, ulAckNumber, ulSessionId
         exit sub
      end if
   end if


   '
   ' Ask Autosrv to do a lot of small sends
   '
   ulStatus = pControllerObj.Send(ulSessionId, ulNumSends, 20, ulPerSendSize, ulTID)
   if (ulStatus <> 0) then
      Core.BlockVariation "BasicNagleTest: Send - " & ulStatus
      ResetConnection usSrcPort, usDestPort, ulSeqNumber, ulAckNumber, ulSessionId
      exit sub
   end if

   '
   ' Verify the nagle behavior - enabled/disabled
   '
   ulStatus = VerifyNagle(fNagle, (ulNumSends*ulPerSendSize), usSrcPort, usDestPort, ulSessionId, ulSeqNumber, ulAckNumber)
   if (ulStatus <> 0) then
      Core.BlockVariation "BasicNagleTest: VerifyNagle - " & ulStatus
      ResetConnection usSrcPort, usDestPort, ulSeqNumber, ulAckNumber, ulSessionId
      exit sub
   end if

   '
   ' Reset the connection
   '
   ResetConnection usSrcPort, usDestPort, ulSeqNumber, ulAckNumber, ulSessionId

End Sub

'
' Function to verify the nagle behavior
'
Function VerifyNagle(fNagle, ulDataSize, usSrcPort, usDestPort, ByRef ulSessionId, ByRef ulSeqNumber, ByRef ulAckNumber)
   Dim ulStatus, pTCPPacket, pACKPacket, ulBytesRcvd, ReceiveTimer, ulTID, fLoopPass


   '
   ' Start receiving the packets and ACKing them
   '
   ulBytesRcvd = 0
   Set pACKPacket = MakeTCPPacket(usSrcPort, usDestPort, ulSeqNumber, ulAckNumber, TCP_ACK, 0)
   fLoopPass = fNagle
   do while (ulBytesRcvd <> ulDataSize)
      '
      ' Receive all the data sent within the time out period
      '
      Dim ulPreviousSize, ulDataLength
      Set ReceiveTimer = Sparta.CreateReceiveTimer(200)
      ulPreviousSize = usMSS
      do
         set pTCPPacket = IFace.ReceiveTimed(ReceiveTimer)
         if not (pTCPPacket is Nothing) then
            core.log "Received - " & Hex(pTCPPacket.TCPHeader.SeqNumber) & ", Expecting - " & Hex(ulAckNumber)
            if (pTCPPacket.TCPHeader.SeqNumber <> ulAckNumber) then
               Core.log "VerifyNagle: Incorrect packet " & Hex(pTCPPacket.TCPHeader.SeqNumber) & " <> " & Hex(ulAckNumber)
               VerifyNagle = 1
               exit function
            end if

            ulDataLength = pTCPPacket.IpHeader.DatagramLength - (pTCPPacket.IpHeader.Length)*4 - (pTCPPacket.TcpHeader.HdrLength)*4
            ulAckNumber = ulAckNumber + ulDataLength
            ulBytesRcvd = ulBytesRcvd + ulDataLength


            if ((ulDataLength <> usMSS) AND (ulPreviousSize <> usMSS)) then
               if (fNagle = TRUE) then
                  '
                  ' Between every two small segments, there should be a full segment
                  '
                  Core.Log "VerifyNagle: Received 2 small segments " & ulPreviousSize & ", " & ulDataLength
                  VerifyNagle = 1
                  exit function
               else
                  '
                  ' We should get multiple small segments
                  '
                  fLoopPass = TRUE
               end if
            end if
            ulPreviousSize = ulDataLength
         end if
      loop while not (pTCPPacket is nothing)

      '
      ' Send ACK for the data if we have received any new data
      '
      pACKPacket.TCPHeader.AckNumber = ulAckNumber
      IFace.Send(pACKPacket)
   loop


   if (Not(fLoopPass)) then
      Core.Log "VerifyNagle: Didn't receive multiple small segments"
      VerifyNagle = 1
      exit function
   end if

   VerifyNagle = 0
End Function

      </script>
   </job>
</package>
