<HTML>
	<head>
	</head>
	<BODY style="font-family: Courier New; font-size:10pt">
		<h3 align="center">NDIS Test Commands</h3>
		<hr/>
		<a name="TOP"/>
		<b>Table Of Content</b>
		<br/>
		<a href="#CAdapter::CreateOpen">CAdapter::CreateOpen</a>
		<br/>
		<a href="#CAdapter::GetIPGateway">CAdapter::GetIPGateway</a>
		<br/>
		<a href="#CAdapter::QueryGuid">CAdapter::QueryGuid</a>
		<br/>
		<a href="#CAdapter::QueryInfo">CAdapter::QueryInfo</a>
		<br/>
		<a href="#Cbase::CreateAdapter">Cbase::CreateAdapter</a>
		<br/>
		<a href="#Cbase::CreateFlowspec">Cbase::CreateFlowspec</a>
		<br/>
		<a href="#Cbase::CreateIpSecObj">Cbase::CreateIpSecObj</a>
		<br/>
		<a href="#Cbase::CreateIpSecSAObj">Cbase::CreateIpSecSAObj</a>
		<br/>
		<a href="#Cbase::CreateTcpIpChecksumObj">Cbase::CreateTcpIpChecksumObj</a>
		<br/>
		<a href="#Cbase::CreateTcpIpLargeSendObj">Cbase::CreateTcpIpLargeSendObj</a>
		<br/>
		<a href="#Cbase::GetIPSecCombos">Cbase::GetIPSecCombos</a>
		<br/>
		<a href="#Cbase::GetWolPattern">Cbase::GetWolPattern</a>
		<br/>
		<a href="#Cbase::ParseOffloadInfo">Cbase::ParseOffloadInfo</a>
		<br/>
		<a href="#Cbase::PrintOidName">Cbase::PrintOidName</a>
		<br/>
		<a href="#Cbase::put_DebugLevel">Cbase::put_DebugLevel</a>
		<br/>
		<a href="#Cbase::QueryGuidAll">Cbase::QueryGuidAll</a>
		<br/>
		<a href="#Cbase::RestartPA">Cbase::RestartPA</a>
		<br/>
		<a href="#CBindCtrl::Bind">CBindCtrl::Bind</a>
		<br/>
		<a href="#CBindCtrl::GetBindStatus">CBindCtrl::GetBindStatus</a>
		<br/>
		<a href="#CBindCtrl::GetProtocolInfo">CBindCtrl::GetProtocolInfo</a>
		<br/>
		<a href="#CBindCtrl::ToggleStatus">CBindCtrl::ToggleStatus</a>
		<br/>
		<a href="#CBindCtrl::UnBind">CBindCtrl::UnBind</a>
		<br/>
		<a href="#CCore::get_CreateTAPI">CCore::get_CreateTAPI</a>
		<br/>
		<a href="#CCore::InitializeServer">CCore::InitializeServer</a>
		<br/>
		<a href="#CCore::UninitializeServer">CCore::UninitializeServer</a>
		<br/>
		<a href="#CFileTran::CheckCRC">CFileTran::CheckCRC</a>
		<br/>
		<a href="#CFileTran::Cleanup">CFileTran::Cleanup</a>
		<br/>
		<a href="#CFileTran::DataTransfer">CFileTran::DataTransfer</a>
		<br/>
		<a href="#CFileTran::GetTransferResults">CFileTran::GetTransferResults</a>
		<br/>
		<a href="#CFileTran::InitComPorts">CFileTran::InitComPorts</a>
		<br/>
		<a href="#CFileTran::SetUpTransfer">CFileTran::SetUpTransfer</a>
		<br/>
		<a href="#CIpSecStats::CompareIpSecStats">CIpSecStats::CompareIpSecStats</a>
		<br/>
		<a href="#CKernelCallsVerifier::GetImportedFunctions">CKernelCallsVerifier::GetImportedFunctions</a>
		<br/>
		<a href="#CMCTService::IsServerRunning">CMCTService::IsServerRunning</a>
		<br/>
		<a href="#CMCTService::StartMCTService">CMCTService::StartMCTService</a>
		<br/>
		<a href="#CMCTService::StopMCTService">CMCTService::StopMCTService</a>
		<br/>
		<a href="#CMdmObj::CloseLine">CMdmObj::CloseLine</a>
		<br/>
		<a href="#CMdmObj::CloseModem">CMdmObj::CloseModem</a>
		<br/>
		<a href="#CMdmObj::ClosePhoneDevice">CMdmObj::ClosePhoneDevice</a>
		<br/>
		<a href="#CMdmObj::CreateLine">CMdmObj::CreateLine</a>
		<br/>
		<a href="#CMdmObj::DisconnectATMode">CMdmObj::DisconnectATMode</a>
		<br/>
		<a href="#CMdmObj::DropCall">CMdmObj::DropCall</a>
		<br/>
		<a href="#CMdmObj::get_BlindDial">CMdmObj::get_BlindDial</a>
		<br/>
		<a href="#CMdmObj::get_CallSetupTimeout">CMdmObj::get_CallSetupTimeout</a>
		<br/>
		<a href="#CMdmObj::get_Compression">CMdmObj::get_Compression</a>
		<br/>
		<a href="#CMdmObj::get_ErrorControl">CMdmObj::get_ErrorControl</a>
		<br/>
		<a href="#CMdmObj::get_FlowControlHard">CMdmObj::get_FlowControlHard</a>
		<br/>
		<a href="#CMdmObj::get_FlowControlSoft">CMdmObj::get_FlowControlSoft</a>
		<br/>
		<a href="#CMdmObj::get_ForcedErrorControl">CMdmObj::get_ForcedErrorControl</a>
		<br/>
		<a href="#CMdmObj::get_InactivityTimer">CMdmObj::get_InactivityTimer</a>
		<br/>
		<a href="#CMdmObj::get_phoneNum">CMdmObj::get_phoneNum</a>
		<br/>
		<a href="#CMdmObj::get_SpeakerMode">CMdmObj::get_SpeakerMode</a>
		<br/>
		<a href="#CMdmObj::get_SpeakerVolume">CMdmObj::get_SpeakerVolume</a>
		<br/>
		<a href="#CMdmObj::get_SpeedAdjust">CMdmObj::get_SpeedAdjust</a>
		<br/>
		<a href="#CMdmObj::get_VoicePhoneNum">CMdmObj::get_VoicePhoneNum</a>
		<br/>
		<a href="#CMdmObj::GetModemList">CMdmObj::GetModemList</a>
		<br/>
		<a href="#CMdmObj::GetNegotiatedSpeed">CMdmObj::GetNegotiatedSpeed</a>
		<br/>
		<a href="#CMdmObj::InitModem">CMdmObj::InitModem</a>
		<br/>
		<a href="#CMdmObj::MakeBlindCall">CMdmObj::MakeBlindCall</a>
		<br/>
		<a href="#CMdmObj::MakeCall">CMdmObj::MakeCall</a>
		<br/>
		<a href="#CMdmObj::MakePassThroughCall">CMdmObj::MakePassThroughCall</a>
		<br/>
		<a href="#CMdmObj::MakeVoiceCall">CMdmObj::MakeVoiceCall</a>
		<br/>
		<a href="#CMdmObj::OpenPhoneDevice">CMdmObj::OpenPhoneDevice</a>
		<br/>
		<a href="#CMdmObj::put_BlindDial">CMdmObj::put_BlindDial</a>
		<br/>
		<a href="#CMdmObj::put_CallSetupTimeout">CMdmObj::put_CallSetupTimeout</a>
		<br/>
		<a href="#CMdmObj::put_Compression">CMdmObj::put_Compression</a>
		<br/>
		<a href="#CMdmObj::put_ErrorControl">CMdmObj::put_ErrorControl</a>
		<br/>
		<a href="#CMdmObj::put_FlowControlHard">CMdmObj::put_FlowControlHard</a>
		<br/>
		<a href="#CMdmObj::put_FlowControlSoft">CMdmObj::put_FlowControlSoft</a>
		<br/>
		<a href="#CMdmObj::put_ForcedErrorControl">CMdmObj::put_ForcedErrorControl</a>
		<br/>
		<a href="#CMdmObj::put_InactivityTimer">CMdmObj::put_InactivityTimer</a>
		<br/>
		<a href="#CMdmObj::put_phoneNum">CMdmObj::put_phoneNum</a>
		<br/>
		<a href="#CMdmObj::put_SpeakerMode">CMdmObj::put_SpeakerMode</a>
		<br/>
		<a href="#CMdmObj::put_SpeakerVolume">CMdmObj::put_SpeakerVolume</a>
		<br/>
		<a href="#CMdmObj::put_SpeedAdjust">CMdmObj::put_SpeedAdjust</a>
		<br/>
		<a href="#CMdmObj::put_VoicePhoneNum">CMdmObj::put_VoicePhoneNum</a>
		<br/>
		<a href="#CMdmObj::ReceiveATResponse">CMdmObj::ReceiveATResponse</a>
		<br/>
		<a href="#CMdmObj::SendATCommand">CMdmObj::SendATCommand</a>
		<br/>
		<a href="#COpen::AddParty">COpen::AddParty</a>
		<br/>
		<a href="#COpen::AddSA">COpen::AddSA</a>
		<br/>
		<a href="#COpen::AddWakePattern">COpen::AddWakePattern</a>
		<br/>
		<a href="#COpen::AfCloseSap">COpen::AfCloseSap</a>
		<br/>
		<a href="#COpen::AfCreateVc">COpen::AfCreateVc</a>
		<br/>
		<a href="#COpen::AfDeleteVc">COpen::AfDeleteVc</a>
		<br/>
		<a href="#COpen::AfOpenSap">COpen::AfOpenSap</a>
		<br/>
		<a href="#COpen::Cleanup">COpen::Cleanup</a>
		<br/>
		<a href="#COpen::CloseAddressFamily">COpen::CloseAddressFamily</a>
		<br/>
		<a href="#COpen::CloseCall">COpen::CloseCall</a>
		<br/>
		<a href="#COpen::ClosePartyCall">COpen::ClosePartyCall</a>
		<br/>
		<a href="#COpen::CoSend">COpen::CoSend</a>
		<br/>
		<a href="#COpen::DeleteSA">COpen::DeleteSA</a>
		<br/>
		<a href="#COpen::DropParty">COpen::DropParty</a>
		<br/>
		<a href="#COpen::EndWaitForEvent">COpen::EndWaitForEvent</a>
		<br/>
		<a href="#COpen::Get1394NodeId">COpen::Get1394NodeId</a>
		<br/>
		<a href="#COpen::Get1394VCInfo">COpen::Get1394VCInfo</a>
		<br/>
		<a href="#COpen::GetAtmAddress">COpen::GetAtmAddress</a>
		<br/>
		<a href="#COpen::GetAtmUniVersion">COpen::GetAtmUniVersion</a>
		<br/>
		<a href="#COpen::GetEvents">COpen::GetEvents</a>
		<br/>
		<a href="#COpen::GetIPCaptureResults">COpen::GetIPCaptureResults</a>
		<br/>
		<a href="#COpen::GetNumAtmAddresses">COpen::GetNumAtmAddresses</a>
		<br/>
		<a href="#COpen::GetOffloadPktInfo">COpen::GetOffloadPktInfo</a>
		<br/>
		<a href="#COpen::GetPerformanceResults">COpen::GetPerformanceResults</a>
		<br/>
		<a href="#COpen::GetReceiveResults">COpen::GetReceiveResults</a>
		<br/>
		<a href="#COpen::GetSendResults">COpen::GetSendResults</a>
		<br/>
		<a href="#COpen::GetStressResults">COpen::GetStressResults</a>
		<br/>
		<a href="#COpen::IpSecClose">COpen::IpSecClose</a>
		<br/>
		<a href="#COpen::IpSecOpen">COpen::IpSecOpen</a>
		<br/>
		<a href="#COpen::MakeCall">COpen::MakeCall</a>
		<br/>
		<a href="#COpen::MakeCall_1394">COpen::MakeCall_1394</a>
		<br/>
		<a href="#COpen::MakePartyCall">COpen::MakePartyCall</a>
		<br/>
		<a href="#COpen::NdisClose">COpen::NdisClose</a>
		<br/>
		<a href="#COpen::NdisOpen">COpen::NdisOpen</a>
		<br/>
		<a href="#COpen::NdisRequest">COpen::NdisRequest</a>
		<br/>
		<a href="#COpen::NdisRequest2">COpen::NdisRequest2</a>
		<br/>
		<a href="#COpen::NdisReset">COpen::NdisReset</a>
		<br/>
		<a href="#COpen::OpenAddressFamily">COpen::OpenAddressFamily</a>
		<br/>
		<a href="#COpen::RemoveWakePattern">COpen::RemoveWakePattern</a>
		<br/>
		<a href="#COpen::Reset1394Bus">COpen::Reset1394Bus</a>
		<br/>
		<a href="#COpen::Send">COpen::Send</a>
		<br/>
		<a href="#COpen::SendIP">COpen::SendIP</a>
		<br/>
		<a href="#COpen::SendIPSec">COpen::SendIPSec</a>
		<br/>
		<a href="#COpen::SendPackets">COpen::SendPackets</a>
		<br/>
		<a href="#COpen::SetIPAddr">COpen::SetIPAddr</a>
		<br/>
		<a href="#COpen::SetIpDefaults">COpen::SetIpDefaults</a>
		<br/>
		<a href="#COpen::SetLocalId">COpen::SetLocalId</a>
		<br/>
		<a href="#COpen::SetOffloadPktInfo">COpen::SetOffloadPktInfo</a>
		<br/>
		<a href="#COpen::SetOffloadTask">COpen::SetOffloadTask</a>
		<br/>
		<a href="#COpen::SetReceiveOption">COpen::SetReceiveOption</a>
		<br/>
		<a href="#COpen::SetRemoteId">COpen::SetRemoteId</a>
		<br/>
		<a href="#COpen::SetWakeupType">COpen::SetWakeupType</a>
		<br/>
		<a href="#COpen::StartIpCapture">COpen::StartIpCapture</a>
		<br/>
		<a href="#COpen::StartIPSecCapture">COpen::StartIPSecCapture</a>
		<br/>
		<a href="#COpen::StartPerformance">COpen::StartPerformance</a>
		<br/>
		<a href="#COpen::StartReceive">COpen::StartReceive</a>
		<br/>
		<a href="#COpen::StartStress">COpen::StartStress</a>
		<br/>
		<a href="#COpen::StartWaitForEvent">COpen::StartWaitForEvent</a>
		<br/>
		<a href="#COpen::StopReceive">COpen::StopReceive</a>
		<br/>
		<a href="#COpen::StopSend">COpen::StopSend</a>
		<br/>
		<a href="#COpen::UpdateAtmAddress">COpen::UpdateAtmAddress</a>
		<br/>
		<a href="#COpen::VCInfo">COpen::VCInfo</a>
		<br/>
		<a href="#COpen::WaitPerformance">COpen::WaitPerformance</a>
		<br/>
		<a href="#COpen::WaitSend">COpen::WaitSend</a>
		<br/>
		<a href="#COpen::WaitStress">COpen::WaitStress</a>
		<br/>
		<a href="#CPNPPower::QueryStopDriver">CPNPPower::QueryStopDriver</a>
		<br/>
		<a href="#CPNPPower::StartDriver">CPNPPower::StartDriver</a>
		<br/>
		<a href="#CPNPPower::StopDriver">CPNPPower::StopDriver</a>
		<br/>
		<a href="#CPnPPowerMgmt::get_Hibernate">CPnPPowerMgmt::get_Hibernate</a>
		<br/>
		<a href="#CPnPPowerMgmt::get_PowerStates">CPnPPowerMgmt::get_PowerStates</a>
		<br/>
		<a href="#CPnPPowerMgmt::get_Standby">CPnPPowerMgmt::get_Standby</a>
		<br/>
		<a href="#CResourceMgr::CreateResMgr">CResourceMgr::CreateResMgr</a>
		<br/>
		<a href="#CResourceMgr::DeleteResMgr">CResourceMgr::DeleteResMgr</a>
		<br/>
		<a href="#CResourceMgr::EnumerateNextModem">CResourceMgr::EnumerateNextModem</a>
		<br/>
		<a href="#CResourceMgr::get_CategoryID">CResourceMgr::get_CategoryID</a>
		<br/>
		<a href="#CResourceMgr::get_DialString">CResourceMgr::get_DialString</a>
		<br/>
		<a href="#CResourceMgr::get_EnumeratedModemCategory">CResourceMgr::get_EnumeratedModemCategory</a>
		<br/>
		<a href="#CResourceMgr::get_EnumeratedModemName">CResourceMgr::get_EnumeratedModemName</a>
		<br/>
		<a href="#CResourceMgr::get_LineDeviceID">CResourceMgr::get_LineDeviceID</a>
		<br/>
		<a href="#CResourceMgr::get_ModemName">CResourceMgr::get_ModemName</a>
		<br/>
		<a href="#CResourceMgr::get_PhoneDeviceID">CResourceMgr::get_PhoneDeviceID</a>
		<br/>
		<a href="#CResourceMgr::get_TAPIProperties">CResourceMgr::get_TAPIProperties</a>
		<br/>
		<a href="#CResourceMgr::GetNextModem">CResourceMgr::GetNextModem</a>
		<br/>
		<a href="#CResourceMgr::SetupResourceRequest">CResourceMgr::SetupResourceRequest</a>
		<br/>
		<a href="#CResourceMgr::StartModemEnum">CResourceMgr::StartModemEnum</a>
		<br/>
		<a href="#CSuppCore::get_CreateBindCtrl">CSuppCore::get_CreateBindCtrl</a>
		<br/>
		<a href="#CSuppCore::InitializeServer">CSuppCore::InitializeServer</a>
		<br/>
		<a href="#CSuppCore::UninitializeServer">CSuppCore::UninitializeServer</a>
		<br/>
		<a href="#CTAPICore::get_CreateStructure">CTAPICore::get_CreateStructure</a>
		<br/>
		<a href="#CTAPICore::LineClose">CTAPICore::LineClose</a>
		<br/>
		<a href="#CTAPICore::LineDeallocateCall">CTAPICore::LineDeallocateCall</a>
		<br/>
		<a href="#CTAPICore::LineDrop">CTAPICore::LineDrop</a>
		<br/>
		<a href="#CTAPICore::LineGetAddressCaps">CTAPICore::LineGetAddressCaps</a>
		<br/>
		<a href="#CTAPICore::LineGetAddressID">CTAPICore::LineGetAddressID</a>
		<br/>
		<a href="#CTAPICore::LineGetAddressStatus">CTAPICore::LineGetAddressStatus</a>
		<br/>
		<a href="#CTAPICore::LineGetCallInfo">CTAPICore::LineGetCallInfo</a>
		<br/>
		<a href="#CTAPICore::LineGetCallStatus">CTAPICore::LineGetCallStatus</a>
		<br/>
		<a href="#CTAPICore::LineGetDevCaps">CTAPICore::LineGetDevCaps</a>
		<br/>
		<a href="#CTAPICore::LineGetDevConfig">CTAPICore::LineGetDevConfig</a>
		<br/>
		<a href="#CTAPICore::LineGetLineDevStatus">CTAPICore::LineGetLineDevStatus</a>
		<br/>
		<a href="#CTAPICore::LineMakeCall">CTAPICore::LineMakeCall</a>
		<br/>
		<a href="#CTAPICore::LineNegotiateAPIVersion">CTAPICore::LineNegotiateAPIVersion</a>
		<br/>
		<a href="#CTAPICore::LineNegotiateExtVersion">CTAPICore::LineNegotiateExtVersion</a>
		<br/>
		<a href="#CTAPICore::LineOpen">CTAPICore::LineOpen</a>
		<br/>
		<a href="#CTAPICore::LineSecureCall">CTAPICore::LineSecureCall</a>
		<br/>
		<a href="#CTAPICore::LineSendUserUserInfo">CTAPICore::LineSendUserUserInfo</a>
		<br/>
		<a href="#CTAPICore::LineSetAppSpecific">CTAPICore::LineSetAppSpecific</a>
		<br/>
		<a href="#CTAPICore::LineSetCallParams">CTAPICore::LineSetCallParams</a>
		<br/>
		<a href="#CTAPICore::LineSetDevConfig">CTAPICore::LineSetDevConfig</a>
		<br/>
		<a href="#CTAPICore::LineSetMediaMode">CTAPICore::LineSetMediaMode</a>
		<br/>
		<a href="#CTAPICore::LineSetStatusMessages">CTAPICore::LineSetStatusMessages</a>
		<br/>
		<a href="#CTcpIpChecksum::CompareTcpIpCksumObjects">CTcpIpChecksum::CompareTcpIpCksumObjects</a>
		<br/>
		<a href="#CTcpIpChecksum::GetVariant">CTcpIpChecksum::GetVariant</a>
		<br/>
		<a href="#CTcpIpLargeSend::CompareTcpIpLargeSendObjects">CTcpIpLargeSend::CompareTcpIpLargeSendObjects</a>
		<br/>
		<a href="#CTcpIpLargeSend::GetVariant">CTcpIpLargeSend::GetVariant</a>
		<br/>
		<br/>
		<br/>
		<a name="CAdapter::CreateOpen"/>
		<a name="CreateOpen"/>
		<font size="+1">
			<b>CAdapter::CreateOpen</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CAdapter::CreateOpen(IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command creates an Open object on the associated adapter object.  This only sets up internal
structures in the user mode.  The driver should see no activity.  This should never fail.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns an IDispatch to newly created Open object</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<br/>
		<a name="CAdapter::GetIPGateway"/>
		<a name="GetIPGateway"/>
		<font size="+1">
			<b>CAdapter::GetIPGateway</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CAdapter::GetIPGateway(VARIANT *pIPAddr,VARIANT *pMacAddr,VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to get IP address and Default Gateway's MAC address for a particular adapter. This command is used
with tests that use IP Packets.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pIPAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for IP Address of the Adapter</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pMacAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Default Gateway's MAC Address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::SetIPAddr">COpen::SetIPAddr</a>
		<br/>
		<br/>
		<br/>
		<a name="CAdapter::QueryGuid"/>
		<a name="QueryGuid"/>
		<font size="+1">
			<b>CAdapter::QueryGuid</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CAdapter::QueryGuid(VARIANT *pvOidGuid, VARIANT *pvData, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command will uses WMI to query an oid in the driver.  Internally the OID is converted into
a WMI GUID.  The WMI query is made and ndis.sys converts the WMI query into a standard OID query.
The driver should see a standard OID query or nothing at all if ndis.sys responds to the OID
itself.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvOidGuid</i></font></td>
				<td valign="top"><font size="2" color="#000000">OID to query</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvData</i></font></td>
				<td valign="top"><font size="2" color="#000000">buffer to receive response in</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CAdapter::QueryInfo">CAdapter::QueryInfo</a>
		<a href="#COpen::NdisRequest">COpen::NdisRequest</a>
		<a href="#Cbase::QueryGuidAll">Cbase::QueryGuidAll</a>
		<br/>
		<br/>
		<br/>
		<a name="CAdapter::QueryInfo"/>
		<a name="QueryInfo"/>
		<font size="+1">
			<b>CAdapter::QueryInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CAdapter::QueryInfo(
    ULONG ulOidCode, 
    VARIANT *pData, 
    ULONG ulQueryMode,
    VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This uses CreateFile and DeviceIoControl to query oids from the user mode.
The modes can be one of the following:
   ulQUERY_ALL_STATS      - returns responses for a number of predefined oid queries
   ulQUERY_SELECTED_STATS - returns the response for this single oid on this single device (default)
   ulQUERY_GLOBAL_STATS   - returns the response for this single oid on this single device</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulOidCode</i></font></td>
				<td valign="top"><font size="2" color="#000000">OID to query</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pData</i></font></td>
				<td valign="top"><font size="2" color="#000000">buffer to receive response in</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulQueryMode</i></font></td>
				<td valign="top"><font size="2" color="#000000">(optional) See mode descriptions above</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::NdisRequest">COpen::NdisRequest</a>
		<a href="#Cbase::QueryGuidAll">Cbase::QueryGuidAll</a>
		<a href="#COpen::NdisRequest2">COpen::NdisRequest2</a>
		<a href="#CAdapter::QueryGuid">CAdapter::QueryGuid</a>
		<br/>
		<br/>
		<br/>
		<a name="Cbase::CreateAdapter"/>
		<a name="CreateAdapter"/>
		<font size="+1">
			<b>Cbase::CreateAdapter</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::CreateAdapter(IDispatch *pDispObj, IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to create an adapter object. The adapter object is fundamental
to ndistester scripts and is used to work with network devices on the machine. It 
encapsulates properties like device GUID and description etc. It also provides methods 
to create opens on the adapter and maintain the list of opens.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pDispObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The IAdapter object obtained from NDInfo</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns the newly created Adapter object to the caller</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set oTestCard = oNDTCore.CreateAdapter(oNDInfo.AdapterList(0))</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::CreateFlowspec"/>
		<a name="CreateFlowSpec"/>
		<font size="+1">
			<b>Cbase::CreateFlowspec</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::CreateFlowspec(IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to create flowspec object. The flowspec object is used as a QOS parameter
for ATM connection using MakeCall. The properties of flowspec object are as follows :
   TokenRate
   TokenBucketSize
   PeakBandwidth
   Latency
   DelayVariation
   ServiceType
   MaxSduSize
   MinimumPolicedSize</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Interface pointer used to return a pointer to Flowspec object</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::MakeCall">COpen::MakeCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set SendFlowSpec = oNDTCore.CreateFlowSpec()
Set RecvFlowSpec = oNDTCore.CreateFlowSpec()

SendFlowSpec.TokenBucketSize  = 32768
SendFlowSpec.ServiceType      = GUARANTEED
SendFlowSpec.MaxSduSize       = 10240</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::CreateIpSecObj"/>
		<a name="CreateIpSecObj"/>
		<font size="+1">
			<b>Cbase::CreateIpSecObj</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::CreateIpSecObj(VARIANT *pvIpsecObj, IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to create a TCP/IP IPSec Offload Task object that can be supplied
to the SetOffloadTask command in order to offload a IPSec task.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbIPSecObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The Offload Information to create the Task Offload Object from.
						This info usually comes from the ParseOffloadInfo method</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns a pointer to the IPSec task object created</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#Cbase::ParseOffloadInfo">Cbase::ParseOffloadInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set IPSecOffloadTask = oNDTCore.CreateTcpIpIpSecObj(IPSecOffloadTaskInfo(0))
'This will create and return to the script a IPSecOffloadTask object constructed from
'the first task in IPSecOffloadTaskInfo array.</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::CreateIpSecSAObj"/>
		<a name="CreateIpSecSAObj"/>
		<font size="+1">
			<b>Cbase::CreateIpSecSAObj</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::CreateIpSecSAObj(VARIANT *pvIpSecSAObj, IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command create an IPSecSAObj and returns a reference of it to the caller.
This command can be used to create an empty SA object or create a copy of an 
optionally passed SA object.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvIpSecSaObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">Optional parameter. An IPSecSAObj can be passed to
						create a copy of it and returned using this param</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns the IPSecSA object to the caller using</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set IPSecSA = oNDTCore.CreateIPSecSAObj()</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::CreateTcpIpChecksumObj"/>
		<a name="CreateTcpIpChecksumObj"/>
		<font size="+1">
			<b>Cbase::CreateTcpIpChecksumObj</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::CreateTcpIpChecksumObj(VARIANT *pvCheckSumObj, IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to Create a TCP/IP Checksum Offload Task object that can be supplied
to the SetOffloadTask command in order to offload a Checksum task.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbCheckSumObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The Offload Information to create the Task Offload Object from.
						This info usually comes from the ParseOffloadInfo method</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns a pointer to the checksum task object created</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#Cbase::ParseOffloadInfo">Cbase::ParseOffloadInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set CksumOffloadTask = oNDTCore.CreateTcpIpChecksumObj(CksumOffloadTaskInfo(0))
'This will create and return to the script a CksumOffloadTask object constructed from
'the first task in CksumOffloadTaskInfo array.</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::CreateTcpIpLargeSendObj"/>
		<a name="CreateTcpIpLargeSendObj"/>
		<font size="+1">
			<b>Cbase::CreateTcpIpLargeSendObj</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::CreateTcpIpLargeSendObj(VARIANT *pvLargeSendObj, IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to create a TCP/IP Largesend Offload Task object that can be supplied
to the SetOffloadTask command in order to offload a Largesend task.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbLargesendObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The Offload Information to create the Task Offload Object from.
						This info usually comes from the ParseOffloadInfo method</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns a pointer to the Largesend task object created</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#Cbase::ParseOffloadInfo">Cbase::ParseOffloadInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set LargesendOffloadTask = oNDTCore.CreateTcpIpLargesendObj(LargeSendOffloadTaskInfo(0))
'This will create and return to the script a LargeSendOffloadTask object constructed from
'the first task in LargeSendOffloadTaskInfo array.</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::GetIPSecCombos"/>
		<a name="GetIPSecCombos"/>
		<font size="+1">
			<b>Cbase::GetIPSecCombos</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::GetIPSecCombos(IDispatch *pIpSecTaskObj, VARIANT *pvlNumOfCombos, VARIANT *pvComboSafeArray, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to get an array of all the IP Sec combinations that can be offloaded
onto the NIC for a IP Sec Offload Task</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pIpSecTaskObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The IPSec Offload Task for which combinations are to be generated</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvlNumOfCombos</i></font></td>
				<td valign="top"><font size="2" color="#000000">The total number of combinations found</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvComboSafeArray</i></font></td>
				<td valign="top"><font size="2" color="#000000">Optional! The array that will contain the IPSecCombo objects for each combo</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns TRUE on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oNDTCore.GetIPSecCombos(IPSecOffloadTask, NumTestCombos, ArrayTestCombos)
ArrayTestCombos is an array of size NumTestCombos. To get this size, GetIPSecCombos
can be called without the last parameter (it is optional)</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::GetWolPattern"/>
		<a name="GetWolPattern"/>
		<font size="+1">
			<b>Cbase::GetWolPattern</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::GetWolPattern(
    VARIANT *pvPatternList, 
    ULONG ulStartOffset, 
    VARIANT *pvNetAddr, 
    ULONG NdisMedium, 
    VARIANT *pvPattern, 
    VARIANT *pvNextPatternOffset, 
    VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command can be used to successively get the next WOL pattern packet to bring
this machine out of sleep state. This command usually would follow a NdisRequest using
OID_PNP_WAKE_UP_PATTERN_LIST to query the list of all registered wake patterns</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvPatternList</i></font></td>
				<td valign="top"><font size="2" color="#000000">The list of registered patterns for WOL on this machines.
							This is usually obtained by querying OID_PNP_WAKE_UP_PATTERN_LIST</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulStartOffset</i></font></td>
				<td valign="top"><font size="2" color="#000000">Offset from where to start looking for pattern</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">MAC address to be filled as the source of WOL pattern packet</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>NdisMedium</i></font></td>
				<td valign="top"><font size="2" color="#000000">The medium the test is running on</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvPattern</i></font></td>
				<td valign="top"><font size="2" color="#000000">The variable in which Pattern is to be returned</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNextPatternOffset</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns the offset where the next pattern is in the pvPatternList</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AddWakePattern">COpen::AddWakePattern</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>NextPatternOffset = 0
while (NextPatternOffset &lt;&gt; PatternListSize)
   StartOffset = NextPatternOffset
   bResult = oNDTCore.GetWolPattern (PatternList, StartOffset, SupportCardAddr, NdisMedium, Pattern, NextPatternOffset)
Loop</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::ParseOffloadInfo"/>
		<a name="ParseOffloadInfo"/>
		<font size="+1">
			<b>Cbase::ParseOffloadInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::ParseOffloadInfo(LONG TaskId, VARIANT *pvAllTaskBuffer, VARIANT *pvlNumOfTasks, VARIANT *pvCurTaskBuffer, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command takes the offload information returned by the NIC and parses out information
for the requested offload task. It also returns how many tasks were parsed.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>TaskID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Type of Offload Task - Checksum, Largesend or IPSec</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvAllTaskBuffer</i></font></td>
				<td valign="top"><font size="2" color="#000000">The buffer containing offload tasks info returned by the driver</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvlNumOfTasks</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns number of tasks that were parsed out of the AllTaskBuffer</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvCurTaskBuffer</i></font></td>
				<td valign="top"><font size="2" color="#000000">The parsed tasks are returned using this buffer array</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns True on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#Cbase::CreateTcpIpChecksumObj">Cbase::CreateTcpIpChecksumObj</a>
		<a href="#Cbase::CreateTcpIpLargeSendObj">Cbase::CreateTcpIpLargeSendObj</a>
		<a href="#Cbase::CreateIPSecObj">Cbase::CreateIPSecObj</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oNDTCore.ParseOffloadInfo(TCP_LARGE_SEND_OFFLOAD_TASK, OffloadInfo, NumLargeSendTasks, LargeSendOffloadTaskInfo)
'This command is parsing 'OffloadInfo' to get any TCP Large Send tasks
'contained in it. The tasks found will be placed in LargeSendOffloadTaskInfo
'as an array of objects. The number of largesend tasks found will be placed 
'in NumLargeSendTasks variable</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::PrintOidName"/>
		<a name="PrintOidName"/>
		<font size="+1">
			<b>Cbase::PrintOidName</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::PrintOidName(ULONG ulOidCode)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to Print the friendly name of an OID given the Oid value</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulOidCode</i></font></td>
				<td valign="top"><font size="2" color="#000000">The oid whose name is to be printed</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oNDTCore.PrintOidName (OID_GEN_INIT_TIME_MS)</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::put_DebugLevel"/>
		<a name="DebugLevel"/>
		<font size="+1">
			<b>Cbase::put_DebugLevel</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::put_DebugLevel(long newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sets the debug level in the kernel mode protocol driver ndistest.sys.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">New level</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<br/>
		<a name="Cbase::QueryGuidAll"/>
		<a name="QueryGuidAll"/>
		<font size="+1">
			<b>Cbase::QueryGuidAll</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::QueryGuidAll(VARIANT *pvOidGuid, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command uses WMI to query an OID on all devices.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvOidGuid</i></font></td>
				<td valign="top"><font size="2" color="#000000">The oid to be queried</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">TRUE is success</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CAdapter::QueryInfo">CAdapter::QueryInfo</a>
		<a href="#COpen::NdisRequest">COpen::NdisRequest</a>
		<a href="#CAdapter::QueryGuid">CAdapter::QueryGuid</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oLog.Variation("Querying GUID for all adapters")
   bResult = oNDTCore.QueryGuidAll(ThisOid)
   If (Not bResult) Then
      oNDTCore.PrintOidName(ThisOid)
      call oLog.Failed ("Call to WmiQueryAllData failed for the OID" , 88888)
   End If</pre></code></div>
		<br/>
		<br/>
		<a name="Cbase::RestartPA"/>
		<a name="RestartPA"/>
		<font size="+1">
			<b>Cbase::RestartPA</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP Cbase::RestartPA(ULONG IpAddr, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function restarts the PolicyAgent service on the  specified machine.
This accomplishes two key things:
	* clears out filters plumbed by do_ipsecpol
	* clears out stats from the IPSec driver</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lpAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">Optional! IP address of machine whose policy agent
					is to be restarted! NULL means local machine</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, else failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = RestartPA ()
This restarts the PolcyAgent service of local machine</pre></code></div>
		<br/>
		<br/>
		<a name="CBindCtrl::Bind"/>
		<a name="BindProtocol"/>
		<font size="+1">
			<b>CBindCtrl::Bind</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CBindCtrl::Bind(BSTR bstrDeviceGUID, BSTR bstrProtocolName, VARIANT_BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">The Bind command binds a specified protocol to the device. 
(The name of this command is actually Bind not BindProtocol.)</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDeviceGUID</i></font></td>
				<td valign="top"><font size="2" color="#000000">The GUID of the device</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrProtocolName</i></font></td>
				<td valign="top"><font size="2" color="#000000">The name of the Protocol we want to bind</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CBindCtrl::UnBind">CBindCtrl::UnBind</a>
		<a href="#CBindCtrl::GetBindStatus">CBindCtrl::GetBindStatus</a>
		<a href="#CBindCtrl::ToggleStatus">CBindCtrl::ToggleStatus</a>
		<a href="#CBindCtrl::GetProtocolInfo">CBindCtrl::GetProtocolInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>' This example demonstrates binding of TCP/IP to the specified device.
bResult = oBindCtrl.Bind (deviceGUID, "Internet Protocol (TCP/IP)")</pre></code></div>
		<br/>
		<br/>
		<a name="CBindCtrl::GetBindStatus"/>
		<a name="GetProtocolBindStatus"/>
		<font size="+1">
			<b>CBindCtrl::GetBindStatus</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CBindCtrl::GetBindStatus(BSTR bstrDeviceGUID, BSTR bstrProtocolName, VARIANT *lStatus, VARIANT_BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Get the current bind status of a protocol with the device specified.
(The name of this command is actually GetBindStatus not GetProtocolBindStatus.)
Possible lStatus values are:
	0 if any error occurs during this operation
	1 protocol is bound
	2 protocol is not bound
	3 protocol is not bindable</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDeviceGUID</i></font></td>
				<td valign="top"><font size="2" color="#000000">The GUID of the device</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrProtocolName</i></font></td>
				<td valign="top"><font size="2" color="#000000">The name of the Protocol of interest</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">See above for table of status values returned by this function</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CBindCtrl::Bind">CBindCtrl::Bind</a>
		<a href="#CBindCtrl::UnBind">CBindCtrl::UnBind</a>
		<a href="#CBindCtrl::ToggleStatus">CBindCtrl::ToggleStatus</a>
		<a href="#CBindCtrl::GetProtocolInfo">CBindCtrl::GetProtocolInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oBindCtrl.GetBindStatus (deviceGUID, "Internet Protocol (TCP/IP)", lCurrentStatus)</pre></code></div>
		<br/>
		<br/>
		<a name="CBindCtrl::GetProtocolInfo"/>
		<a name="GetProtocolInfo"/>
		<font size="+1">
			<b>CBindCtrl::GetProtocolInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CBindCtrl::GetProtocolInfo(VARIANT *iBufferLength, VARIANT *iTotalProtocols, VARIANT_BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Finds all of the installed protocols and internally stores the information. Also returns the size
of the buffer needed if the caller wishes to obtain those protocols. This method initializes the 
oBindCtrl object with info on the installed protocols and is, therefore, one of the first methods 
called after the oBindCtrl object has been created.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>iBufferLength</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns length of the buffer required if all protocols names are needed</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>iTotalProtocols</i></font></td>
				<td valign="top"><font size="2" color="#000000">The total number of protocols available</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CBindCtrl::Bind">CBindCtrl::Bind</a>
		<a href="#CBindCtrl::UnBind">CBindCtrl::UnBind</a>
		<a href="#CBindCtrl::GetBindStatus">CBindCtrl::GetBindStatus</a>
		<a href="#CBindCtrl::ToggleStatus">CBindCtrl::ToggleStatus</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oBindCtrl.GetProtocolInfo(nBufferSizeNeeded, nNumProtocols)</pre></code></div>
		<br/>
		<br/>
		<a name="CBindCtrl::ToggleStatus"/>
		<a name="ToggleProtocolBindStatus"/>
		<font size="+1">
			<b>CBindCtrl::ToggleStatus</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CBindCtrl::ToggleStatus(BSTR bstrDeviceGUID, VARIANT_BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command toggles the bind status of ALL the protocols for this device
(The name of this command is actually ToggleStatus not ToggleProtocolBindStatus.)</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDeviceGUID</i></font></td>
				<td valign="top"><font size="2" color="#000000">The GUID of the device</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CBindCtrl::Bind">CBindCtrl::Bind</a>
		<a href="#CBindCtrl::UnBind">CBindCtrl::UnBind</a>
		<a href="#CBindCtrl::GetBindStatus">CBindCtrl::GetBindStatus</a>
		<a href="#CBindCtrl::GetProtocolInfo">CBindCtrl::GetProtocolInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oBindCtrl.ToggleStatus (deviceGUID)</pre></code></div>
		<br/>
		<br/>
		<a name="CBindCtrl::UnBind"/>
		<a name="UnBindProtocol"/>
		<font size="+1">
			<b>CBindCtrl::UnBind</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CBindCtrl::UnBind(BSTR bstrDeviceGUID, BSTR bstrProtocolName, VARIANT_BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">The UnBind command unbinds the specified protocol from the device.
(The name of this command is actually UnBind not UnBindProtocol.)</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDeviceGUID</i></font></td>
				<td valign="top"><font size="2" color="#000000">The GUID of the device</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrProtocolName</i></font></td>
				<td valign="top"><font size="2" color="#000000">The name of the Protocol we want to unbind</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CBindCtrl::Bind">CBindCtrl::Bind</a>
		<a href="#CBindCtrl::GetBindStatus">CBindCtrl::GetBindStatus</a>
		<a href="#CBindCtrl::ToggleStatus">CBindCtrl::ToggleStatus</a>
		<a href="#CBindCtrl::GetProtocolInfo">CBindCtrl::GetProtocolInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>' This example demonstrates unbinding of TCP/IP from the specified device
bResult = oBindCtrl.UnBind (deviceGUID, "Internet Protocol (TCP/IP)")</pre></code></div>
		<br/>
		<br/>
		<a name="CCore::get_CreateTAPI"/>
		<a name="get_CreateTAPI"/>
		<font size="+1">
			<b>CCore::get_CreateTAPI</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CCore::get_CreateTAPI(LONG lConnID, IDispatch **pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property is provided to create and return an IDispatch for the TAPI Object. The TAPI Object 
is the main object that provides the TAPI functionality to the script.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lConnID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Connection ID for the resoruce.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a script variable that will receive the IDispatch of the TAPI Object.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CCore::InitializeServer"/>
		<a name="CCore::InitializeServer"/>
		<font size="+1">
			<b>CCore::InitializeServer</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CCore::InitializeServer(LONG lConnectionID, BSTR bstrGUID, VARIANT_BOOL *bReturn)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function called by the client to initialize the server on the remote side. The remote side
will start the server by opening all the lines associated with the given GUID.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lConnectionID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Connection ID that identifies the resource location</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrGUID</i></font></td>
				<td valign="top"><font size="2" color="#000000">GUID that identifies the device to use.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bReturn</i></font></td>
				<td valign="top"><font size="2" color="#000000">VARIANT_BOOL that returns the status of the command</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CCore::UninitializeServer">CCore::UninitializeServer</a>
		<br/>
		<br/>
		<br/>
		<a name="CCore::UninitializeServer"/>
		<a name="CCore::UninitializeServer"/>
		<font size="+1">
			<b>CCore::UninitializeServer</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CCore::UninitializeServer(LONG lConnectionID, VARIANT_BOOL *bReturn)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function called by the client to uninitialize the server on the remote side.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lConnectionID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Connection ID that identifies the resource location.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bReturn</i></font></td>
				<td valign="top"><font size="2" color="#000000">VARIANT_BOOL that returns the status of the command.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CCore::InitializeServer">CCore::InitializeServer</a>
		<br/>
		<br/>
		<br/>
		<a name="CFileTran::CheckCRC"/>
		<a name="CheckCRC"/>
		<font size="+1">
			<b>CFileTran::CheckCRC</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CFileTran::CheckCRC(BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method verifies if the CRC of the bytes transferred and the CRC of the bytes received is equal.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 if CRC matches, 0 otherwise</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oFileTran.CheckCRC
.</pre></code></div>
		<br/>
		<br/>
		<a name="CFileTran::Cleanup"/>
		<a name="Cleanup"/>
		<font size="+1">
			<b>CFileTran::Cleanup</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CFileTran::Cleanup()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method deletes the internal objects created for file transfer.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oFileTran.Cleanup
.</pre></code></div>
		<br/>
		<br/>
		<a name="CFileTran::DataTransfer"/>
		<a name="DataTransfer"/>
		<font size="+1">
			<b>CFileTran::DataTransfer</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CFileTran::DataTransfer(DWORD dwTransferType)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method does the actual transfer of data.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwTransferType</i></font></td>
				<td valign="top"><font size="2" color="#000000">set to 1 for Read, 2 for Write and 3 for both Read and Write</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oFileTran.DataTransfer 3 'sending and receiving data
.</pre></code></div>
		<br/>
		<br/>
		<a name="CFileTran::GetTransferResults"/>
		<a name="GetTransferResults"/>
		<font size="+1">
			<b>CFileTran::GetTransferResults</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CFileTran::GetTransferResults(BSTR *pbstrTransferMessages)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method gets the error strings and data transfer messages after a file transfer.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbstrTransferMessages</i></font></td>
				<td valign="top"><font size="2" color="#000000">BSTR to record the transfer result messages like bytes sent, bytes received etc.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bstrResults = oFileTran.GetTransferResults
.</pre></code></div>
		<br/>
		<br/>
		<a name="CFileTran::InitComPorts"/>
		<a name="InitComPorts"/>
		<font size="+1">
			<b>CFileTran::InitComPorts</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CFileTran::InitComPorts(DWORD dwLocalPort, DWORD dwRemotePort, DWORD dwFileTransferType)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method initializes the internal objects for doing remote and local file operations on the comm 
handles passed as parameters. The dwFileTransferType specifies if the transfer is from local to 
remote modem, remote to local modem, local to local modem or remote to remote modem.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwLocalPort</i></font></td>
				<td valign="top"><font size="2" color="#000000">CommHandle for the local modem after a successful makecall is done</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwRemotePort</i></font></td>
				<td valign="top"><font size="2" color="#000000">CommHandle for the remote modem after a successful makecall is done</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwFileTransferType</i></font></td>
				<td valign="top"><font size="2" color="#000000">specifies if the transfer is from local to remote modem, 
  remote to local modem, local to local modem or remote to remote modem.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oFileTran.InitComPorts nLocalHandle, nRemoteHandle, nTranstype
.</pre></code></div>
		<br/>
		<br/>
		<a name="CFileTran::SetUpTransfer"/>
		<a name="SetUpTransfer"/>
		<font size="+1">
			<b>CFileTran::SetUpTransfer</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CFileTran::SetUpTransfer(BSTR bstrFileName)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method opens the file bstrFileName and creates internal objects to create fixed size data package from the given file.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrFileName</i></font></td>
				<td valign="top"><font size="2" color="#000000">File that is used to read in the transfer data</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oFileTran.SetUpTransfer "oracle.txt"
.</pre></code></div>
		<br/>
		<br/>
		<a name="CIpSecStats::CompareIpSecStats"/>
		<a name="CompareIpSecStats"/>
		<font size="+1">
			<b>CIpSecStats::CompareIpSecStats</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CIpSecStats::CompareIpSecStats(IDispatch *pvIpSecStatsObj, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command compares the current object with another IpSecStats object and
returns true if they are equal, else false</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvIpSecStatsObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The IPSecStats object to compare against</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if objects are identical, else false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oIpSecStatsObj1.CompareIpSecStats (oIpSecStatsObj2)</pre></code></div>
		<br/>
		<br/>
		<a name="CKernelCallsVerifier::GetImportedFunctions"/>
		<a name="GetImportedFunctions"/>
		<font size="+1">
			<b>CKernelCallsVerifier::GetImportedFunctions</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CKernelCallsVerifier::GetImportedFunctions(BSTR bstrDriver, BSTR bstrModule, VARIANT *strResult, VARIANT_BOOL* pReturnValue)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function is called by the script to get list of functions imported and being called by the 
bstrModule in bstrDriver. The list of the function calls is stored in strResult string. The 
function names are separated by a space.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDriver</i></font></td>
				<td valign="top"><font size="2" color="#000000">Name of the driver.sys file</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrModule</i></font></td>
				<td valign="top"><font size="2" color="#000000">Module we want to get imported functions list for</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>strResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return by ref, space separated list of functions of bstrModule imported by 
                     bstrDriver</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pReturnValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return True on success, False on Failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oKernelCallsVerifier.GetImportedFunctions ("eth100.sys", "HAL.DLL", strFuncList)</pre></code></div>
		<br/>
		<br/>
		<a name="CMCTService::IsServerRunning"/>
		<a name="IsServerRunning"/>
		<font size="+1">
			<b>CMCTService::IsServerRunning</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMCTService::IsServerRunning(BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method checks if the remote MCT Server is available.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return value of TRUE if Server is accepting connections, FALSE otherwise.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMCTService::StartMCTService">CMCTService::StartMCTService</a>
		<a href="#CMCTService::StopMCTService">CMCTService::StopMCTService</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oMCTService.IsServerRunning
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMCTService::StartMCTService"/>
		<a name="StartMCTService"/>
		<font size="+1">
			<b>CMCTService::StartMCTService</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMCTService::StartMCTService(BSTR bstrServerName,BSTR bstrProtSeq)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method initializes TAPI and RPC connections to the remote MCT Server.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrServerName</i></font></td>
				<td valign="top"><font size="2" color="#000000">Name of the machine where MCTServer is running</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrProtSeq</i></font></td>
				<td valign="top"><font size="2" color="#000000">Protocol used to connect to the MCTServer</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMCTService::StopMCTService">CMCTService::StopMCTService</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oMCTService.StartMCTService "myservermachine","ncacn_ip_tcp" 
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMCTService::StopMCTService"/>
		<a name="StopMCTService"/>
		<font size="+1">
			<b>CMCTService::StopMCTService</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMCTService::StopMCTService()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method frees TAPI and RPC connections to the remote MCT Server.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMCTService::StartMCTService">CMCTService::StartMCTService</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oMCTService.StopMCTService
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::CloseLine"/>
		<a name="CloseLine"/>
		<font size="+1">
			<b>CMdmObj::CloseLine</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::CloseLine()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method calls TAPI functions lineShutdown  and destroys the internal objects created for implementing the TAPI functionality.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::CreateLine">CMdmObj::CreateLine</a>
		<br/>
		<br/>
		<br/>
		<a name="CMdmObj::CloseModem"/>
		<a name="CloseModem"/>
		<font size="+1">
			<b>CMdmObj::CloseModem</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::CloseModem()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method calls TAPI functions lineClose and phoneClose to close the modem and phone device associated with the modem.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::InitModem">CMdmObj::InitModem</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.CloseModem
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::ClosePhoneDevice"/>
		<a name="ClosePhoneDevice"/>
		<font size="+1">
			<b>CMdmObj::ClosePhoneDevice</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::ClosePhoneDevice()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method closes the phone device.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::OpenPhoneDevice">CMdmObj::OpenPhoneDevice</a>
		<br/>
		<br/>
		<br/>
		<a name="CMdmObj::CreateLine"/>
		<a name="CreateLine"/>
		<font size="+1">
			<b>CMdmObj::CreateLine</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::CreateLine(BOOL bRemote)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method creates a local modem object if bRemote is False. If bRemote is true, it creates a modem object located 
on remote machine. This is the first call that has to be made on a modem COM object for initialization of internal 
variables. It is followed by call to InitModem.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bRemote</i></font></td>
				<td valign="top"><font size="2" color="#000000">TRUE if modem is on another machine running MCT Server, FALSE otherwise</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::CloseLine">CMdmObj::CloseLine</a>
		<br/>
		<br/>
		<br/>
		<a name="CMdmObj::DisconnectATMode"/>
		<a name="DisconnectATMode"/>
		<font size="+1">
			<b>CMdmObj::DisconnectATMode</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::DisconnectATMode()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method is used to disconnect when a modem makes call and connects using ATDT command or 
ATA command in passthrough mode</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::MakePassThroughCall">CMdmObj::MakePassThroughCall</a>
		<a href="#CMdmObj::SendATCommand">CMdmObj::SendATCommand</a>
		<a href="#CMdmObj::ReceiveATResponse">CMdmObj::ReceiveATResponse</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.DisconnectATMode
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::DropCall"/>
		<a name="DropCall"/>
		<font size="+1">
			<b>CMdmObj::DropCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::DropCall()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method calls TAPI functions lineDrop and lineDeallocateCall so that the modem returns to an idle state. 
Any time modem makes call using MakeCall, MakeVoiceCall or MakeBlindDial, DropCall has to be called for 
that modem object.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::MakeCall">CMdmObj::MakeCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.MakeCall("2342324", oRemoteModem)
.
.
oModem.DropCall
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_BlindDial"/>
		<a name="get_BlindDial"/>
		<font size="+1">
			<b>CMdmObj::get_BlindDial</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_BlindDial(BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the BlindDial settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 is BlindDial is set 0 if not set.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_BlindDial">CMdmObj::put_BlindDial</a>
		<a href="#CMdmObj::MakeBlindCall">CMdmObj::MakeBlindCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bBlindDial = oModem.BlindDial
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_CallSetupTimeout"/>
		<a name="get_CallSetupTimeout"/>
		<font size="+1">
			<b>CMdmObj::get_CallSetupTimeout</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_CallSetupTimeout(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the CallSetupTimeout settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">current value of callsetup timeout</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_CallSetupTimeout">CMdmObj::put_CallSetupTimeout</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nCallSetupTimeout = oModem.CallSetupTimeout
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_Compression"/>
		<a name="get_Compression"/>
		<font size="+1">
			<b>CMdmObj::get_Compression</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_Compression(BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the Compression settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 is Compression is set 0 if not set.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_Compression">CMdmObj::put_Compression</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bCompression = oModem.Compression
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_ErrorControl"/>
		<a name="get_ErrorControl"/>
		<font size="+1">
			<b>CMdmObj::get_ErrorControl</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_ErrorControl(BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the ErrorControl settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 is ErrorControl is set 0 if not set.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_ErrorControl">CMdmObj::put_ErrorControl</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bErrorControl = oModem.ErrorControl
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_FlowControlHard"/>
		<a name="get_FlowControlHard"/>
		<font size="+1">
			<b>CMdmObj::get_FlowControlHard</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_FlowControlHard(BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the FlowControlHard settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 is FlowControlHard is set 0 if not set.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_FlowControlHard">CMdmObj::put_FlowControlHard</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bFlowControlHardl = oModem.FlowControlHard
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_FlowControlSoft"/>
		<a name="get_FlowControlSoft"/>
		<font size="+1">
			<b>CMdmObj::get_FlowControlSoft</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_FlowControlSoft(BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the FlowControlSoft settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 is FlowControlSoft is set 0 if not set.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_FlowControlSoft">CMdmObj::put_FlowControlSoft</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bFlowControlSoftl = oModem.FlowControlSoft
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_ForcedErrorControl"/>
		<a name="get_ForcedErrorControl"/>
		<font size="+1">
			<b>CMdmObj::get_ForcedErrorControl</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_ForcedErrorControl(BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the ForcedErrorControl settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 is ForcedErrorControl is set 0 if not set.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_ForcedErrorControl">CMdmObj::put_ForcedErrorControl</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bForcedErrorControl = oModem.ForcedErrorControl
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_InactivityTimer"/>
		<a name="get_InactivityTimer"/>
		<font size="+1">
			<b>CMdmObj::get_InactivityTimer</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_InactivityTimer(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the InactivityTimer settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">current value of inactivity timeout</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_InactivityTimer">CMdmObj::put_InactivityTimer</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nInactivityTimer = oModem.InactivityTimer
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_phoneNum"/>
		<a name="get_phoneNum"/>
		<font size="+1">
			<b>CMdmObj::get_phoneNum</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_phoneNum(BSTR *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the phone number for the modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">BSTR to hold the phone number</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_phoneNum">CMdmObj::put_phoneNum</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>strPhoneNum = oModem.phoneNum
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_SpeakerMode"/>
		<a name="get_SpeakerMode"/>
		<font size="+1">
			<b>CMdmObj::get_SpeakerMode</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_SpeakerMode(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the SpeakerMode settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">current value of speaker mode</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_SpeakerMode">CMdmObj::put_SpeakerMode</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nSpeakerMode = oModem.SpeakerMode
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_SpeakerVolume"/>
		<a name="get_SpeakerVolume"/>
		<font size="+1">
			<b>CMdmObj::get_SpeakerVolume</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_SpeakerVolume(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the SpeakerVolume settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">current value of speaker volume (low, medium or high)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_SpeakerVolume">CMdmObj::put_SpeakerVolume</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nSpeakerVolume = oModem.SpeakerVolume
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_SpeedAdjust"/>
		<a name="get_SpeedAdjust"/>
		<font size="+1">
			<b>CMdmObj::get_SpeedAdjust</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_SpeedAdjust(BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the SpeedAdjust settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 is SpeedAdjust is set 0 if not set.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_SpeedAdjust">CMdmObj::put_SpeedAdjust</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bSpeedAdjust = oModem.SpeedAdjust
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::get_VoicePhoneNum"/>
		<a name="get_VoicePhoneNum"/>
		<font size="+1">
			<b>CMdmObj::get_VoicePhoneNum</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::get_VoicePhoneNum(BSTR *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the voice phone number to be used for voice tests</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">BSTR to hold the voice phone number</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_VoicePhoneNum">CMdmObj::put_VoicePhoneNum</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>strVoicePhoneNum = oModem.VoicePhoneNum
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::GetModemList"/>
		<a name="GetModemList"/>
		<font size="+1">
			<b>CMdmObj::GetModemList</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::GetModemList(VARIANT *pName, VARIANT *pNum)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method gets an array of modem names and their TAPI line IDs as variant arrays.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pName</i></font></td>
				<td valign="top"><font size="2" color="#000000">array of modem names</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pNum</i></font></td>
				<td valign="top"><font size="2" color="#000000">corresponding array of line id</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.GetModemList(arrNames, arrLineIDs)
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::GetNegotiatedSpeed"/>
		<a name="GetNegotiatedSpeed"/>
		<font size="+1">
			<b>CMdmObj::GetNegotiatedSpeed</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::GetNegotiatedSpeed(long *pSpeed)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method gets the negotiated speed of currently completed connection</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pSpeed</i></font></td>
				<td valign="top"><font size="2" color="#000000">speed of connection in bits/sec</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nSpeed = oModem.GetNegotiatedSpeed
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::InitModem"/>
		<a name="InitModem"/>
		<font size="+1">
			<b>CMdmObj::InitModem</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::InitModem(DWORD dwDeviceID)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method initializes the modem using the lineInitializeEx and lineOpen functions of TAPI. The lineID is the 
unique line device id for the selected modem device</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwDeviceID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Line Id for the given modem</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::CloseModem">CMdmObj::CloseModem</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>LineDeviceID = 1
oModem.InitModem(LineDeviceID)
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::MakeBlindCall"/>
		<a name="MakeBlindCall"/>
		<font size="+1">
			<b>CMdmObj::MakeBlindCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::MakeBlindCall(BSTR bstrPhoneNum)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method calls bstrPhoneNim and waits for only TAPI line_reply event. User has to set the 
BlindDial option before calling this method.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrPhoneNum</i></font></td>
				<td valign="top"><font size="2" color="#000000">phone number to call</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::put_BlindDial">CMdmObj::put_BlindDial</a>
		<a href="#CMdmObj::get_BlindDial">CMdmObj::get_BlindDial</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.MakeBlindCall("234231")
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::MakeCall"/>
		<a name="MakeCall"/>
		<font size="+1">
			<b>CMdmObj::MakeCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::MakeCall(BSTR bstrPhoneNum, IDispatch *pDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method connects the current modem object by calling bstrPhoneNum and waiting for TAPI events needed 
to make sure that two modems are in connected state</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrPhoneNum</i></font></td>
				<td valign="top"><font size="2" color="#000000">Phone number to call</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Modem object used for connection</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::DropCall">CMdmObj::DropCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.MakeCall("2342324", oRemoteModem)
.
.
oModem.DropCall
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::MakePassThroughCall"/>
		<a name="MakePassThroughCall"/>
		<font size="+1">
			<b>CMdmObj::MakePassThroughCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::MakePassThroughCall()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method sets the current modem object to work in PassThrough Mode so that user can send AT commands 
directly to the COM port and receive responses</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::SendATCommand">CMdmObj::SendATCommand</a>
		<a href="#CMdmObj::ReceiveATResponse">CMdmObj::ReceiveATResponse</a>
		<a href="#CMdmObj::DisconnectATMode">CMdmObj::DisconnectATMode</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.MakePassThroughCall
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::MakeVoiceCall"/>
		<a name="MakeVoiceCall"/>
		<font size="+1">
			<b>CMdmObj::MakeVoiceCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::MakeVoiceCall(BSTR bstrPhoneNum)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method calls bstrPhoneNum in Voice Mode and waits for TAPI events to make sure that modem is in connected state.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrPhoneNum</i></font></td>
				<td valign="top"><font size="2" color="#000000">phone number to call</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::DropCall">CMdmObj::DropCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.MakeVoiceCall( oModem.VoicePhoneNum )
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::OpenPhoneDevice"/>
		<a name="OpenPhoneDevice"/>
		<font size="+1">
			<b>CMdmObj::OpenPhoneDevice</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::OpenPhoneDevice()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method opens a phone device for a modem if the modem supports phone capabilities.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::ClosePhoneDevice">CMdmObj::ClosePhoneDevice</a>
		<br/>
		<br/>
		<br/>
		<a name="CMdmObj::put_BlindDial"/>
		<a name="put_BlindDial"/>
		<font size="+1">
			<b>CMdmObj::put_BlindDial</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_BlindDial(BOOL newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the BlindDial settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 to set BlindDial, 0 to reset it</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_BlindDial">CMdmObj::get_BlindDial</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.BlindDial 1 'setting BlindDial ON
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_CallSetupTimeout"/>
		<a name="put_CallSetupTimeout"/>
		<font size="+1">
			<b>CMdmObj::put_CallSetupTimeout</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_CallSetupTimeout(long newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the CallSetupTimeout settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">new value of call setup timeout</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_CallSetupTimeout">CMdmObj::get_CallSetupTimeout</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.CallSetupTimeout 10 'setting call setup timeout to 10 seconds
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_Compression"/>
		<a name="put_Compression"/>
		<font size="+1">
			<b>CMdmObj::put_Compression</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_Compression(BOOL newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the Compression settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 to set Compression, 0 to reset it</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_Compression">CMdmObj::get_Compression</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.Compression 1 'setting compression ON
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_ErrorControl"/>
		<a name="put_ErrorControl"/>
		<font size="+1">
			<b>CMdmObj::put_ErrorControl</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_ErrorControl(BOOL newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the ErrorControl settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 to set ErrorControl, 0 to reset it</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_ErrorControl">CMdmObj::get_ErrorControl</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.ErrorControl 1 'setting ErrorControl ON
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_FlowControlHard"/>
		<a name="put_FlowControlHard"/>
		<font size="+1">
			<b>CMdmObj::put_FlowControlHard</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_FlowControlHard(BOOL newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the FlowControlHard settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 to set FlowControlHard, 0 to reset it</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_FlowControlHard">CMdmObj::get_FlowControlHard</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.FlowControlHard 1 'setting FlowControlHard ON
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_FlowControlSoft"/>
		<a name="put_FlowControlSoft"/>
		<font size="+1">
			<b>CMdmObj::put_FlowControlSoft</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_FlowControlSoft(BOOL newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the FlowControlSoft settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 to set FlowControlSoft, 0 to reset it</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_FlowControlSoft">CMdmObj::get_FlowControlSoft</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.FlowControlSoft 1 'setting FlowControlSoft ON
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_ForcedErrorControl"/>
		<a name="put_ForcedErrorControl"/>
		<font size="+1">
			<b>CMdmObj::put_ForcedErrorControl</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_ForcedErrorControl(BOOL newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the ForcedErrorControl settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 to set ForcedErrorControl, 0 to reset it</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_ForcedErrorControl">CMdmObj::get_ForcedErrorControl</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.ForcedErrorControl 1 'setting ForcedErrorControl ON
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_InactivityTimer"/>
		<a name="put_InactivityTimer"/>
		<font size="+1">
			<b>CMdmObj::put_InactivityTimer</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_InactivityTimer(long newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the InactivityTimer settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">new value of inactivity timeout</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_InactivityTimer">CMdmObj::get_InactivityTimer</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.InactivityTimer 10 'setting Inactivity timeout to 10 seconds
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_phoneNum"/>
		<a name="put_phoneNum"/>
		<font size="+1">
			<b>CMdmObj::put_phoneNum</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_phoneNum(BSTR newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the phone number for the modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">BSTR value of phone number to be set</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_phoneNum">CMdmObj::get_phoneNum</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.phoneNum "3287412"
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_SpeakerMode"/>
		<a name="put_SpeakerMode"/>
		<font size="+1">
			<b>CMdmObj::put_SpeakerMode</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_SpeakerMode(long newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the SpeakerMode settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">new value of speaker mode</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_SpeakerMode">CMdmObj::get_SpeakerMode</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.SpeakerMode spkModeDial 'setting speaker mode to dial only
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_SpeakerVolume"/>
		<a name="put_SpeakerVolume"/>
		<font size="+1">
			<b>CMdmObj::put_SpeakerVolume</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_SpeakerVolume(long newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the SpeakerVolume settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">new value of speaker volume (low, medium or high)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_SpeakerVolume">CMdmObj::get_SpeakerVolume</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.SpeakerVolume spkVolHigh 'setting speaker volume to high
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_SpeedAdjust"/>
		<a name="put_SpeedAdjust"/>
		<font size="+1">
			<b>CMdmObj::put_SpeedAdjust</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_SpeedAdjust(BOOL newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the SpeedAdjust settings for modem object</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>newVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 to set SpeedAdjust, 0 to reset it</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_SpeedAdjust">CMdmObj::get_SpeedAdjust</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.SpeedAdjust 1 'setting SpeedAdjust ON
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::put_VoicePhoneNum"/>
		<a name="put_VoicePhoneNum"/>
		<font size="+1">
			<b>CMdmObj::put_VoicePhoneNum</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::put_VoicePhoneNum(BSTR newVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property sets the voice phone number to be used for voice tests</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">BSTR to set the voice phone number</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::get_VoicePhoneNum">CMdmObj::get_VoicePhoneNum</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.VoicePhoneNum "3242321"
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::ReceiveATResponse"/>
		<a name="ReceiveATResponse"/>
		<font size="+1">
			<b>CMdmObj::ReceiveATResponse</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::ReceiveATResponse(BSTR *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method returns response of the AT Command sent to the modem in PassThrough mode.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Response of the AT-Command sent to the modem</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::MakePassThroughCall">CMdmObj::MakePassThroughCall</a>
		<a href="#CMdmObj::SendATCommand">CMdmObj::SendATCommand</a>
		<a href="#CMdmObj::DisconnectATMode">CMdmObj::DisconnectATMode</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>strResponse = oModem.ReceiveATResponse
.</pre></code></div>
		<br/>
		<br/>
		<a name="CMdmObj::SendATCommand"/>
		<a name="SendATCommand"/>
		<font size="+1">
			<b>CMdmObj::SendATCommand</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CMdmObj::SendATCommand(BSTR bstrCommand)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method sends AT command specified by string bstrCommand to the modem. The method MakePassThroughCall
has to be used to put the modem into PassThrough mode</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrCommand</i></font></td>
				<td valign="top"><font size="2" color="#000000">AT-Command to be sent to modem e.g. AT+GCI?</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CMdmObj::MakePassThroughCall">CMdmObj::MakePassThroughCall</a>
		<a href="#CMdmObj::ReceiveATResponse">CMdmObj::ReceiveATResponse</a>
		<a href="#CMdmObj::DisconnectATMode">CMdmObj::DisconnectATMode</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oModem.SendATCommand "AT+GCI?"  'command to find current country selected by modem
.</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::AddParty"/>
		<a name="AddParty"/>
		<font size="+1">
			<b>COpen::AddParty</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::AddParty(VARIANT *pvNetPrefix, VARIANT *pvNetAddr, UCHAR ucSapValue, IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function adds a leaf to a party call. This function is specific to CoNdis miniports</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetPrefix</i></font></td>
				<td valign="top"><font size="2" color="#000000">13 byte switch address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">6 byte adapter address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucSapValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 byte selector address based on SAP used for connection</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value  of Interface Pointer for Party Call to be used to drop party call</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::MakePartyCall">COpen::MakePartyCall</a>
		<a href="#COpen::DropParty">COpen::DropParty</a>
		<a href="#COpen::ClosePartyCall">COpen::ClosePartyCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set Party_Two = VC_Ptr.AddParty(NetPrefixOne, NetAddrOne, SapValue)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::AddSA"/>
		<a name="AddSA"/>
		<font size="+1">
			<b>COpen::AddSA</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::AddSA(IDispatch *pvIpSecSAObj, VARIANT *pvRetHandle, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command adds a Security Association onto an IPSec Offload capable NIC</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvIpSecSAObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The IPSec SA to offload onto the NIC</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvRetHandle</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns a handle to the SA in this variable</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if function succeeds, else false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::DeleteSA">COpen::DeleteSA</a>
		<a href="#CBase::CreateIPSecSAObj">CBase::CreateIPSecSAObj</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.AddSA (IPSecSA, hSAObj)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::AddWakePattern"/>
		<a name="AddWakePattern"/>
		<font size="+1">
			<b>COpen::AddWakePattern</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::AddWakePattern(SAFEARRAY *saArg, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command registers a wake pattern with the NIC. When a packet with that pattern
hits the NIC, the adapter will bring the machine out of standby state</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>saArg</i></font></td>
				<td valign="top"><font size="2" color="#000000">List of args from which pattern is constructed</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">True on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::RemoveWakePattern">COpen::RemoveWakePattern</a>
		<a href="#COpen::SetWakeupType">COpen::SetWakeupType</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>' The number of arguments must be even. The even number argument is the offset
' in the pattern and the odd argument is the pattern data to use
bResult = ClientOpen.AddWakePattern(0, &amp;H12345&amp;, 4, &amp;H6789A&amp;, 8, &amp;HBCDEF&amp;)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::AfCloseSap"/>
		<a name="AfCloseSap"/>
		<font size="+1">
			<b>COpen::AfCloseSap</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::AfCloseSap()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function shuts down a SAP on an address family.This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AfOpenSap">COpen::AfOpenSap</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set SapPointer = OpenOne.AfOpenSap(SAP_CONST_VAL)
.
.
SapPointer.AfCloseSap()
.
.</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::AfCreateVc"/>
		<a name="AfCreateVc"/>
		<font size="+1">
			<b>COpen::AfCreateVc</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::AfCreateVc(IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function causes ndistest protocol (client) to request the creation of a VC.This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return value of Interface pointer for VC to be used by script while making calls, sending/receiving data, closing VC</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AfDeleteVc">COpen::AfDeleteVc</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set VCPointer = OpenOne.AfCreateVc()
.
.
VCPointer.CoSend(PacketSize,PacketsPerBurst, BurstsToSend, FALSE)
.
.</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::AfDeleteVc"/>
		<a name="AfDeleteVc"/>
		<font size="+1">
			<b>COpen::AfDeleteVc</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::AfDeleteVc()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function closes a VC on an address family. This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AfCreateVc">COpen::AfCreateVc</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set VCPointer = OpenOne.AfCreateVc()
.
.
VCPointer.AfDeleteVc()
.
.</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::AfOpenSap"/>
		<a name="AfOpenSap"/>
		<font size="+1">
			<b>COpen::AfOpenSap</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::AfOpenSap(ULONG ulSapValue, IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function enables ndistest protocol client to register a SAP (service access point) on which it will accept incoming calls from 
remote node. This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulSapValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">Selector for this SAP</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return value of Interface pointer for SAP to be used by script while making calls, sending/receiving data, closing SAP</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AfCloseSap">COpen::AfCloseSap</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set SapPointer = OpenOne.AfOpenSap(SAP_CONST_VAL)
.
.
SapPointer.StartReceive
.
.</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::Cleanup"/>
		<a name="Cleanup"/>
		<font size="+1">
			<b>COpen::Cleanup</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">void COpen::Cleanup()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function provides a convenient way to close all opens.  
This is called internally when scripts end.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
VOID
<br/>
		<br/>
		<br/>
		<br/>
		<a name="COpen::CloseAddressFamily"/>
		<a name="CloseAddressFamily"/>
		<font size="+1">
			<b>COpen::CloseAddressFamily</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::CloseAddressFamily()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function releases the association between the ndistest driver and the call manager. 
This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::OpenAddressFamily">COpen::OpenAddressFamily</a>
		<br/>
		<br/>
		<br/>
		<a name="COpen::CloseCall"/>
		<a name="CloseCall"/>
		<font size="+1">
			<b>COpen::CloseCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::CloseCall()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function shuts down a call on VC. This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::MakeCall">COpen::MakeCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set VC_Array(0) = OpenOne.AfCreateVc()
bResult = VC_Array(0).MakeCall(NetPrefixOne, NetAddrOne, 135, SendFlowSpec, RecvFlowSpec)
VC_Array(0).CloseCall()</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::ClosePartyCall"/>
		<a name="ClosePartyCall"/>
		<font size="+1">
			<b>COpen::ClosePartyCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::ClosePartyCall()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function shuts down a party call on VC. This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::MakePartyCall">COpen::MakePartyCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set Party_One = VC_Ptr.MakePartyCall(NetPrefix, NetAddr, SapValue, SendFlowSpec)
Party_One.ClosePartyCall()</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::CoSend"/>
		<a name="CoSend"/>
		<font size="+1">
			<b>COpen::CoSend</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::CoSend(LONG PacketSize, LONG BurstSize, LONG NumOfBursts, VARIANT_BOOL bResend, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function tells the CoNdis miniport driver to start sending packets on specified VC.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>PacketSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Size of packet</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>BurstSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Packets per burst</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>NumberOfBursts</i></font></td>
				<td valign="top"><font size="2" color="#000000">Number of Bursts</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bResent</i></font></td>
				<td valign="top"><font size="2" color="#000000">True if packets need to be resent, False otherwise.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = VC_Ptr.CoSend(PacketSize, PacketsPerBurst, BurstsToSend, FALSE)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::DeleteSA"/>
		<a name="DeleteSA"/>
		<font size="+1">
			<b>COpen::DeleteSA</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::DeleteSA(VARIANT *pvHandle, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command deletes a Security Association from an IPSec Offload capable NIC</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvHandle</i></font></td>
				<td valign="top"><font size="2" color="#000000">Handle to the IPSecSA to delete</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if function succeeds, else false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AddSA">COpen::AddSA</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.AddSA (IPSecSA, hSAObj)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::DropParty"/>
		<a name="DropParty"/>
		<font size="+1">
			<b>COpen::DropParty</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::DropParty()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function drops a leaf to a party call. This function is specific to CoNdis miniports</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AddParty">COpen::AddParty</a>
		<a href="#COpen::MakePartyCall">COpen::MakePartyCall</a>
		<a href="#COpen::ClosePartyCall">COpen::ClosePartyCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set Party_Two = VC_Ptr.AddParty(NetPrefixOne, NetAddrOne, SapValue)
Party_Two.DropParty()</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::EndWaitForEvent"/>
		<a name="EndWaitForEvent"/>
		<font size="+1">
			<b>COpen::EndWaitForEvent</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::EndWaitForEvent(ULONG ulTimeOut, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command works with StartWaitForEvent. This will return when the timeout expires or the 
event occurs.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulTimeOut</i></font></td>
				<td valign="top"><font size="2" color="#000000">timeout in seconds</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">True for success</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::StartWaitForEvent">COpen::StartWaitForEvent</a>
		<br/>
		<br/>
		<br/>
		<a name="COpen::Get1394NodeId"/>
		<a name="Get1394NodeId"/>
		<font size="+1">
			<b>COpen::Get1394NodeId</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::Get1394NodeId(VARIANT *pvVCInfo, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function gets the local 1394 node's Unique Id in the vcinfo structure using OID_1394_LOCAL_NODE_INFO</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvVCInfo</i></font></td>
				<td valign="top"><font size="2" color="#000000">Structure returned that holds Unique ID in vcinfo</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if succesful else return false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::VCInfo">COpen::VCInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oCardOpen.Get1394NodeId(vVCInfo)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::Get1394VCInfo"/>
		<a name="Get1394VCInfo"/>
		<font size="+1">
			<b>COpen::Get1394VCInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::Get1394VCInfo(VARIANT *pvVCInfo, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function gets the address for a VC in the vcinfo structure using OID_1394_VC_INFO</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvVCInfo</i></font></td>
				<td valign="top"><font size="2" color="#000000">Structure returned that holds vcinfo for a given VC</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if succesful else return false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::VCInfo">COpen::VCInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>VCPtr.Get1394VCInfo(vVCInfo)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetAtmAddress"/>
		<a name="GetAtmAddress"/>
		<font size="+1">
			<b>COpen::GetAtmAddress</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetAtmAddress(ULONG ulSlotNum, VARIANT *pvNetPrefix, VARIANT *pvNetAddr, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function gets ATM address for ATM adapter. This function is specific to ATM adapters.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulSlotNum</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies which address to get (0-based)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetPrefix</i></font></td>
				<td valign="top"><font size="2" color="#000000">Parameter to store switch address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">Parameter to store adapter address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::GetNumAtmAddresses">COpen::GetNumAtmAddresses</a>
		<a href="#COpen::UpdateAtmAddress">COpen::UpdateAtmAddress</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>NetPrefixOne = NetPrefix(&amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;)
NetAddrOne   = NetAddr(&amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;)
bResult = OpenOne.GetAtmAddress(0, NetPrefixOne, NetAddrOne)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetAtmUniVersion"/>
		<a name="GetAtmUniVersion"/>
		<font size="+1">
			<b>COpen::GetAtmUniVersion</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetAtmUniVersion(LONG *plAtmUniVersion)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function gets the version of the ATM UNI Signalling protocol supported. This function is
specific to ATM adapters.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>plAtmUniVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Parameter to hold the return value of ATM-UNI signalling version</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<br/>
		<a name="COpen::GetEvents"/>
		<a name="GetEvents"/>
		<font size="+1">
			<b>COpen::GetEvents</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetEvents(VARIANT *pvResets, VARIANT *pvDisconnects, VARIANT *pvConnects, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command the number of certain events that have occured on this open.  Many of these are the
result of the protocol driver's StatusHandler being called.  The number of resets, disconnects,
and connects are returned to the script for special processing if needed.
This will keep track of the following events:
   ulTotalEvents;             // total count from fields below
   ulCompleteOpen;            // ProtocolOpenComplete calls
   ulCompleteClose;           // ProtocolCloseComplete calls
   ulCompleteSend;            // ProtocolSendComplete calls
   ulCompleteTransfer;        // ProtocolTransferComplete calls
   ulCompleteReset;           // ProtocolResetComplete calls
   ulCompleteRequest;         // ProtocolRequestComplete calls
   ulIndicateReceive;         // ProtocolIndicateReceive calls
   ulIndicateStatus;          // ProtocolIndicateStatus calls
   ulIndicateStatusComplete;  // ProtocolIndicateStatusComplete calls
   ulMediaConnect;            // ProtocolIndicateStatus calls with Status = NDIS_STATUS_MEDIA_CONNECT
   ulMediaDisConnect;         // ProtocolIndicateStatus calls with Status = NDIS_STATUS_MEDIA_DISCONNECT
   ulResetStart;              // ProtocolIndicateStatus calls with Status = NDIS_STATUS_RESET_START 
   ulResetEnd;                // ProtocolIndicateStatus calls with Status = NDIS_STATUS_RESET_END 
   ulMultipleResetStart;      // Multiple ProtocolIndicateStatus calls with Status = NDIS_STATUS_RESET_START 
   ulMultipleResetEnd;        // Multiple ProtocolIndicateStatus calls with Status = NDIS_STATUS_RESET_END 
   ulBreakpointsHit;          // number of times breakpoint situations hit</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvResets</i></font></td>
				<td valign="top"><font size="2" color="#000000">(optional) Number resets that occured</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvDisconnects</i></font></td>
				<td valign="top"><font size="2" color="#000000">(optional) Number of disconnects that occured</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvConnects</i></font></td>
				<td valign="top"><font size="2" color="#000000">(optional) Number of connects that occured</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">True for success</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Resets = 0
Disconnects = 0
Connects = 0

oLog.Variation("GetEvents for instance 1")
bResult = OpenOne.GetEvents(Resets, Disconnects, Connects)
If(Not bResult) Then
   Call oLog.Write("Get events failed on first open instance" )
End If
If (Resets &lt;&gt; lNumResets) Then
   call oLog.Failed ("Incorrect number of reset events " &amp; Resets &amp; ". Should have been " &amp; lNumResets , 88888)
End If      

If ((Disconnects &lt;&gt; 0) And (Disconnects &lt;&gt; lNumResets)) Then
   call oLog.Failed ("Incorrect number of disconnect events " &amp; Disconnects &amp; ". Should have been 0 or " &amp; lNumResets , 88888)
End If

If ((Connects &lt;&gt; 0) And (Connects &lt;&gt; lNumResets)) Then
   call oLog.Failed ("Incorrect number of connect events " &amp; Connects &amp; ". Should have been 0 or " &amp; lNumResets , 88888)
End If

If (Connects &lt;&gt; Disconnects) Then
   call oLog.Failed ("Disconnect events " &amp; Disconnects &amp; " should equal connect events " &amp; Connects , 88888)
End If</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetIPCaptureResults"/>
		<a name="GetIPCaptureResults"/>
		<font size="+1">
			<b>COpen::GetIPCaptureResults</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetIPCaptureResults(VARIANT *pvlPacketCount, VARIANT *pvlTotalSize, VARIANT *pvlCksumPassed, VARIANT *pvlCksumFailed, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command collects the results obtained during the IP capture.  It stops the IP capture.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvlPacketCount</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns the number of Packets received on this open since
							the last SetIpCapture call</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvlTotalSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns the number of bytes received on this open since
							the last SetIpCapture call</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvlCksumPassed</i></font></td>
				<td valign="top"><font size="2" color="#000000">Type of checksum that passed if any (TCP_CKSUM or IP_CKSUM)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvlCksumFailed</i></font></td>
				<td valign="top"><font size="2" color="#000000">Type of checksum that failed if any (TCP_CKSUM or IP_CKSUM)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns True of function success else failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::SendIP">COpen::SendIP</a>
		<a href="#COpen::StartIpCapture">COpen::StartIpCapture</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.GetIPCaptureResults (lPacketsReceived, lBytesReceived, lCksumPassed, lCksumFailed)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetNumAtmAddresses"/>
		<a name="GetNumAtmAddresses"/>
		<font size="+1">
			<b>COpen::GetNumAtmAddresses</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetNumAtmAddresses(LONG *plNumAtmAddresses)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function queries the number of addresses the adapter is registered to receive packets.
This function is specific to ATM adapters.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>plNumAtmAddresses</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return value for Number of ATM Addresses that Adapter holds</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>NumOfAtmAddr = OpenOne.GetNumAtmAddresses()</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetOffloadPktInfo"/>
		<a name="GetOffloadPktInfo"/>
		<font size="+1">
			<b>COpen::GetOffloadPktInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetOffloadPktInfo(LONG lOffloadBitMask, VARIANT *pvlCksumPassedORBytesToExpect, VARIANT *pvlCksumFailedORPacketsToExpect, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function retreives the Task Offload Per Packet Information for packets 
received on this Open instance</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lOffloadBitMask</i></font></td>
				<td valign="top"><font size="2" color="#000000">Defines the offload task for this packet.
										Example CKSUM_OFFLOAD_TX or MSS_RX</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvlCksumPassedORBytesToExpect</i></font></td>
				<td valign="top"><font size="2" color="#000000">Will return the number of packets received
										that passed checksum for checksum offload or
										bytes received for Largesend offload</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvlCksumFailedORPacketsToExpect</i></font></td>
				<td valign="top"><font size="2" color="#000000">Will return the number of packets received
										that failed checksum for checksum offload or
										packets received for Largesend offload</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns success or failure in this variable</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::SetOffloadPktInfo">COpen::SetOffloadPktInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.GetOffloadPktInfo (MSS_RX, lBytesToExpect, lPacketsToExpect)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetPerformanceResults"/>
		<a name="GetPerformanceResults"/>
		<font size="+1">
			<b>COpen::GetPerformanceResults</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetPerformanceResults(
    VARIANT *pvDuration, 
    VARIANT *pvBytesSent, 
    VARIANT *pvBytesReceived,
    VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command gets the results of the previous performance tests. It is expected
to be called after waitperformance command.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvDuration</i></font></td>
				<td valign="top"><font size="2" color="#000000">Time duration in which performance test completed</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvBytesSent</i></font></td>
				<td valign="top"><font size="2" color="#000000">Bytes sent during the performance test</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvBytesReceived</i></font></td>
				<td valign="top"><font size="2" color="#000000">Bytes received during the performance test</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">If command succeeds set to TRUE, FALSE otherwise</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::StartPerformance">COpen::StartPerformance</a>
		<a href="#COpen::WaitPerformance">COpen::WaitPerformance</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = OpenOne.GetPerformanceResults(lDuration, lBytesSent, lBytesReceived)
If (Not bResult) Then
    call oLog.Failed ("Unable to get performance results.", 88888)
End If</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetReceiveResults"/>
		<a name="GetReceiveResults"/>
		<font size="+1">
			<b>COpen::GetReceiveResults</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetReceiveResults(VARIANT *pvPacketsReceived, VARIANT *pvPacketsResent, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function gets the results of the last receive collection.
It is expected to be called after stopreceive</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvPacketsReceived</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns total number of packets received in this variable</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvPacketsResent</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns total number of packets resent in this var</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.GetReceiveResults (lPacketsSent, lPacketsResent)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetSendResults"/>
		<a name="GetSendResults"/>
		<font size="+1">
			<b>COpen::GetSendResults</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetSendResults(VARIANT *pvPacketsSent, ULONG ulSendFailureType, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command returns the results that were generated when the send or sendpackets command completed.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvPacketsSent</i></font></td>
				<td valign="top"><font size="2" color="#000000">returns the number of packets sent.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulSendFailureType</i></font></td>
				<td valign="top"><font size="2" color="#000000">This is either - 
                        SEND_FAILURES_FORBIDDEN - send failures generate a variation failure in the log
                        SEND_FAILURES_ALLOWED - send failures are ignored
                        SEND_FAILURES_REQUIRED - sends cannot complete successfully
                        (this parameter is optional, SEND_FAILURES_FORBIDDEN is assumed)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::Send">COpen::Send</a>
		<a href="#COpen::SendPackets">COpen::SendPackets</a>
		<a href="#COpen::SendIP">COpen::SendIP</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = OpenOne.GetSendResults(lPacketsSent)

If(bResult) Then
   oLog.Write("Packets Sent = " &amp; lPacketsSent &amp; vblf)          
   If (lPacketsSent &lt;&gt; lTotalPackets) Then
      call oLog.Failed("Should have sent " &amp; lTotalPackets &amp; " packets" &amp; vblf,88888)
   End If
End If</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::GetStressResults"/>
		<a name="GetStressResults"/>
		<font size="+1">
			<b>COpen::GetStressResults</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::GetStressResults(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command gets the test results of a completed stress test.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">True if successful</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::StartStress">COpen::StartStress</a>
		<a href="#COpen::WaitStress">COpen::WaitStress</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/></pre></code></div>
		<br/>
		<br/>
		<a name="COpen::IpSecClose"/>
		<a name="IpSecClose"/>
		<font size="+1">
			<b>COpen::IpSecClose</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::IpSecClose(VARIANT *pvHandle, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Use this command to close an IP Sec connection that was established using COpen::IPSecOpen</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvHandle</i></font></td>
				<td valign="top"><font size="2" color="#000000">Handle to the IP Sec Connection to close</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return true on success or false on failure to caller</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::IpSecOpen">COpen::IpSecOpen</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.IpSecClose (hIpSecConnection)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::IpSecOpen"/>
		<a name="IpSecOpen"/>
		<font size="+1">
			<b>COpen::IpSecOpen</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::IpSecOpen(VARIANT *pvRetHandle, VARIANT *pvSAArray, VARIANT *pvSAArrayOrNumOfTunnelSAs, LONG NumOfTunnelSAs, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sets up a bidirectional IPSec connection b/w two IPSec capable NICs.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvRetHandle</i></font></td>
				<td valign="top"><font size="2" color="#000000">Handle to the IP Sec Connection established</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvSAArray</i></font></td>
				<td valign="top"><font size="2" color="#000000">Array of SA's (can be tunnel or transport SA's)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvSAArrayOrNumOfTunnelSAs</i></font></td>
				<td valign="top"><font size="2" color="#000000">Optional! Array of Tunnel SA's or Num of Tunnel SA's</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>NumOfTunnelSAs</i></font></td>
				<td valign="top"><font size="2" color="#000000">Optional! Number of Tunnel SA's</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if function succeeds else false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::IpSecClose">COpen::IpSecClose</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>' In this example, TransportSAs and TunnelsSAs are 
' arrays of size two (on SA each for inbound and 
' outbound traffic over a connection)

' Example of Transport SA connection
bResult = ClientOpen.IpSecOpen(hLocal, TransportSAs)
         OR
' Example of Transport SA connection
bResult = ClientOpen.IpSecOpen(hLocal, TunnelSAs, 2)
         OR
'Example of both Tranport and Tunnel SA connection
bResult = ClientOpen.IpSecOpen(hLocal, TransportSAs, TunnelsSAs, 2)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::MakeCall"/>
		<a name="MakeCall"/>
		<font size="+1">
			<b>COpen::MakeCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::MakeCall(VARIANT *pvNetPrefix, VARIANT *pvNetAddr, UCHAR ucSapValue, IDispatch *pvSendFlowSpec, IDispatch *pvRecvFlowSpec, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function requests Call Manager to make a connection on behalf of Ndistest Protocol Client.
This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetPrefix</i></font></td>
				<td valign="top"><font size="2" color="#000000">13 byte switch address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">6 byte adapter address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucSapValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 byte selector address based on SAP used for connection</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvSendFlowSpec</i></font></td>
				<td valign="top"><font size="2" color="#000000">Transmit Flow Specification for QOS</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvRecvFlowSpec</i></font></td>
				<td valign="top"><font size="2" color="#000000">Receive Flow Specification for QOS</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::CloseCall">COpen::CloseCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set VC_Array(0) = OpenOne.AfCreateVc()
bResult = VC_Array(0).MakeCall(NetPrefixOne, NetAddrOne, 135, SendFlowSpec, RecvFlowSpec)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::MakeCall_1394"/>
		<a name="MakeCall_1394"/>
		<font size="+1">
			<b>COpen::MakeCall_1394</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::MakeCall_1394(VARIANT *pvDestVC, ULONG ulCoMediaFlags, IDispatch *pvTxFlowSpec, IDispatch *pvRxFlowSpec, ULONG ulMtu, ULONG ulMediaParamsFlags, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function requests call manager to make a call using 1394 VCs.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvDestVC</i></font></td>
				<td valign="top"><font size="2" color="#000000">Destination VC stored as NIC1394_DESTINATION structure</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulCoMediaFlags</i></font></td>
				<td valign="top"><font size="2" color="#000000">Media Flags for CoNdis medium</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvTxFlowSpec</i></font></td>
				<td valign="top"><font size="2" color="#000000">Transmit Flow Specification for QOS</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvRxFlowSpec</i></font></td>
				<td valign="top"><font size="2" color="#000000">Receive Flow Specification for QOS</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulMtu</i></font></td>
				<td valign="top"><font size="2" color="#000000">(optional) otherwise uses largest possible</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulMediaParamsFlags</i></font></td>
				<td valign="top"><font size="2" color="#000000">(optional) otherwise uses 0, used for channel acquire option</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if succesful else return false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oLocalSendVC.MakeCall_1394(vLocalSendVCInfo, lCoMediaFlagsSend, oSendFlowSpec, oRecvFlowSpec)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::MakePartyCall"/>
		<a name="MakePartyCall"/>
		<font size="+1">
			<b>COpen::MakePartyCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::MakePartyCall(VARIANT *pvNetPrefix, VARIANT *pvNetAddr, UCHAR ucSapValue, IDispatch *pvSendFlowSpec, IDispatch **ppDisp)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function requests the call manager to make the first connection of a party call.
This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetPrefix</i></font></td>
				<td valign="top"><font size="2" color="#000000">13 byte switch address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">6 byte adapter address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucSapValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">1 byte selector address based on SAP used for connection</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvSendFlowSpec</i></font></td>
				<td valign="top"><font size="2" color="#000000">Transmit Flow Specification for QOS</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ppDisp</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value  of Interface Pointer for Party Call to be used to add/drop party or close party call</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AddParty">COpen::AddParty</a>
		<a href="#COpen::DropParty">COpen::DropParty</a>
		<a href="#COpen::ClosePartyCall">COpen::ClosePartyCall</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set Party_One = VC_Ptr.MakePartyCall(NetPrefix, NetAddr, SapValue, SendFlowSpec)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::NdisClose"/>
		<a name="NdisClose"/>
		<font size="+1">
			<b>COpen::NdisClose</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::NdisClose(VARIANT_BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command unbinds ndistest.sys from the miniport. 
This is always done for each NdisOpen call.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::NdisOpen">COpen::NdisOpen</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.NdisClose ()</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::NdisOpen"/>
		<a name="NdisOpen"/>
		<font size="+1">
			<b>COpen::NdisOpen</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::NdisOpen(ULONG NdisMedium, BOOLEAN bForceNdis30, VARIANT_BOOL *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000"></font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>NdisMedium</i></font></td>
				<td valign="top"><font size="2" color="#000000">This is the NdisMedium of the device i.e. NdisMedium802_3, NdisMediumATM, NdisMedium802_3.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bForceNdis30</i></font></td>
				<td valign="top"><font size="2" color="#000000">This is a boolean which determines whether the ndistest.sys protocol will bind to ndis.sys as 
					version 3.0 (ReceiveHandler) or 4.0 (ReceivePacketHandler).</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::NdisClose">COpen::NdisClose</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.NdisOpen (NDISMEDIUM802_3, False)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::NdisRequest"/>
		<a name="NdisRequest"/>
		<font size="+1">
			<b>COpen::NdisRequest</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::NdisRequest(
    ULONG ulOidCode, 
    VARIANT *pvBuffer, 
    ULONG ulInformationBufferLength, 
    ULONG ulRequestType, 
    VARIANT *pvBytesWritten, 
    VARIANT *pvBytesNeeded, 
    VARIANT *pvNdisStatus, 
    VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function queries or sets oids from script.  The parameters are passed to the protocol driver
which calls NdisRequest.  The responses are passed back to the script in the cooresponding values.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulOidCode</i></font></td>
				<td valign="top"><font size="2" color="#000000">Oid to query or set</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvBuffer</i></font></td>
				<td valign="top"><font size="2" color="#000000">input and output buffer</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulInformationBufferLength</i></font></td>
				<td valign="top"><font size="2" color="#000000">length of buffer</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulRequestType</i></font></td>
				<td valign="top"><font size="2" color="#000000">query or set</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvBytesWritten</i></font></td>
				<td valign="top"><font size="2" color="#000000">bytes written, taken from response of NdisRequest call</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvBytesNeeded</i></font></td>
				<td valign="top"><font size="2" color="#000000">bytes needed, taken from response of NdisRequest call</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNdisStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">status, taken from response of NdisRequest call</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#Cbase::QueryGuidAll">Cbase::QueryGuidAll</a>
		<a href="#COpen::NdisRequest2">COpen::NdisRequest2</a>
		<a href="#CAdapter::QueryGuid">CAdapter::QueryGuid</a>
		<a href="#CAdapter::QueryInfo">CAdapter::QueryInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>'==========================================================================
'
' Sets the lookahead for the open instance, and returns the status
' returned by NDIS request
'
Function SetLookahead(oTestOpen, Lookahead)
   Dim BytesWritten, BytesNeeded, NdisStatus
   Dim tempLookahead
   
   BytesWritten = CLng(0)
   BytesNeeded = CLng(0)
   tempLookahead = Lookahead
   
   SetLookahead = oTestOpen.NdisRequest( _
      OID_GEN_CURRENT_LOOKAHEAD, _
      tempLookahead, _
      4, _
      REQUEST_SET_INFO, _
      BytesWritten, _
      BytesNeeded, _
      NdisStatus)

   oLog.Write("Setting OID_GEN_CURRENT_LOOKAHEAD to " &amp; Lookahead &amp; vblf)

   If (Not SetLookahead) Then
      Call oLog.Write("NdisRequest failed during OID_GEN_CURRENT_LOOKAHEAD" )
   ElseIf (NdisStatus &lt;&gt; 0) Then
      SetLookahead = FALSE
      oLog.Write("NdisRequest OID_GEN_CURRENT_LOOKAHEAD returned NdisStatus " &amp; hex(NdisStatus) &amp; vblf)
   End If
   
End Function</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::NdisRequest2"/>
		<a name="NdisRequest2"/>
		<font size="+1">
			<b>COpen::NdisRequest2</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::NdisRequest2(ULONG ulOidCode, IDispatch *pData, ULONG ulRequestType, VARIANT *pvNdisStatus, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command works just that same as NdisRequest(), it is used to set or query a specific OID.
The parameters to this call differ from NdisRequest() in that the data parameter is a structure 
Object. The structure object is used to wrap an internal structure and thus provide access to the 
Structures member through the object. The structure object can be created by calling 
CreateStructureObject() and passing a predefined string value that indicates the type of object to 
Create.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulOidCode</i></font></td>
				<td valign="top"><font size="2" color="#000000">OID that is being queried\set.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pData</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to an IDispatch that is a structure object.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulRequestType</i></font></td>
				<td valign="top"><font size="2" color="#000000">Value the specifies if this call should be a set or query.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNdisStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a script variable that will receive the NdisStatus after the 
                        call is completed.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a script variable that will receive a boolean value indicating
                        the success or failure of this call.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::NdisRequest">COpen::NdisRequest</a>
		<a href="#Cbase::get_CreateStructureObject">Cbase::get_CreateStructureObject</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>' 
' Create an Object that represents an Enumeration structure object
'
Set oEnum = oNDTCore.CreateStructureObject("ENUM") 
if(oEnum is nothing) then 
‘Handle Failure 
end if
oEnum.Value = nAuthenticationMode 
bRetval = m_oAdapterOpen.NdisRequest2(OID_802_11_AUTHENTICATION_MODE, oEnum, REQUEST_SET_INFO, nNdisStatus) 
if(bRetval = false) then 
‘Handle Failure 
end if</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::NdisReset"/>
		<a name="NdisReset"/>
		<font size="+1">
			<b>COpen::NdisReset</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::NdisReset()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command will cause the protocol driver to call NdisReset on the associated open.  Control
will not return until the reset completes</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oLog.Variation("Reset")
OpenOne.NdisReset()</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::OpenAddressFamily"/>
		<a name="OpenAddressFamily"/>
		<font size="+1">
			<b>COpen::OpenAddressFamily</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::OpenAddressFamily(
    ULONG ulFamily, 
    ULONG ulMajorVer, 
    ULONG ulMinorVer, 
    VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function establishes connection between the ndistest driver, miniport driver and call manager. It stores the AddressFamily
handle in the internal data structure. This function is specific to CoNdis miniports.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulFamily</i></font></td>
				<td valign="top"><font size="2" color="#000000">Address Family to be opened</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulMajorVer</i></font></td>
				<td valign="top"><font size="2" color="#000000">Major Version of NDIS_CLIENT_CHARACTERISTICS</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulMinorVer</i></font></td>
				<td valign="top"><font size="2" color="#000000">Minor Version of NDIS_CLIENT_CHARACTERISTICS</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::CloseAddressFamily">COpen::CloseAddressFamily</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = OpenOne.OpenAddressFamily(ADDRESS_FAMILY_Q2931, 3, 1)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::RemoveWakePattern"/>
		<a name="RemoveWakePattern"/>
		<font size="+1">
			<b>COpen::RemoveWakePattern</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::RemoveWakePattern(SAFEARRAY *saArg, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command deregisters a wake pattern with the NIC.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>saArg</i></font></td>
				<td valign="top"><font size="2" color="#000000">List of args from which pattern to be removed is constructed</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">True on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AddWakePattern">COpen::AddWakePattern</a>
		<a href="#COpen::SetWakeupType">COpen::SetWakeupType</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>' The number of arguments must be even. The even number argument is the offset
' in the pattern and the odd argument is the pattern data to use
bResult = ClientOpen.RemoveWakePattern(0, &amp;H12345&amp;, 4, &amp;H6789A&amp;, 8, &amp;HBCDEF&amp;)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::Reset1394Bus"/>
		<a name="Reset1394Bus"/>
		<font size="+1">
			<b>COpen::Reset1394Bus</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::Reset1394Bus(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function initiates a 1394 bus reset</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if succesful else return false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<br/>
		<a name="COpen::Send"/>
		<a name="Send"/>
		<font size="+1">
			<b>COpen::Send</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::Send(VARIANT *pvDestAddr, ULONG ulPacketSize, ULONG ulNumPackets, ULONG ulTestDuration, VARIANT *pvResendAddr, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to send packets over an Open.
This command can be used to send ulNumPackets number of packets OR
keep sending packets for ulTestDuration period of time OR
send until either ulNumPackets have been sent or ulTestDuration has been exceeded
This command calls NdisSend</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvDestAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">The destination MAC address of the packets in the test</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPacketSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Size of the packets to be sent</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulNumPackets</i></font></td>
				<td valign="top"><font size="2" color="#000000">If zero it means ignore this field and keep sending packets
						If non-zero, the field specifies the number of packets to send</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulTestDuration</i></font></td>
				<td valign="top"><font size="2" color="#000000">If zero, means ignore this field and keep sending
						When non-zero, this field specifies the amount of time in sec to keep
						sending the packets for</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvResendAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">When NULL it means no resend required
						else this is the address to resend packets to when received at pvDestAddr</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::SendPackets">COpen::SendPackets</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>' This is an example of sending 100 packets of 300 bytes
' each to the Support Card and requesting it be resent
' back to the ClientAddress when received
bResult = ClientOpen.Send(SupportAddr, 300, 100, 0, ClientAddress)

' This is an example of sending packets of 300 bytes
' each to the Support Card for 100 seconds. There is no
' resend address so no packets are resent by support card
' back to the ClientAddress when received
bResult = ClientOpen.Send(SupportAddr, 300, 0, 100, Null)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SendIP"/>
		<a name="SendIP"/>
		<font size="+1">
			<b>COpen::SendIP</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SendIP(VARIANT *pvDestAddr, UCHAR ucVersion, UCHAR ucType, ULONG ulPacketCount, ULONG ulPacketSize, UCHAR ucOptions, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to send IP Packets from this open instance handle</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvDestAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">The destination address (MAC) for the IP Packet</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Version of IP (V4 or V6)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucType</i></font></td>
				<td valign="top"><font size="2" color="#000000">Protocol Type (TCP, UDP etc)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPacketCount</i></font></td>
				<td valign="top"><font size="2" color="#000000">Number of packets to send</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPacketSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Size of each packet being sent</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucOptions</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specified TCP Options And/Or IP Options</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return true on success else failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::WaitSend">COpen::WaitSend</a>
		<a href="#COpen::GetSendResults">COpen::GetSendResults</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.SendIP(ServerAddress, V4, TCP, 50, 512, TCP_OPTIONS)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SendIPSec"/>
		<a name="SendIPSec"/>
		<font size="+1">
			<b>COpen::SendIPSec</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SendIPSec(VARIANT *pvDestAddr, VARIANT *pvHandle, UCHAR ucVersion, UCHAR ucType, ULONG ulPacketCount, ULONG ulPacketSize, ULONG ulOptions, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to exchange IP Sec traffic between two IP Sec Opens</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvDestAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">Associated MAC address of the Open to send to</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvHandle</i></font></td>
				<td valign="top"><font size="2" color="#000000">Handle to the senders IP Sec connection (obtained from IpSecOpen)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Version of IP (V4 or V6)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucType</i></font></td>
				<td valign="top"><font size="2" color="#000000">Protocol Type (TCP, UDP etc)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPacketCount</i></font></td>
				<td valign="top"><font size="2" color="#000000">Number of packets to send</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPacketSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Size of each packet being sent</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ucOptions</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specified TCP Options And/Or IP Options</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return true on success of function else failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::SendIP">COpen::SendIP</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.SendIPSec (DestAddress, hLocalIPSecConn, V4, UDP, 50, 512, IP_OPTION_ROUTERALERT)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SendPackets"/>
		<a name="SendPackets"/>
		<font size="+1">
			<b>COpen::SendPackets</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SendPackets(VARIANT *pvArrDestAddr, ULONG ulNumAddresses, ULONG ulPacketSize, ULONG ulNumPackets, ULONG ulTestDuration, VARIANT *pvResendAddr, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to send packets over an Open to multiple destination
This command can be used to send ulNumPackets number of packets OR
keep sending packets for ulTestDuration period of time OR
send until either ulNumPackets have been sent or ulTestDuration has been exceeded
This command calls NdisSendPackets</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvArrDestAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">The array of MAC addresses to send the packets to</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulNumAddresses</i></font></td>
				<td valign="top"><font size="2" color="#000000">The size of the array.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPacketSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Size of the packets to be sent</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulNumPackets</i></font></td>
				<td valign="top"><font size="2" color="#000000">If zero it means ignore this field and keep sending packets
						If non-zero, the field specifies the number of packets to send</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulTestDuration</i></font></td>
				<td valign="top"><font size="2" color="#000000">If zero, means ignore this field and keep sending
						When non-zero, this field specifies the amount of time in sec to keep
						sending the packets for</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvResendAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">When NULL it means no resend required
						else this is the address to resend packets to when received at pvDestAddr</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::Send">COpen::Send</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>' This is an example of sending 100 packets of 300 bytes to
' each of the 5 Support Addresses and requesting it be resent
' back to the ClientAddress when received
' Assume there are three open already created on support card(s)
' and stored in arrSuppOpen

Dim ArrSupportAddr (3)
ArrSupportAddr (0) = GetCardAddressWithOpen(arrSuppOpen(0), oLog, lMedium)
ArrSupportAddr (1) = GetCardAddressWithOpen(arrSuppOpen(1), oLog, lMedium)
ArrSupportAddr (2) = GetCardAddressWithOpen(arrSuppOpen(2), oLog, lMedium)
bResult = ClientOpen.Send(ArrSupportAddr, 3, 300, 100, 0, ClientAddress)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SetIPAddr"/>
		<a name="SetIPAddr"/>
		<font size="+1">
			<b>COpen::SetIPAddr</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SetIPAddr(BSTR bstrSrcIP, BSTR bstrDestIP, VARIANT *pvGWMacAddr, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function sets the IP-related attributes for a given adapter.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrSrcIP</i></font></td>
				<td valign="top"><font size="2" color="#000000">IP Address of a given adapter</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDestIP</i></font></td>
				<td valign="top"><font size="2" color="#000000">IP Address of the adapter destined to receive IP packets</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvGWMacAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">MAC Address of the adapter's default gateway</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if succesful else return false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CAdapter::GetIPGateway">CAdapter::GetIPGateway</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>TestIP = "10.10.10.1"
SuppIP = "10.10.10.2"
TestGWAddr = Array(CByte(0),CByte(1),CByte(2),CByte(3),CByte(4),CByte(5))
bResult = oTestOpen.SetIPAddr(TestIP, SuppIP, TestGWAddr)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SetIpDefaults"/>
		<a name="SetIpDefaults"/>
		<font size="+1">
			<b>COpen::SetIpDefaults</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SetIpDefaults(VARIANT *pvOffloadHdrORFlag, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sets the default values on the Open Instance to set the 
Encapsulation Type and Size or Self-Checksum-Computation flag</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvOffloadHdrORFlag</i></font></td>
				<td valign="top"><font size="2" color="#000000">Supplies encapsulation type and size or boolean flag
							for Self-Checksum-Computation for this Open instance</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if command succeeds, else false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.SetIPDefaults (CByte (0))	' Compute Self checksum
      Or
DefaultOffloadHdr (0) = ENCAPSULATION
DefaultOffloadHdr (1) = LLC_SNAP_ROUTED
bResult = ClientOpen.SetIPDefaults (DefaultOffloadHdr)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SetLocalId"/>
		<a name="SetLocalId"/>
		<font size="+1">
			<b>COpen::SetLocalId</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SetLocalId(ULONG ulIdValue)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sets the ID that must be in all received packets or they will be ignored. This will
allow multiple tests to coexist on the same network.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulIdValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">Id for this test</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::SetRemoteId">COpen::SetRemoteId</a>
		<a href="#COpen::SetLocalId">COpen::SetLocalId</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>arrSuppOpen(0).SetRemoteId(lTestId)
arrSuppOpen(0).SetLocalId(lTestId)
OpenTest.SetReceiveOption(RECEIVE_DEFAULT)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SetOffloadPktInfo"/>
		<a name="SetOffloadPktInfo"/>
		<font size="+1">
			<b>COpen::SetOffloadPktInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SetOffloadPktInfo(LONG lOffloadBitMask, LONG lCksumInfoORMss, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to set offload per-packet info for packets sent through this open</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lOffloadBitMask</i></font></td>
				<td valign="top"><font size="2" color="#000000">Defines the offload task for this packet. Example 
							CKSUM_OFFLOAD_TX or MSS_RX</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lCksumInfoORMss</i></font></td>
				<td valign="top"><font size="2" color="#000000">Provides details for the selected offload task. Example
							V4_CKSUM or the MSS size</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns success or failure in this variable</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::SetOffloadTask">COpen::SetOffloadTask</a>
		<a href="#COpen::GetOffloadPktInfo">COpen::GetOffloadPktInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>lMss = 5120
bResult = OpenOne.SetOffloadPktInfo (MSS_TX, lMss)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SetOffloadTask"/>
		<a name="SetOffloadTask"/>
		<font size="+1">
			<b>COpen::SetOffloadTask</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SetOffloadTask(VARIANT *pvpulOffloadHdrInfo, VARIANT *pvTask1, VARIANT *pvTask2, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to offload a task onto an offload capable NIC. The Offload Header
info has to be passed in separately as well. The function can take upto two tasks to
offload (example: offload both largesend and checksum tasks and test).</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvpulOffloadHdrInfo</i></font></td>
				<td valign="top"><font size="2" color="#000000">Information about Offload Header! Can be array or
								a long depending on how much header info is needed</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvTask1</i></font></td>
				<td valign="top"><font size="2" color="#000000">Optional! A task to offload</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvTask2</i></font></td>
				<td valign="top"><font size="2" color="#000000">Optional! Another task to offload</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns success (True) or failure (False) in this var</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CBase::CreateTcpIpChecksumObj">CBase::CreateTcpIpChecksumObj</a>
		<a href="#CBase::CreateTcpIpLargeSendObj">CBase::CreateTcpIpLargeSendObj</a>
		<a href="#COpen::SetOffloadPktInfo">COpen::SetOffloadPktInfo</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.SetOffloadTask(0, CksumOffloadTask, LargeSendOffloadTask)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SetReceiveOption"/>
		<a name="SetReceiveOption"/>
		<font size="+1">
			<b>COpen::SetReceiveOption</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SetReceiveOption(ULONG ulReceiveOption)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sends a message to the ndistest.sys protocol to set 
the mode it's packet receive handler will run in.
Following are the values for ulReceiveOption
      RECEIVE_DEFAULT          - normal receive, analyze immediately
      RECEIVE_NOCOPY           - same as RECEIVE_DEFAULT
      RECEIVE_LOOKAHEAD        - same as RECEIVE_DEFAULT but also checks lookahead size
      RECEIVE_TRANSFER         - calls NdisTransferData to get the rest of the packet (used by ProtocolReceiveHandler)
      RECEIVE_PARTIAL_TRANSFER - same as RECEIVE_TRANSFER but transfers random lengths
      RECEIVE_PACKETIGNORE     - returns received packets immediately
      RECEIVE_LOCCOPY          - queue the packet to return in 50 milliseconds
      RECEIVE_QUEUE            - very similiar to LOCOPY
      RECEIVE_DOUBLE_QUEUE     - packet is returned in 100 milliseconds
      RECEIVE_TRIPLE_QUEUE     - packet is returned in 150 milliseconds
      DEADLOCK_REPRO_FLAG      - special case to to catch a deadlock
      RECEIVE_ALLOW_BUSY_NET   - will not require a private network</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulReceiveOption</i></font></td>
				<td valign="top"><font size="2" color="#000000">See above for the desired receive mode that the ndistest.sys protocol should use.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>ClientOpen.SetReceiveOption (RECEIVE_DEFAULT Or RECEIVE_TRANSFER)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SetRemoteId"/>
		<a name="SetRemoteId"/>
		<font size="+1">
			<b>COpen::SetRemoteId</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SetRemoteId(ULONG ulIdValue)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sets the ID that will be inserted in all sent packets. This will allow multiple 
tests to coexist on the same network.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulIdValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">Id for this test</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::SetLocalId">COpen::SetLocalId</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>arrSuppOpen(0).SetRemoteId(lTestId)
arrSuppOpen(0).SetLocalId(lTestId)
OpenTest.SetReceiveOption(RECEIVE_DEFAULT)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::SetWakeupType"/>
		<a name="SetWakeupType"/>
		<font size="+1">
			<b>COpen::SetWakeupType</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::SetWakeupType(ULONG ulWakeUpType, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to set the mecahnism to use to wake a machine from sleep state.
They can be Magic packet, Pattern match and link change events.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulWakeUpType</i></font></td>
				<td valign="top"><font size="2" color="#000000">The mechanism(s) that will wake this mahine</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::AddWakePattern">COpen::AddWakePattern</a>
		<a href="#COpen::RemoveWakePattern">COpen::RemoveWakePattern</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.SetWakeupType(WAKE_UP_PATTERN_MATCH)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::StartIpCapture"/>
		<a name="StartIpCapture"/>
		<font size="+1">
			<b>COpen::StartIpCapture</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::StartIpCapture(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Starts to capture any IP packets received on this Open</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if capture mode starts succesfully. Else false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::GetIpCaptureResults">COpen::GetIpCaptureResults</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.StartIpCapture()</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::StartIPSecCapture"/>
		<a name="StartIpSecCapture"/>
		<font size="+1">
			<b>COpen::StartIPSecCapture</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::StartIPSecCapture(VARIANT *pvHandle, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Starts to capture any IP Sec packets received on this Open</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvHandle</i></font></td>
				<td valign="top"><font size="2" color="#000000">Handle to the Open IP Sec Connection</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if succesful else return false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.StartIpSecCapture()</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::StartPerformance"/>
		<a name="StartPerformance"/>
		<font size="+1">
			<b>COpen::StartPerformance</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::StartPerformance(
    VARIANT *pvOpen, 
    VARIANT *pvNetAddr, 
    ULONG ulMode, 
    ULONG ulPacketSize, 
    ULONG ulPktsPerBurst, 
    ULONG ulNumPackets, 
    ULONG ulTestDuration, 
    ULONG ulDelay,
    ULONG ulCancelPkts, 
    VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to start Performance test on Test adapter. As a part of performance test,
large number of packets are pre-allocated and sent/received simultaneously on test adapter.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVOpen</i></font></td>
				<td valign="top"><font size="2" color="#000000">Interface pointer for the Support Open Object</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">MAC Address where packets are send to</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulMode</i></font></td>
				<td valign="top"><font size="2" color="#000000">Mode of test : send mode, receive mode or both send and receive mode
                                without or without verifying receives</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPacketSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Size of the packet</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPktsPerBurst</i></font></td>
				<td valign="top"><font size="2" color="#000000">Packets sent during each burst</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulNumPackets</i></font></td>
				<td valign="top"><font size="2" color="#000000">Total Packets to be send for this iteration</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulTestDuration</i></font></td>
				<td valign="top"><font size="2" color="#000000">Time in seconds for the iteration to complete</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulDelay</i></font></td>
				<td valign="top"><font size="2" color="#000000">Delay in milliseconds between sends</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulCancelPkts</i></font></td>
				<td valign="top"><font size="2" color="#000000">Cancel packet sends during this command</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">If command succeeds set to TRUE, FALSE otherwise</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::GetPerformanceResults">COpen::GetPerformanceResults</a>
		<a href="#COpen::WaitPerformance">COpen::WaitPerformance</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Mode = PERFORM_RECEIVE + PERFORM_VERIFY_RECEIVES
bResult = OpenOne.StartPerformance(OpenTwo, TestAddr, Mode, lSize, lPktsPerBurst, 0, 30, 0, 0)
If (Not bResult) Then
    call oLog.Failed ("Unable to execute performance command.", 88888)
End If</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::StartReceive"/>
		<a name="StartReceive"/>
		<font size="+1">
			<b>COpen::StartReceive</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::StartReceive(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sends a message to the ndistest.sys protocol to begin receiving packets on this open.
Before this command is executed any packets that come in on the open are ignored.
This is matched with the StopReceive command.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::StopReceive">COpen::StopReceive</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.StartReceive</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::StartStress"/>
		<a name="StartStress"/>
		<font size="+1">
			<b>COpen::StartStress</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::StartStress(
    IDispatch *pOpen, 
    ULONG ulPacketSize, 
    ULONG ulOptionsMask, 
    ULONG ulIterations, 
    ULONG ulTestDuration, 
    VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">The stress test is on the main test commands in the NDIS Test.  It sends packets quickly using
many different buffer sizes and packet sizes.  The open that this is called on does the sending.
Control returns to the script as soon as the Stress test starts.  Test options are:
Packet Sizes
   FIXEDSIZE        determined by ulPacketSize
   RANDOMSIZE       from minimum to ulPacketSize
   STRESS_CYCLICAL  from minimum to ulPacketSize increasing by one
   STRESS_SMALLSIZE Small packets

Buffer Sizes (max 20 buffers)
   RAND     Random sizes
   SMALL    Lots of little buffers
   ZEROS    A number zero length buffers including at the end of chain
   ONES     A number buffers that are one byte long

Receive/Resend Options
   FULL_RESP Respond with a full length packet
   NO_RESP   Do not respond
   ACK       Respond with a small packet
   ACK_10    Respond with 10 small packets

Windowing keeps track of how many packets have not been ACKed.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pOpen</i></font></td>
				<td valign="top"><font size="2" color="#000000">This open receives the packets</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulPacketSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Size of packets or max packet size if size is variable</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulOptionsMask</i></font></td>
				<td valign="top"><font size="2" color="#000000">Test options - see above</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulIterations</i></font></td>
				<td valign="top"><font size="2" color="#000000">Number of packets or times through loop of packet sizes</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulTestDuration</i></font></td>
				<td valign="top"><font size="2" color="#000000">Time in seconds test will run (or until all packets have been sent)</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">True if successful</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::WaitStress">COpen::WaitStress</a>
		<a href="#COpen::GetStressResults">COpen::GetStressResults</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oLog.Variation("Stress Test - test adapter as client" &amp; vblf)

bResult = TestOpen.StartStress(SuppOpen, arrPacketSize(lCount), arrOptionMask(lCount), arrIterations(lCount), 0)
If (bResult) Then
   bResult = TestOpen.WaitStress()
   If (bResult) Then
       bResult = TestOpen.GetStressResults()
       If (Not bResult) Then
           Call oLog.Failed ("Unable to get stress results from the test adapter." , 88888)
       End If
   Else
       Call oLog.Failed ("Unable to WaitStress on the test adapter." , 88888)
   End If
Else
   Call oLog.Failed ("Unable to start stress on the test adapter." , 88888)
End If</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::StartWaitForEvent"/>
		<a name="StartWaitForEvent"/>
		<font size="+1">
			<b>COpen::StartWaitForEvent</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::StartWaitForEvent(VARIANT *pvEvent, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command will start a process waiting for an event.  Control is returned to the script which
later calls EndWaitForEvent.  The EndWaitForEvent will return when a timeout expires or the 
event occurs.  The following events can be waited on:
      NDIS_STATUS_RESET_START:
      NDIS_STATUS_RESET_END:
      NDIS_STATUS_MEDIA_CONNECT:
      NDIS_STATUS_MEDIA_DISCONNECT:
      NDIS_STATUS_WAN_LINE_UP:
      NDIS_STATUS_WAN_LINE_DOWN:
      NDIS_STATUS_HARDWARE_LINE_UP:
      NDIS_STATUS_HARDWARE_LINE_DOWN:
      NDIS_STATUS_INTERFACE_UP:
      NDIS_STATUS_INTERFACE_DOWN:</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvEvent</i></font></td>
				<td valign="top"><font size="2" color="#000000">Event to wait for</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">True for success</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::EndWaitForEvent">COpen::EndWaitForEvent</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oLog.Variation("Checking disconnection of card")
bResult = WorkOpen.StartWaitForEvent(NDIS_STATUS_MEDIA_DISCONNECT)
If (Not bResult) Then
   oLog.Write("StartWaitForEvent returned failure" &amp; vblf)
End If

WshShell.Popup "Disconnect test card from the network, then click OK.", PopupTimeout, "Media Disconnect Detection", vbSystemModal

bResult = WorkOpen.EndWaitForEvent(10)
If (bResult) Then
   oLog.Write("NDIS_STATUS_MEDIA_DISCONNECT indication received" &amp; vblf)
Else
   call oLog.Failed ("No disconnect indication received" , 88888)
End If</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::StopReceive"/>
		<a name="StopReceive"/>
		<font size="+1">
			<b>COpen::StopReceive</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::StopReceive(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sends a message to the ndistest.sys protocol to stop receiving packets on this open.
After this command is executed any packets that come in on the open are ignored.
This is matched with the StartReceive command.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::StartReceive">COpen::StartReceive</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.StopReceive</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::StopSend"/>
		<a name="StopSend"/>
		<font size="+1">
			<b>COpen::StopSend</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::StopSend(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to instruct a sending open to stop sending packets.
This command is usually used when an open has been asked to keep send packets
for a long duration of time and we need to stop the sends now.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::Send">COpen::Send</a>
		<a href="#COpen::SendPackets">COpen::SendPackets</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.Send</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::UpdateAtmAddress"/>
		<a name="UpdateAtmAddress"/>
		<font size="+1">
			<b>COpen::UpdateAtmAddress</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::UpdateAtmAddress(VARIANT *pvNetPrefix, VARIANT *pvNetAddr, LONG AddOrDelete, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function enables ndistest protocol client to receive/not receive on an 
alternate ATM address.  This function is specific to ATM adapters.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetPrefix</i></font></td>
				<td valign="top"><font size="2" color="#000000">Parameter to specify switch address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvNetAddr</i></font></td>
				<td valign="top"><font size="2" color="#000000">Parameter to specify adapter address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>AddOrDelete</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies whether to add or delete ATM Address</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return Value for Success(true) or Failure(false)</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::GetAtmAddress">COpen::GetAtmAddress</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>NewNetPrefix = NetPrefix(&amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H02&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;)
NewNetAddr   = NetAddr(&amp;H00&amp;, &amp;H00&amp;, &amp;H00&amp;, &amp;H03&amp;, &amp;H00&amp;, &amp;H00&amp;)

bResult = OpenOne.UpdateAtmAddress(NewNetPrefix, NewNetAddr, ADD)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::VCInfo"/>
		<a name="VCInfo"/>
		<font size="+1">
			<b>COpen::VCInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::VCInfo(VARIANT *pvVCInfo, ULONG ulAddressType, LONG lChannelNum, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function is used to create a VCInfo Variable</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvVCInfo</i></font></td>
				<td valign="top"><font size="2" color="#000000">Structure returned that holds vcinfo which is used later for make call</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>ulAddressType</i></font></td>
				<td valign="top"><font size="2" color="#000000">Channel or FIFO VC</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lChannelNum</i></font></td>
				<td valign="top"><font size="2" color="#000000">If ulAddressType is Channel VC, Channel Number to be used</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if succesful else return false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oTestOpen.VCInfo(vVCInfo, NIC1394_FIFO)
bResult = oTestOpen.VCInfo(vVCInfo, NIC1394_Channel, BROADCAST_CHAN)</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::WaitPerformance"/>
		<a name="WaitPerformance"/>
		<font size="+1">
			<b>COpen::WaitPerformance</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::WaitPerformance(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command waits until the driver is done performing a performance test. So the driver is 
sending/receiving packets and once it is done it returns the control back to test script.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">If command succeeds set to TRUE, FALSE otherwise</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::StartPerformance">COpen::StartPerformance</a>
		<a href="#COpen::GetPerformanceResults">COpen::GetPerformanceResults</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = OpenOne.WaitPerformance()
If (Not bResult) Then
    call oLog.Failed ("Unable to wait for performance tests to complete.", 88888)
End If</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::WaitSend"/>
		<a name="WaitSend"/>
		<font size="+1">
			<b>COpen::WaitSend</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::WaitSend(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command keeps checking if the sends have completed and if they
have, returns. This command usually follows a Send or a StopSend
command to make sure we proceed only after all sends have completed</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::StopSend">COpen::StopSend</a>
		<a href="#COpen::Send">COpen::Send</a>
		<a href="#COpen::SendPackets">COpen::SendPackets</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = ClientOpen.Send (SupportAddress, 300, 100, 0, Null)
If (bResult) Then
   bResult = ClientOpen.WaitSend
   .
   .
   .
End If</pre></code></div>
		<br/>
		<br/>
		<a name="COpen::WaitStress"/>
		<a name="WaitStress"/>
		<font size="+1">
			<b>COpen::WaitStress</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP COpen::WaitStress(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command waits for a stress test to complete.  Control does not return until the test is done.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">True if successful</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#COpen::StartStress">COpen::StartStress</a>
		<a href="#COpen::GetStressResults">COpen::GetStressResults</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/></pre></code></div>
		<br/>
		<br/>
		<a name="CPNPPower::QueryStopDriver"/>
		<a name="QueryStopDriver"/>
		<font size="+1">
			<b>CPNPPower::QueryStopDriver</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CPNPPower::QueryStopDriver(BSTR bstrDriverName, long *lRetVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to determine if a driver is stoppable.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDriverName</i></font></td>
				<td valign="top"><font size="2" color="#000000">GUID of the driver that has to be started</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lRetVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">success or failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CPnPPower::StopDriver">CPnPPower::StopDriver</a>
		<a href="#CPnPPower::StartDriver">CPnPPower::StartDriver</a>
		<br/>
		<br/>
		<br/>
		<a name="CPNPPower::StartDriver"/>
		<a name="StartDriver"/>
		<font size="+1">
			<b>CPNPPower::StartDriver</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CPNPPower::StartDriver(BSTR bstrDriverName, long *lRetVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to start a driver.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDriverName</i></font></td>
				<td valign="top"><font size="2" color="#000000">GUID of the driver that has to be started</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lRetVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">success or failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CPnPPower::StopDriver">CPnPPower::StopDriver</a>
		<a href="#CPnPPower::QueryStopDriver">CPnPPower::QueryStopDriver</a>
		<br/>
		<br/>
		<br/>
		<a name="CPNPPower::StopDriver"/>
		<a name="StopDriver"/>
		<font size="+1">
			<b>CPNPPower::StopDriver</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CPNPPower::StopDriver(BSTR bstrDriverName, long *lRetVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is used to stop a driver.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrDriverName</i></font></td>
				<td valign="top"><font size="2" color="#000000">GUID of the driver that has to be stopped</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lRetVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">success or failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CPnPPower::StartDriver">CPnPPower::StartDriver</a>
		<a href="#CPnPPower::QueryStopDriver">CPnPPower::QueryStopDriver</a>
		<br/>
		<br/>
		<br/>
		<a name="CPnPPowerMgmt::get_Hibernate"/>
		<a name="Hibernate"/>
		<font size="+1">
			<b>CPnPPowerMgmt::get_Hibernate</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CPnPPowerMgmt::get_Hibernate (long Duration, VARIANT* lRetStatus, long* pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function puts the device into hibernate state for lDuration amount of time. This lDuration 
value is used only if the machine supports Auto wake. Otherwise, the machine will have to be power 
cycled manually to wake up from hibernate</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lDuration</i></font></td>
				<td valign="top"><font size="2" color="#000000">The duration in seconds for which machine hibernates</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lRetStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">returns success status of the method to caller</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Will return by ref the time duration in seconds the machine hibernated for</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CPnPPowerMgmt::get_Standby">CPnPPowerMgmt::get_Standby</a>
		<a href="#CPnPPowerMgmt::get_PowerStates">CPnPPowerMgmt::get_PowerStates</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>lTimeSlept = oPnPPower.Hibernate (10, lRetValue)</pre></code></div>
		<br/>
		<br/>
		<a name="CPnPPowerMgmt::get_PowerStates"/>
		<a name="PowerStates"/>
		<font size="+1">
			<b>CPnPPowerMgmt::get_PowerStates</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CPnPPowerMgmt::get_PowerStates (long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function returns the Power capabilities of the machine. 
The Power information provided is
Capability to Hibernate (0x01)
Capability to Standby (0x02)
Capability to Autowake from sleep states (0x04)</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">The results are sent back in this long</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CPnPPowerMgmt::get_Standby">CPnPPowerMgmt::get_Standby</a>
		<a href="#CPnPPowerMgmt::get_Hibernate">CPnPPowerMgmt::get_Hibernate</a>
		<br/>
		<br/>
		<br/>
		<a name="CPnPPowerMgmt::get_Standby"/>
		<a name="Standby"/>
		<font size="+1">
			<b>CPnPPowerMgmt::get_Standby</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">long CPnPPowerMgmt::get_Standby (long Duration, VARIANT* lRetStatus,	long* pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function puts the device into standby state for lDuration amount of time. This lDuration 
value is used only if the machine supports Auto wake. Otherwise, the machine will have to be power 
cycled manually to wake up from Standby.  The machine is put into the lowest (closest to hibernate)
sleep state supported.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lDuration</i></font></td>
				<td valign="top"><font size="2" color="#000000">The duration for which machine Standby</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lRetStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">returns success status of the method to caller</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Will return by ref the time duration machine Standby for</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CPnPPowerMgmt::get_Hibernate">CPnPPowerMgmt::get_Hibernate</a>
		<a href="#CPnPPowerMgmt::get_PowerStates">CPnPPowerMgmt::get_PowerStates</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oPnPPower.Standby (10, lRetValue, lTimeSlept)</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::CreateResMgr"/>
		<a name="CreateResMgr"/>
		<font size="+1">
			<b>CResourceMgr::CreateResMgr</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::CreateResMgr()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method initializes the Resource Manager, which provides methods to access Modem Resouces on MCT Server</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CResourceMgr::DeleteResMgr">CResourceMgr::DeleteResMgr</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oResMgr.CreateResMgr
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::DeleteResMgr"/>
		<a name="DeleteResMgr"/>
		<font size="+1">
			<b>CResourceMgr::DeleteResMgr</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::DeleteResMgr()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method frees the internal variables of Resource Manager.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CResourceMgr::CreateResMgr">CResourceMgr::CreateResMgr</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oResMgr.DeleteResMgr
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::EnumerateNextModem"/>
		<a name="EnumerateNextModem"/>
		<font size="+1">
			<b>CResourceMgr::EnumerateNextModem</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::EnumerateNextModem()</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method is called after setting up enumeration using StartModemEnum. If any modems are available which satisfy 
the request criteria then client can use the properties EnumeratedModemName and EnumeratedModemCategory to find 
out the details of all the modem resources on MCT Server. If EnumeratedModemCategory is -1 then there are no 
more modems in the list.</font></pre></td>
			</tr>
		</table>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CResourceMgr::StartModemEnum">CResourceMgr::StartModemEnum</a>
		<a href="#CResourceMgr::EnumeratedModemName">CResourceMgr::EnumeratedModemName</a>
		<a href="#CResourceMgr::EnumeratedModemCategory">CResourceMgr::EnumeratedModemCategory</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oResMgr.StartModemEnum(RequestByLineID)
.
.
oResMgr.EnumerateNextModem
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::get_CategoryID"/>
		<a name="get_CategoryID"/>
		<font size="+1">
			<b>CResourceMgr::get_CategoryID</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::get_CategoryID(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the value of the modem category (e.g voice modem) for the acquired modem resource.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer for the return value</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nCategory = oResMgr.CategoryID
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::get_DialString"/>
		<a name="get_DialString"/>
		<font size="+1">
			<b>CResourceMgr::get_DialString</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::get_DialString(BSTR *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the phone number of the line connected to acquired modem resource.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">BSTR to hold modem phone number</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>RemotePhoneNum = oResMgr.DialString
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::get_EnumeratedModemCategory"/>
		<a name="get_EnumeratedModemCategory"/>
		<font size="+1">
			<b>CResourceMgr::get_EnumeratedModemCategory</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::get_EnumeratedModemCategory(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the integer value for enumerated modem's category.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">LONG to hold the value of category</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CResourceMgr::EnumerateNextModem">CResourceMgr::EnumerateNextModem</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nEnumCategory = oResMgr.EnumeratedModemCategory
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::get_EnumeratedModemName"/>
		<a name="get_EnumeratedModemName"/>
		<font size="+1">
			<b>CResourceMgr::get_EnumeratedModemName</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::get_EnumeratedModemName(BSTR *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the string value for enumerated modem's description string.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">BSTR to hold the modem description string</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CResourceMgr::EnumerateNextModem">CResourceMgr::EnumerateNextModem</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>strEnumName = oResMgr.EnumeratedModemName
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::get_LineDeviceID"/>
		<a name="get_LineDeviceID"/>
		<font size="+1">
			<b>CResourceMgr::get_LineDeviceID</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::get_LineDeviceID(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the TAPI line ID for the acquired modem resource.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer for the return value</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nRemoteLine = oResMgr.LineDeviceID
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::get_ModemName"/>
		<a name="get_ModemName"/>
		<font size="+1">
			<b>CResourceMgr::get_ModemName</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::get_ModemName(BSTR *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the modem description string for the acquired modem resource.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">BSTR to hold modem description string</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>strName = oResMgr.ModemName
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::get_PhoneDeviceID"/>
		<a name="get_PhoneDeviceID"/>
		<font size="+1">
			<b>CResourceMgr::get_PhoneDeviceID</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::get_PhoneDeviceID(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the TAPI phone ID for the acquired modem resource.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer for the return value</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nRemotePhone = oResMgr.PhoneDeviceID
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::get_TAPIProperties"/>
		<a name="get_TAPIProperties"/>
		<font size="+1">
			<b>CResourceMgr::get_TAPIProperties</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::get_TAPIProperties(long *pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This property gets the integer value specifying if the allotted modem has voice, data or phone capabilities.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer for the return value</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>nProperty = oResMgr.TAPIProperties
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::GetNextModem"/>
		<a name="GetNextModem"/>
		<font size="+1">
			<b>CResourceMgr::GetNextModem</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::GetNextModem(DWORD dwTimeout)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Once SetupResourceRequest is called, this method tries to acquire modem resources from Remote MCT Server if any modem is 
available which satisfy the request criteria used in SetupResourceRequest</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwTimeout</i></font></td>
				<td valign="top"><font size="2" color="#000000">Time to wait in milliseconds for the modem resource to be available.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CResourceMgr::SetupResourceRequest">CResourceMgr::SetupResourceRequest</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oResMgr.GetNextModem 24000
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::SetupResourceRequest"/>
		<a name="SetupResourceRequest"/>
		<font size="+1">
			<b>CResourceMgr::SetupResourceRequest</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::SetupResourceRequest(DWORD dwLookupCriteria)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method sets up request for modem resources from Remote MCT Server based on criteria of Category, Line DeviceID, 
Permanent LineID, Phone DeviceID or TAPI Property.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwLookupCriteria</i></font></td>
				<td valign="top"><font size="2" color="#000000">Whether modem is requested based on line ID, Category (same type of device),  permanent Line ID, 
phone Device ID or TAPI Property.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CResourceMgr::GetNextModem">CResourceMgr::GetNextModem</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oResMgr.SetupResourceRequest RequestByLineID
.</pre></code></div>
		<br/>
		<br/>
		<a name="CResourceMgr::StartModemEnum"/>
		<a name="StartModemEnum"/>
		<font size="+1">
			<b>CResourceMgr::StartModemEnum</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CResourceMgr::StartModemEnum(DWORD dwEnumCriteria)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This method  lists all the modem based on criteria mentioned in SetupResourceRequest. This method is mainly used 
for the user to select specific modem.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwEnumCriteria</i></font></td>
				<td valign="top"><font size="2" color="#000000">Whether modem is enumerated based on line ID, Category (same type of device),  permanent Line ID, 
phone Device ID or TAPI Property.</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CResourceMgr::EnumerateNextModem">CResourceMgr::EnumerateNextModem</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>oResMgr.StartModemEnum(RequestByLineID)
.</pre></code></div>
		<br/>
		<br/>
		<a name="CSuppCore::get_CreateBindCtrl"/>
		<a name="CreateBindCtrl"/>
		<font size="+1">
			<b>CSuppCore::get_CreateBindCtrl</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CSuppCore::get_CreateBindCtrl(LONG lConnID, IDispatch **pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This commands creates a bind control object that is used to manipulate protocol bindings of a 
device.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lConnID</i></font></td>
				<td valign="top"><font size="2" color="#000000">The connection ID for the device. This is used to determine what machine the bind
               control object needs to be created on.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to an interface for the bind ctrl object that is returned to the caller</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CSuppCore::InitializeServer">CSuppCore::InitializeServer</a>
		<a href="#CSuppCore::UninitializeServer">CSuppCore::UninitializeServer</a>
		<a href="#CBindCtrl::Bind">CBindCtrl::Bind</a>
		<a href="#CBindCtrl::UnBind">CBindCtrl::UnBind</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set Adapter = oNDInfo.AdapterList (0)
Set oBindCtrl = oSuppCore.CreateBindCtrl (Adapter.ConnectionID)</pre></code></div>
		<br/>
		<br/>
		<a name="CSuppCore::InitializeServer"/>
		<a name="InitializeServer"/>
		<font size="+1">
			<b>CSuppCore::InitializeServer</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CSuppCore::InitializeServer(LONG lConnectionID, VARIANT_BOOL *bReturn)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command sets up the structures needed change protocol bindings of devices on remote machines. 
This command must be called with connection id for each remote machine. Also note that the
connection id for devices on the local machine is zero, while the connection id for devices on 
remote machine is always non zero.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lConnectionID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Connection ID of the remote machine adapter</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bReturn</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success or false on failure to caller</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CSuppCore::UninitializeServer">CSuppCore::UninitializeServer</a>
		<a href="#CSuppCore::get_CreateBindCtrl">CSuppCore::get_CreateBindCtrl</a>
		<a href="#CBindCtrl::Bind">CBindCtrl::Bind</a>
		<a href="#CBindCtrl::UnBind">CBindCtrl::UnBind</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set Adapter = oNDInfo.AdapterList (2)
If (Adapter.ConnectionID &lt;&gt; 0) Then
   bResult = oSuppCore.InitializeServer (Adapter.ConnectionID)
End If</pre></code></div>
		<br/>
		<br/>
		<a name="CSuppCore::UninitializeServer"/>
		<a name="UninitializeServer"/>
		<font size="+1">
			<b>CSuppCore::UninitializeServer</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CSuppCore::UninitializeServer(LONG lConnectionID, VARIANT_BOOL *bReturn)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command is needed to uninitialize a remote server that has been initialized with the 
InitializeServer command.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lConnectionID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Connection ID of the remote machine adapter</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bReturn</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true on success or false on failure to caller</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CSuppCore::InitializeServer">CSuppCore::InitializeServer</a>
		<a href="#CSuppCore::get_CreateBindCtrl">CSuppCore::get_CreateBindCtrl</a>
		<a href="#CBindCtrl::Bind">CBindCtrl::Bind</a>
		<a href="#CBindCtrl::UnBind">CBindCtrl::UnBind</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Set Adapter = oNDInfo.AdapterList (2)
If (Adapter.ConnectionID &lt;&gt; 0) Then
   bResult = oSuppCore.UninitializeServer (Adapter.ConnectionID)
End If</pre></code></div>
		<br/>
		<br/>
		<a name="CTAPICore::get_CreateStructure"/>
		<a name="CreateStructure"/>
		<font size="+1">
			<b>CTAPICore::get_CreateStructure</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::get_CreateStructure(BSTR bstrName, IDispatch **pVal)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Creates an object that represents one of the TAPI structures, The returned object can then be used
in many of the calls like LineGetDevCaps().
&lt;br/&gt;	
Structure Object Names:
&lt;br/&gt;
LINEADDRESSCAPS LINEDEVCAPS VARSTRING LINECALLPARAMS LINEDEVSTATUS LINECALLINFO</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrName</i></font></td>
				<td valign="top"><font size="2" color="#000000">String the specifies the name of the strucutre object to create.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pVal</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to pointer that will receive the newly created structure object.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineMakeCall">CTAPICore::LineMakeCall</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineClose"/>
		<a name="lineClose"/>
		<font size="+1">
			<b>CTAPICore::LineClose</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineClose(LONG LineID, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Closes the open line handle associated with the specified line.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>LineID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Spicifies the identifier for the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineOpen">CTAPICore::LineOpen</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineDeallocateCall"/>
		<a name="lineDeallocateCall"/>
		<font size="+1">
			<b>CTAPICore::LineDeallocateCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineDeallocateCall(LONG CallID, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function deallocates the call handle associated with the specified CallID.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>CallID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the line identifier that is accociated with the call handle to drop.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineDrop">CTAPICore::LineDrop</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineDrop"/>
		<a name="lineDrop"/>
		<font size="+1">
			<b>CTAPICore::LineDrop</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineDrop(LONG CallID, VARIANT *pValue, LONG lSize, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command will drop\disconnect the specified call. The call handle is not deallocated until a 
subsequent call to LineDeallocate is made.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>CallID</i></font></td>
				<td valign="top"><font size="2" color="#000000">The call ID identifies the call to be dropped.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">Reserved.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Reserved.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>Pointer</i></font></td>
				<td valign="top"><font size="2" color="#000000">to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineGetAddressCaps"/>
		<a name="lineGetAddressCaps"/>
		<font size="+1">
			<b>CTAPICore::LineGetAddressCaps</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineGetAddressCaps(DWORD dwDeviceID, 
                                           DWORD dwAddressID, 
                                           DWORD dwAPIVersion, 
                                           DWORD dwExtVersion, 
                                           IDispatch *pAddressCaps, 
                                           LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function queries the specified address on the specified line device to determine its 
telephony capabilities.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwDeviceID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwAddressID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the address on the given line device whose capabilities are to
                        be queried.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwAPIVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the version number of the TAPI API to be used.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwExtVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the negotiated extension version, should be set to 0.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pAddressCaps</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a LINEADDRESSCAPS structure object. Upon successful completion
                        of the request, this structure object is filled with the address 
                        capabilites information.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::get_CreateStructure">CTAPICore::get_CreateStructure</a>
		<a href="#CTAPICore::LineNegotiateAPIVersion">CTAPICore::LineNegotiateAPIVersion</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineGetAddressID"/>
		<a name="lineGetAddressID"/>
		<font size="+1">
			<b>CTAPICore::LineGetAddressID</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineGetAddressID(LONG LineID, VARIANT *pAddressID, LONG lAddressMode, BSTR bstrAddress, LONG lSize, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function returns the address identifier associated with an address in a different format on
the specified line.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>LineID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pAddressID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Variant that will recieve the address identifier upon successful completion.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lAddressMode</i></font></td>
				<td valign="top"><font size="2" color="#000000">Address mode of the specfied address, Must be a LINEADDRESSMODE_ constant.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrAddress</i></font></td>
				<td valign="top"><font size="2" color="#000000">String that specifies the address assigned to the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Size of the address.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineMakeCall">CTAPICore::LineMakeCall</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineGetAddressStatus"/>
		<a name="lineGetAddressStatus"/>
		<font size="+1">
			<b>CTAPICore::LineGetAddressStatus</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineGetAddressStatus(LONG LineID, LONG lAddressID, IDispatch *pAddressStatus, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function allows an application to query the specified address for its current status.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>LineID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lAddressID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies an address on the given open line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pAddressStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a LINEADDRESSSTAUTS structure object. Upon successful completion
                        of the request, this structure object is filled with the address status
                        information.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::get_CreateStructure">CTAPICore::get_CreateStructure</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineGetCallInfo"/>
		<a name="lineGetCallInfo"/>
		<font size="+1">
			<b>CTAPICore::LineGetCallInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineGetCallInfo(LONG CallID, IDispatch *pCallInfo, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function enables an application to obtain fixed information about the specified call.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>LineID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pCallInfo</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a LINECALLINFO structure object.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::get_CreateStructure">CTAPICore::get_CreateStructure</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineGetCallStatus"/>
		<a name="lineGetCallStatus"/>
		<font size="+1">
			<b>CTAPICore::LineGetCallStatus</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineGetCallStatus(LONG CallID, IDispatch *pCallStatus, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function returns the current status of the specified call.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>CallID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pCallStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a LINECALLSTATUS structure object. Upon successful completion of 
                    the request, this structure object is filled with the call status information.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineGetCallInfo">CTAPICore::LineGetCallInfo</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineGetDevCaps"/>
		<a name="lineGetDevCaps"/>
		<font size="+1">
			<b>CTAPICore::LineGetDevCaps</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineGetDevCaps(DWORD		dwDeviceID, 
									   DWORD		dwAPIVersion, 
									   DWORD		dwExtVersion, 
									   IDispatch	*pDevCaps, 
									   LONG			*pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Queries a specified line device to determine its telephony capabilities.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwDeviceID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Spcifies the identifier for the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwAPIVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the version number of TAPI to be used.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwExtVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Not supported, should be set to 0.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pDevCaps</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the IDispath of an object that represents the LINEDEVCAPS sturcture.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineGetDevConfig"/>
		<a name="lineGetDevConfig"/>
		<font size="+1">
			<b>CTAPICore::LineGetDevConfig</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineGetDevConfig(DWORD dwDeviceID, IDispatch *pDevConfig, BSTR bszDeviceClass, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Returns an "opaque" data structure object, the contents of which are specific to the line 
(service provider) and device class. The data structure object stores the current configuration 
of a media-stream device associated with the line device.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwDeviceID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pDevConfig</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the IDispath of an object that represents the VARSTRING sturcture.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bszDeviceClass</i></font></td>
				<td valign="top"><font size="2" color="#000000">String that specifies the device class of the device whose configuration is
                        requested.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineSetDevConfig">CTAPICore::LineSetDevConfig</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineGetLineDevStatus"/>
		<a name="lineGetLineDevStatus"/>
		<font size="+1">
			<b>CTAPICore::LineGetLineDevStatus</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineGetLineDevStatus(LONG LineID, IDispatch *pDevStatus, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function enables an application to query the specified open line device for its current status.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>LineID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pDevStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a LINEDEVSTATUS structure object. Upon successful completion
                    of the request, this structure object is filled with the device status
                    information.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::get_CreateStructure">CTAPICore::get_CreateStructure</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineMakeCall"/>
		<a name="lineMakeCall"/>
		<font size="+1">
			<b>CTAPICore::LineMakeCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineMakeCall(LONG LineID, VARIANT *pCallHandle, BSTR bstrAddress, LONG lCountryCode, IDispatch *pCallParams, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Places a call on the specified line to the specified destination address. Optionally, call 
parameters can be specified if anything but default call setup parameters are requested.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>LineID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pCallHandle</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a VARIANT that will recieve that call handle.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bstrAddress</i></font></td>
				<td valign="top"><font size="2" color="#000000">String that specifies the destination address.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lCountryCode</i></font></td>
				<td valign="top"><font size="2" color="#000000">Reserved, should be set to zero.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pCallParams</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a LINECALLPARAMS structure object.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineDrop">CTAPICore::LineDrop</a>
		<a href="#CTAPICore::LineDeallocateCall">CTAPICore::LineDeallocateCall</a>
		<a href="#CTAPICore::get_CreateStructure">CTAPICore::get_CreateStructure</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineNegotiateAPIVersion"/>
		<a name="lineNegotiateAPIVersion"/>
		<font size="+1">
			<b>CTAPICore::LineNegotiateAPIVersion</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineNegotiateAPIVersion(DWORD		dwDeviceID, 
												DWORD		dwAPILow, 
												DWORD		dwAPIHigh, 
												VARIANT		*pdwAPIVersion, 
												IDispatch	*pExtID, 
												LONG		*pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function is called to negotiate an TAPI version to use.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwDeviceID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Spcifies the identifier for the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwAPILow</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the least recent TAPI version the application is compliant with.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwAPIHigh</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the most recent TAPI version the applican is compliant with.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pdwAPIVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Reserved.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pExtID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Reserved.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineNegotiateExtVersion"/>
		<a name="lineNegotiateExtVersion"/>
		<font size="+1">
			<b>CTAPICore::LineNegotiateExtVersion</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineNegotiateExtVersion(DWORD	dwDeviceID, 
												DWORD	dwAPIVersion, 
												DWORD	dwLowVersion, 
												DWORD	dwHighVersion, 
												VARIANT *pExtVersion, 
												LONG	*pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function allows an application to negotiate an extension version to use with the specified 
line device.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwDeviceID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwAPIVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">TAPI version number that was negotiated for the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwLowVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">The least recent version of the extension identifier returned by 
                        lineNegotiateAPIVersion.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwHighVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">The most recent version of the extension identifier returned by 
                        lineNegotiateAPIVersion.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pExtVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a VARIANT that will receive the extension version.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineNegotiateAPIVersion">CTAPICore::LineNegotiateAPIVersion</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineOpen"/>
		<a name="lineOpen"/>
		<font size="+1">
			<b>CTAPICore::LineOpen</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineOpen(LONG DeviceID, VARIANT *pLineHandle, LONG lAPIVersion, LONG lExtVersion, LONG lPrivileges, LONG lMediaMode, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This command will open a specified line using the provided parameters. No validation is done to 
ensure the validity of the params.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>DeviceID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device to be opened.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pLineHandle</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to a variable to that will recieve the open line handle identifier.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lAPIVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the TAPI version number that the application and TAPI have agreed upon.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lExtVersion</i></font></td>
				<td valign="top"><font size="2" color="#000000">Unsupported, should be set to 0.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lPrivileges</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the privilege the application wants for the calls it is notified for.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lMediaMode</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the media mode or modes of interest to the application.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineClose">CTAPICore::LineClose</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineSecureCall"/>
		<a name="lineSecureCall"/>
		<font size="+1">
			<b>CTAPICore::LineSecureCall</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineSecureCall(LONG CallID, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function secures the call from any interruptions or interference that can affect the call's 
media stream.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>CallID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineMakeCall">CTAPICore::LineMakeCall</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineSendUserUserInfo"/>
		<a name="lineSendUserUserInfo"/>
		<font size="+1">
			<b>CTAPICore::LineSendUserUserInfo</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineSendUserUserInfo(LONG CallID, BSTR UserInfo, LONG lSize, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function sends user-user information to the remote party on the specified call.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>CallID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>UserInfo</i></font></td>
				<td valign="top"><font size="2" color="#000000">String that contains user-user information to be sent to the remote party.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">The size in bytes of the string.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineSetAppSpecific"/>
		<a name="lineSetAppSpecific"/>
		<font size="+1">
			<b>CTAPICore::LineSetAppSpecific</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineSetAppSpecific(LONG CallID, LONG AppSpecValue, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function enables an application to set the application-specific field of the specified call's
call-information record.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>CallID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>AppSpecValue</i></font></td>
				<td valign="top"><font size="2" color="#000000">The new content value.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineSetCallParams"/>
		<a name="lineSetCallParams"/>
		<font size="+1">
			<b>CTAPICore::LineSetCallParams</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineSetCallParams(LONG CallID, LONG BearerMode, LONG MinRate, LONG MaxRate, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function allows an application to change bearer mode and/or the rate parameters of an 
existing call.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>CallID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>BearerMode</i></font></td>
				<td valign="top"><font size="2" color="#000000">The new bearmode of the call. This parameter uses one and only one of the 
                    LINEBEARERMODE_Constants.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>MinRate</i></font></td>
				<td valign="top"><font size="2" color="#000000">A lower bound for the call's new data rate.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>MaxRate</i></font></td>
				<td valign="top"><font size="2" color="#000000">An upper bound for the call's new data rate.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineSetDevConfig"/>
		<a name="lineSetDevConfig"/>
		<font size="+1">
			<b>CTAPICore::LineSetDevConfig</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineSetDevConfig(DWORD dwDeviceID, IDispatch *pDevConfig, DWORD dwSize, BSTR bszDeviceClass, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">Allows the application to restore the configuration of a media stream device on a line device to 
a setup previously obtained using lineGetDevConfig. For example, the contents of this structure
could specify data rate, character format, modulation schemes, and error control protocol settings
for a "datamodem" media device associated with the line.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwDeviceID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device to be configured.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pDevConfig</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the IDispath of an object that represents the VARSTRING sturcture.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>dwSize</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the number of bytes in the structure represented by the structure
                        object.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>bszDeviceClass</i></font></td>
				<td valign="top"><font size="2" color="#000000">String that specifies the device class of the device whose configuration is
                        requested.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTAPICore::LineGetDevConfig">CTAPICore::LineGetDevConfig</a>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineSetMediaMode"/>
		<a name="lineSetMediaMode"/>
		<font size="+1">
			<b>CTAPICore::LineSetMediaMode</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineSetMediaMode(LONG CallID, LONG lMediaMode, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function sets the media type(s) of the specified call.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>CallID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lMediaMode</i></font></td>
				<td valign="top"><font size="2" color="#000000">The new media type(s) for the call. This parameter uses the LINEMEDIAMODE_ 
                    Constants. As long as the UNKNOWN media type flag is set, other media type 
                    flags may be set as well.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CTAPICore::LineSetStatusMessages"/>
		<a name="lineSetStatusMessages"/>
		<font size="+1">
			<b>CTAPICore::LineSetStatusMessages</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTAPICore::LineSetStatusMessages(LONG LineID, LONG lLineStates, LONG lAddressStates, LONG *pStatus)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function enables an application to specify which notification messages the application wants 
to receive for events related to status changes for the specified line or any of its addresses.</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>LineID</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies the identifier of the line device.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lLineStates</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies for which line-device status changes a message is to be sent to
                        the application. This parameter should be set to one or more LINEDEVSTATE_
                        constants.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>lAddressStates</i></font></td>
				<td valign="top"><font size="2" color="#000000">Specifies for which address status changes a message is to be sent to the 
                        application. This parameter should be set to one or more LINEADDRESSSTATE_
                        constants.</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pStatus</i></font></td>
				<td valign="top"><font size="2" color="#000000">Pointer to the returned TAPI Status.</font></td>
			</tr>
		</table>
		<br/>
		<br/>
		<br/>
		<br/>
		<a name="CTcpIpChecksum::CompareTcpIpCksumObjects"/>
		<a name="CompareTcpIpCksumObjects"/>
		<font size="+1">
			<b>CTcpIpChecksum::CompareTcpIpCksumObjects</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTcpIpChecksum::CompareTcpIpCksumObjects(IDispatch *pvCksumObj, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function compares one TcpIpChecksum object to another and returns true if they
are identical</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvCksumObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The checksum object to compare with the current checksum object</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>Result = oTcpIpCksumObj1.CompareTcpIpCksumObjects (oTcpIpCksumObj2)</pre></code></div>
		<br/>
		<br/>
		<a name="CTcpIpChecksum::GetVariant"/>
		<a name="GetVariant"/>
		<font size="+1">
			<b>CTcpIpChecksum::GetVariant</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTcpIpChecksum::GetVariant(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function makes a variant of the current TcpIpCksumObj. A variant is a copy of the
current checksum object except that it will claim to support exactly one checksum
capability that the current object does not. If no such checksum capability exists 
(that is the current object supports all forms of checksum offload) the function
returns false. The variant is useful in checking for driver's ability to handle
tasks it does not support</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if a variant is successfully made, else false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTcpIpLargeSend::GetVariant">CTcpIpLargeSend::GetVariant</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oTcpIpCksumObj.GetVariant()
' Note: The oTcpIpCksumObj becomes a variant of itself.</pre></code></div>
		<br/>
		<br/>
		<a name="CTcpIpLargeSend::CompareTcpIpLargeSendObjects"/>
		<a name="CompareTcpIpLargeSendObjects"/>
		<font size="+1">
			<b>CTcpIpLargeSend::CompareTcpIpLargeSendObjects</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTcpIpLargeSend::CompareTcpIpLargeSendObjects(IDispatch *pvLargeSendObj, VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function compares one TcpIpLargeSend object to another and returns true if they
are identical</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pvCksumObj</i></font></td>
				<td valign="top"><font size="2" color="#000000">The Largesend object to compare with the current Largesend object</font></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Return true on success, false on failure</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oTcpIpLargeSendObj1.CompareTcpIpLargeSendObjects (oTcpIpLargeSendObj2)</pre></code></div>
		<br/>
		<br/>
		<a name="CTcpIpLargeSend::GetVariant"/>
		<a name="GetVariant"/>
		<font size="+1">
			<b>CTcpIpLargeSend::GetVariant</b>
		</font>
		<a href="#TOP">toc</a>
		<table bgcolor="#B0C4DE" width="100%">
			<tr><td>
					<font size="2" color="#000000">STDMETHODIMP CTcpIpLargeSend::GetVariant(VARIANT_BOOL *pbResult)</font>
				</td></tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Description</b></font></td>
			</tr>
			<tr>
				<td valign="top"><pre><font size="2" color="#000000">This function makes a variant of the current TcpIpLargeSendObj. A variant is a copy 
of the current TcpIpLargeSendObj except that it will claim to support exactly one 
Largesend capability that the current object does not. If no such largesend 
capability exists (that is the current object supports all forms of largesend offload)
the function returns false. The variant is useful in checking for driver's ability 
to handle tasks it does not support</font></pre></td>
			</tr>
		</table>
		<table>
			<tr>
				<td valign="top"><font size="2" color="#000000"><b>Parameters</b></font></td>
				<td valign="top"></td>
			</tr>
			<tr>
				<td valign="top"><font size="2" color="#000000"><i>pbResult</i></font></td>
				<td valign="top"><font size="2" color="#000000">Returns true if a variant is successfully made, else false</font></td>
			</tr>
		</table>
		<br/>
		<b>Returns</b>
		<br/>
HRESULT
<br/>
		<br/>
		<b>See Also</b>
		<br/>
		<a href="#CTcpIpChecksum::GetVariant">CTcpIpChecksum::GetVariant</a>
		<br/>
		<br/>
		<div width="50%" style="background-color:#DCDCDC"><code><pre><b>Example:</b><br/>bResult = oTcpIpLargeSendObj.GetVariant()
' Note: The oTcpIpLargeSendObj changes to a variant of itself.</pre></code></div>
		<br/>
		<br/>
	</BODY>
</HTML>
