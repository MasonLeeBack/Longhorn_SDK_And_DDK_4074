// CommonControls.idl
//
cpp_quote("#if (_WIN32_IE >= 0x0501)")

import "oaidl.idl";
import "ocidl.idl";

cpp_quote("#ifndef WINCOMMCTRLAPI")
cpp_quote("#if !defined(_COMCTL32_) && defined(_WIN32)")
cpp_quote("#define WINCOMMCTRLAPI DECLSPEC_IMPORT")
cpp_quote("#else")
cpp_quote("#define WINCOMMCTRLAPI")
cpp_quote("#endif")
cpp_quote("#endif // WINCOMMCTRLAPI")

cpp_quote("#ifdef MIDL_PASS")
typedef DWORD RGBQUAD;

typedef IUnknown* HIMAGELIST;
cpp_quote("typedef struct _IMAGELIST* HIMAGELIST;")

typedef struct _IMAGELISTDRAWPARAMS
{
    DWORD       cbSize;
    HIMAGELIST  himl;
    int         i;
    HDC         hdcDst;
    int         x;
    int         y;
    int         cx;
    int         cy;
    int         xBitmap;        // x offest from the upperleft of bitmap
    int         yBitmap;        // y offset from the upperleft of bitmap
    COLORREF    rgbBk;
    COLORREF    rgbFg;
    UINT        fStyle;
    DWORD       dwRop;
    DWORD       fState;
    DWORD       Frame;
    COLORREF    crEffect;
} IMAGELISTDRAWPARAMS;

typedef IMAGELISTDRAWPARAMS* LPIMAGELISTDRAWPARAMS;
typedef struct tagIMAGEINFO
{
    HBITMAP hbmImage;
    HBITMAP hbmMask;
    int     Unused1;
    int     Unused2;
    RECT    rcImage;
} IMAGEINFO;

typedef IMAGEINFO* LPIMAGEINFO;
cpp_quote("#endif") // MIDL_PASS

cpp_quote("#if (_WIN32_WINNT >= 0x0600)")
cpp_quote("WINCOMMCTRLAPI HRESULT WINAPI ImageList_CoCreateInstance(")
cpp_quote("        /* __in */ REFCLSID rclsid,")
cpp_quote("        /* __in */ const IUnknown *punkOuter,")
cpp_quote("        /* __in */ REFIID riid,")
cpp_quote("       /* __out */ void **ppv);")
cpp_quote("#endif")

// flags returned by GetItemFlags
cpp_quote("#define ILIF_ALPHA               0x00000001") // item has alpha
cpp_quote("#define ILIF_LOWQUALITY          0x00000002") // image is low quality (was generated by a StretchBlt)

// return values (if SUCCEEDED()) for IImageList::Draw
cpp_quote("#define ILDRF_IMAGELOWQUALITY    0x00000001") // image is low quality
cpp_quote("#define ILDRF_OVERLAYLOWQUALITY  0x00000010") // overlay is low quality

[
    uuid(46EB5926-582E-4017-9FDF-E8998DAA0950),

    helpstring("Image List"),
    local
]
interface IImageList : IUnknown
{
    HRESULT Add(HBITMAP hbmImage, HBITMAP hbmMask, int* pi);
    HRESULT ReplaceIcon(int i, HICON hicon, int* pi);
    HRESULT SetOverlayImage(int iImage, int iOverlay);
    HRESULT Replace(int i, HBITMAP hbmImage, HBITMAP hbmMask);
    HRESULT AddMasked(HBITMAP hbmImage, COLORREF crMask, int* pi);
    HRESULT Draw(IMAGELISTDRAWPARAMS* pimldp);
    HRESULT Remove(int i);
    HRESULT GetIcon(int i, UINT flags, HICON* picon);
    HRESULT GetImageInfo(int i, IMAGEINFO* pImageInfo);
    HRESULT Copy(int iDst, IUnknown* punkSrc, int iSrc, UINT uFlags);
    HRESULT Merge(int i1, IUnknown* punk2, int i2, int dx, int dy, REFIID riid, PVOID* ppv);
    HRESULT Clone(REFIID riid, PVOID* ppv);
    HRESULT GetImageRect(int i, RECT* prc);
    HRESULT GetIconSize(int* cx, int* cy);
    HRESULT SetIconSize(int cx, int cy);
    HRESULT GetImageCount(int* pi);
    HRESULT SetImageCount(UINT uNewCount);
    HRESULT SetBkColor(COLORREF clrBk, COLORREF* pclr);
    HRESULT GetBkColor(COLORREF* pclr);
    HRESULT BeginDrag(int iTrack, int dxHotspot, int dyHotspot);
    HRESULT EndDrag();
    HRESULT DragEnter(HWND hwndLock, int x, int y);
    HRESULT DragLeave(HWND hwndLock);
    HRESULT DragMove(int x, int y);
    HRESULT SetDragCursorImage(IUnknown* punk, int iDrag, int dxHotspot, int dyHotspot);
    HRESULT DragShowNolock(BOOL fShow);
    HRESULT GetDragImage(POINT * ppt, POINT * pptHotspot, REFIID riid, PVOID* ppv);
    HRESULT GetItemFlags(int i, DWORD *dwFlags);
    HRESULT GetOverlayImage(int iOverlay, int* piIndex);
};

// New for (_WIN32_IE >= 0x0605)
[
    uuid(a6a78d63-aad3-46a0-ba39-163be3a9050c),

    helpstring("Image List 2"),
    local
]
interface IImageList2 : IImageList
{

//  Flags for DiscardImages
//
//  ILDI_STANDBY and ILDI_PURGE are mutually exclusive.
//  ILDI_RESETACCESS can be combined with either.

cpp_quote("#define ILDI_PURGE       0x00000001") // discard and purge
cpp_quote("#define ILDI_STANDBY     0x00000002") // discard to standby list

cpp_quote("#define ILDI_RESETACCESS 0x00000004") // reset "has been accessed" flag
cpp_quote("#define ILDI_QUERYACCESS 0x00000008") // ask whether access flag is set (but do not reset)

//  Flags for ForceImagePresent
cpp_quote("#define ILFIP_ALWAYS         0x00000000") // always get the image (can be slow)
cpp_quote("#define ILFIP_FROMSTANDBY    0x00000001") // only if on standby

    typedef struct tagIMAGELISTSTATS
    {
        DWORD       cbSize;
        int         cAlloc;     // number of images allocated
        int         cUsed;      // number of images in use
        int         cStandby;   // number of standby images
    } IMAGELISTSTATS;

    HRESULT Resize(int cxNewIconSize, int cyNewIconSize);
    HRESULT SetDevice([in] IUnknown *punk);
    HRESULT GetTextureInformation([out] UINT *piCount, [out] UINT *piRows, [out] UINT *piCols);
    HRESULT GetImageTextureInfo([in] DWORD fStyle, [in] int iImage, [out] UINT *piTexture, [out] RECT *prcImage, [out] IUnknown **ppTexture);
    HRESULT SelectTexture([in] UINT iTexture);
    HRESULT GetOriginalSize([in] int iImage, [out] int *pcx, [out] int *pcy);
    HRESULT SetOriginalSize([in] int iImage, [in] int cx, [in] int cy);
    HRESULT SetCallback([in] IUnknown *punk);
    HRESULT GetCallback([in] REFIID riid, [out, iid_is(riid)] PVOID* ppv);
    HRESULT ForceImagePresent([in] int iImage, DWORD dwFlags);
    HRESULT DiscardImages([in] int iFirstImage, [in] int iLastImage, [in] DWORD dwFlags);
    HRESULT PreloadImages([in] IMAGELISTDRAWPARAMS* pimldp);
    HRESULT GetStatistics([in, out] IMAGELISTSTATS *pils);
    HRESULT Initialize([in] int cx, [in] int cy, [in] UINT flags, [in] int cInitial, [in] int cGrow);
    HRESULT GetMILBrushInformation([out] UINT *piCount, [out] UINT *piRows, [out] UINT *piCols);
    HRESULT GetImageMILBrushInfo([in] DWORD fStyle, [in] int iImage, [out] UINT *piMILBrush, [out] RECT *prcImage, [out] IUnknown **ppMILBrush);
    HRESULT GetMILBrush([in] UINT iMILBrush, [in] REFIID riid, [out, iid_is(riid)] PVOID *ppv);
};

// New for (_WIN32_IE >= 0x0605)
[
    uuid(04CA44B2-D3BC-4ED5-A460-AEDBB6FC88EA),
    helpstring("Image List Sparse Callback"),
    local
]
interface IImageListSparseCallback : IUnknown
{
    HRESULT ForceImagePresent([in] int iImage);
    HRESULT Clone(REFIID riid, [out, iid_is(riid)] void **ppv);
};

// New for (_WIN32_IE >= 0x0605)
[
    uuid(D44E5013-2FA4-4041-99FC-40F0AD1522B3),
    helpstring("Image List Container"),
    local
]
interface IImageListContainer : IUnknown
{
    HRESULT SetImageLists([in] ULONG celt,
                          [in, size_is(celt)] IImageList **rgpiml);
    HRESULT GetImageLists([out] ULONG *pceltFetched,
                          [out, size_is(, *pceltFetched)] IImageList ***prgpiml);
};

// New for (_WIN32_IE >= 0x0605)
[
    uuid(8553A068-DCCC-44B6-8784-4C9E197BFBFD),
    helpstring("Aggregate Image List"),
    local
]
interface IAggregateImageList : IImageListContainer
{
    HRESULT AddAggregated([in] int iImageListIndex,
                          [in] int iImageListImageIndex,
                          [out] int *piAdded);
    HRESULT ReplaceAggregated([in] int iImageIndex,
                          [in] int iImageListIndex,
                          [in] int iImageListImageIndex);
    HRESULT GetAggregated([in] int iImageIndex,
                          [out] int *piImageListIndex,
                          [out] int *piImageListImageIndex);
};

// New for (_WIN32_IE >= 0x0605)
[
    uuid(50625B30-70F4-4281-B919-4B4E79BC2CA4),
    helpstring("Gang Image List"),
    local
]
interface IGangImageList : IImageListContainer
{
    HRESULT GetDrawOrder([in] int cx, [in] int ciOrder,
                         [out, size_is(ciOrder)] int rgiOrder[]);
};

[
    uuid(BCADA15B-B428-420c-8D28-023590924C9F)
]
library CommonControlObjects
{

    [
        uuid(7C476BA2-02B1-48f4-8048-B24619DDC058)  // CLSID_ImageList
    ]
    coclass ImageList
    {
        interface IImageList;
        interface IImageList2;
    }

// New for (_WIN32_IE >= 0x0605)
    [
        uuid(2AC0B4F3-6D94-4530-B889-497343D6B112)  // CLSID_SparseImageList
    ]
    coclass SparseImageList
    {
        interface IImageList;
        interface IImageList2;
    }

// New for (_WIN32_IE >= 0x0605)
    [
        uuid(5C7827C4-7381-496F-9463-1A1522EB7F04)  // CLSID_AggregateImageList
    ]
    coclass AggregateImageList
    {
        interface IImageList2;
        interface IAggregateImageList;
    }

// New for (_WIN32_IE >= 0x0605)
    [
        uuid(BB8D2C61-6AC0-4850-BC0F-B1C21B4182E3)  // CLSID_GangImageList
    ]
    coclass GangImageList
    {
        interface IImageList2;
        interface IGangImageList;
    }

};

cpp_quote("#endif // if (_WIN32_IE >= 0x0501)")
