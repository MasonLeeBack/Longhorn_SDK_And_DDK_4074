

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0408 */
/* Compiler settings for wcmconfig.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wcmconfig_h__
#define __wcmconfig_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IItemEnumerator_FWD_DEFINED__
#define __IItemEnumerator_FWD_DEFINED__
typedef interface IItemEnumerator IItemEnumerator;
#endif 	/* __IItemEnumerator_FWD_DEFINED__ */


#ifndef __IItemCollection_FWD_DEFINED__
#define __IItemCollection_FWD_DEFINED__
typedef interface IItemCollection IItemCollection;
#endif 	/* __IItemCollection_FWD_DEFINED__ */


#ifndef __INamespaceIdentity_FWD_DEFINED__
#define __INamespaceIdentity_FWD_DEFINED__
typedef interface INamespaceIdentity INamespaceIdentity;
#endif 	/* __INamespaceIdentity_FWD_DEFINED__ */


#ifndef __ITargetInfo_FWD_DEFINED__
#define __ITargetInfo_FWD_DEFINED__
typedef interface ITargetInfo ITargetInfo;
#endif 	/* __ITargetInfo_FWD_DEFINED__ */


#ifndef __ISettingsEngine_FWD_DEFINED__
#define __ISettingsEngine_FWD_DEFINED__
typedef interface ISettingsEngine ISettingsEngine;
#endif 	/* __ISettingsEngine_FWD_DEFINED__ */


#ifndef __IAdvancedSettingsEngine_FWD_DEFINED__
#define __IAdvancedSettingsEngine_FWD_DEFINED__
typedef interface IAdvancedSettingsEngine IAdvancedSettingsEngine;
#endif 	/* __IAdvancedSettingsEngine_FWD_DEFINED__ */


#ifndef __IBaseItem_FWD_DEFINED__
#define __IBaseItem_FWD_DEFINED__
typedef interface IBaseItem IBaseItem;
#endif 	/* __IBaseItem_FWD_DEFINED__ */


#ifndef __ISettingsNamespace_FWD_DEFINED__
#define __ISettingsNamespace_FWD_DEFINED__
typedef interface ISettingsNamespace ISettingsNamespace;
#endif 	/* __ISettingsNamespace_FWD_DEFINED__ */


#ifndef __ISettingsItem_FWD_DEFINED__
#define __ISettingsItem_FWD_DEFINED__
typedef interface ISettingsItem ISettingsItem;
#endif 	/* __ISettingsItem_FWD_DEFINED__ */


#ifndef __ISettingsAttribute_FWD_DEFINED__
#define __ISettingsAttribute_FWD_DEFINED__
typedef interface ISettingsAttribute ISettingsAttribute;
#endif 	/* __ISettingsAttribute_FWD_DEFINED__ */


#ifndef __IMetadataItem_FWD_DEFINED__
#define __IMetadataItem_FWD_DEFINED__
typedef interface IMetadataItem IMetadataItem;
#endif 	/* __IMetadataItem_FWD_DEFINED__ */


#ifndef __IMetadata_FWD_DEFINED__
#define __IMetadata_FWD_DEFINED__
typedef interface IMetadata IMetadata;
#endif 	/* __IMetadata_FWD_DEFINED__ */


#ifndef __ISettingsAllowedValue_FWD_DEFINED__
#define __ISettingsAllowedValue_FWD_DEFINED__
typedef interface ISettingsAllowedValue ISettingsAllowedValue;
#endif 	/* __ISettingsAllowedValue_FWD_DEFINED__ */


#ifndef __ISettingsResult_FWD_DEFINED__
#define __ISettingsResult_FWD_DEFINED__
typedef interface ISettingsResult ISettingsResult;
#endif 	/* __ISettingsResult_FWD_DEFINED__ */


#ifndef __IAssertion_FWD_DEFINED__
#define __IAssertion_FWD_DEFINED__
typedef interface IAssertion IAssertion;
#endif 	/* __IAssertion_FWD_DEFINED__ */


#ifndef __IComplexType_FWD_DEFINED__
#define __IComplexType_FWD_DEFINED__
typedef interface IComplexType IComplexType;
#endif 	/* __IComplexType_FWD_DEFINED__ */


#ifndef __ISimpleType_FWD_DEFINED__
#define __ISimpleType_FWD_DEFINED__
typedef interface ISimpleType ISimpleType;
#endif 	/* __ISimpleType_FWD_DEFINED__ */


#ifndef __ICustomHandler_FWD_DEFINED__
#define __ICustomHandler_FWD_DEFINED__
typedef interface ICustomHandler ICustomHandler;
#endif 	/* __ICustomHandler_FWD_DEFINED__ */


#ifndef __IElement_FWD_DEFINED__
#define __IElement_FWD_DEFINED__
typedef interface IElement IElement;
#endif 	/* __IElement_FWD_DEFINED__ */


#ifndef __IVariable_FWD_DEFINED__
#define __IVariable_FWD_DEFINED__
typedef interface IVariable IVariable;
#endif 	/* __IVariable_FWD_DEFINED__ */


#ifndef __IVariableNode_FWD_DEFINED__
#define __IVariableNode_FWD_DEFINED__
typedef interface IVariableNode IVariableNode;
#endif 	/* __IVariableNode_FWD_DEFINED__ */


#ifndef __ISubstitution_FWD_DEFINED__
#define __ISubstitution_FWD_DEFINED__
typedef interface ISubstitution ISubstitution;
#endif 	/* __ISubstitution_FWD_DEFINED__ */


#ifndef __IExpression_FWD_DEFINED__
#define __IExpression_FWD_DEFINED__
typedef interface IExpression IExpression;
#endif 	/* __IExpression_FWD_DEFINED__ */


#ifndef __IMemberElement_FWD_DEFINED__
#define __IMemberElement_FWD_DEFINED__
typedef interface IMemberElement IMemberElement;
#endif 	/* __IMemberElement_FWD_DEFINED__ */


#ifndef __IMemberAttribute_FWD_DEFINED__
#define __IMemberAttribute_FWD_DEFINED__
typedef interface IMemberAttribute IMemberAttribute;
#endif 	/* __IMemberAttribute_FWD_DEFINED__ */


#ifndef __IRefactoredSetting_FWD_DEFINED__
#define __IRefactoredSetting_FWD_DEFINED__
typedef interface IRefactoredSetting IRefactoredSetting;
#endif 	/* __IRefactoredSetting_FWD_DEFINED__ */


#ifndef __IValueSet_FWD_DEFINED__
#define __IValueSet_FWD_DEFINED__
typedef interface IValueSet IValueSet;
#endif 	/* __IValueSet_FWD_DEFINED__ */


#ifndef __IControlledSetting_FWD_DEFINED__
#define __IControlledSetting_FWD_DEFINED__
typedef interface IControlledSetting IControlledSetting;
#endif 	/* __IControlledSetting_FWD_DEFINED__ */


#ifndef __ISecurityDefinition_FWD_DEFINED__
#define __ISecurityDefinition_FWD_DEFINED__
typedef interface ISecurityDefinition ISecurityDefinition;
#endif 	/* __ISecurityDefinition_FWD_DEFINED__ */


#ifndef __ITransactionsItem_FWD_DEFINED__
#define __ITransactionsItem_FWD_DEFINED__
typedef interface ITransactionsItem ITransactionsItem;
#endif 	/* __ITransactionsItem_FWD_DEFINED__ */


#ifndef __IChangeRecordItem_FWD_DEFINED__
#define __IChangeRecordItem_FWD_DEFINED__
typedef interface IChangeRecordItem IChangeRecordItem;
#endif 	/* __IChangeRecordItem_FWD_DEFINED__ */


#ifndef __IItemSetEnumerator_FWD_DEFINED__
#define __IItemSetEnumerator_FWD_DEFINED__
typedef interface IItemSetEnumerator IItemSetEnumerator;
#endif 	/* __IItemSetEnumerator_FWD_DEFINED__ */


#ifndef __IItemFilter_FWD_DEFINED__
#define __IItemFilter_FWD_DEFINED__
typedef interface IItemFilter IItemFilter;
#endif 	/* __IItemFilter_FWD_DEFINED__ */


#ifndef __INamespaceIdentityDisp_FWD_DEFINED__
#define __INamespaceIdentityDisp_FWD_DEFINED__
typedef interface INamespaceIdentityDisp INamespaceIdentityDisp;
#endif 	/* __INamespaceIdentityDisp_FWD_DEFINED__ */


#ifndef __IItemEnumeratorDisp_FWD_DEFINED__
#define __IItemEnumeratorDisp_FWD_DEFINED__
typedef interface IItemEnumeratorDisp IItemEnumeratorDisp;
#endif 	/* __IItemEnumeratorDisp_FWD_DEFINED__ */


#ifndef __IItemCollectionDisp_FWD_DEFINED__
#define __IItemCollectionDisp_FWD_DEFINED__
typedef interface IItemCollectionDisp IItemCollectionDisp;
#endif 	/* __IItemCollectionDisp_FWD_DEFINED__ */


#ifndef __ISettingsEngineDisp_FWD_DEFINED__
#define __ISettingsEngineDisp_FWD_DEFINED__
typedef interface ISettingsEngineDisp ISettingsEngineDisp;
#endif 	/* __ISettingsEngineDisp_FWD_DEFINED__ */


#ifndef __IAdvancedSettingsEngineDisp_FWD_DEFINED__
#define __IAdvancedSettingsEngineDisp_FWD_DEFINED__
typedef interface IAdvancedSettingsEngineDisp IAdvancedSettingsEngineDisp;
#endif 	/* __IAdvancedSettingsEngineDisp_FWD_DEFINED__ */


#ifndef __IBaseItemDisp_FWD_DEFINED__
#define __IBaseItemDisp_FWD_DEFINED__
typedef interface IBaseItemDisp IBaseItemDisp;
#endif 	/* __IBaseItemDisp_FWD_DEFINED__ */


#ifndef __ISettingsNamespaceDisp_FWD_DEFINED__
#define __ISettingsNamespaceDisp_FWD_DEFINED__
typedef interface ISettingsNamespaceDisp ISettingsNamespaceDisp;
#endif 	/* __ISettingsNamespaceDisp_FWD_DEFINED__ */


#ifndef __ISettingsItemDisp_FWD_DEFINED__
#define __ISettingsItemDisp_FWD_DEFINED__
typedef interface ISettingsItemDisp ISettingsItemDisp;
#endif 	/* __ISettingsItemDisp_FWD_DEFINED__ */


#ifndef __ISettingsAttributeDisp_FWD_DEFINED__
#define __ISettingsAttributeDisp_FWD_DEFINED__
typedef interface ISettingsAttributeDisp ISettingsAttributeDisp;
#endif 	/* __ISettingsAttributeDisp_FWD_DEFINED__ */


#ifndef __IMetadataItemDisp_FWD_DEFINED__
#define __IMetadataItemDisp_FWD_DEFINED__
typedef interface IMetadataItemDisp IMetadataItemDisp;
#endif 	/* __IMetadataItemDisp_FWD_DEFINED__ */


#ifndef __IMetadataDisp_FWD_DEFINED__
#define __IMetadataDisp_FWD_DEFINED__
typedef interface IMetadataDisp IMetadataDisp;
#endif 	/* __IMetadataDisp_FWD_DEFINED__ */


#ifndef __IAssertionDisp_FWD_DEFINED__
#define __IAssertionDisp_FWD_DEFINED__
typedef interface IAssertionDisp IAssertionDisp;
#endif 	/* __IAssertionDisp_FWD_DEFINED__ */


#ifndef __IComplexTypeDisp_FWD_DEFINED__
#define __IComplexTypeDisp_FWD_DEFINED__
typedef interface IComplexTypeDisp IComplexTypeDisp;
#endif 	/* __IComplexTypeDisp_FWD_DEFINED__ */


#ifndef __ISimpleTypeDisp_FWD_DEFINED__
#define __ISimpleTypeDisp_FWD_DEFINED__
typedef interface ISimpleTypeDisp ISimpleTypeDisp;
#endif 	/* __ISimpleTypeDisp_FWD_DEFINED__ */


#ifndef __ICustomHandlerDisp_FWD_DEFINED__
#define __ICustomHandlerDisp_FWD_DEFINED__
typedef interface ICustomHandlerDisp ICustomHandlerDisp;
#endif 	/* __ICustomHandlerDisp_FWD_DEFINED__ */


#ifndef __IElementDisp_FWD_DEFINED__
#define __IElementDisp_FWD_DEFINED__
typedef interface IElementDisp IElementDisp;
#endif 	/* __IElementDisp_FWD_DEFINED__ */


#ifndef __IVariableDisp_FWD_DEFINED__
#define __IVariableDisp_FWD_DEFINED__
typedef interface IVariableDisp IVariableDisp;
#endif 	/* __IVariableDisp_FWD_DEFINED__ */


#ifndef __IVariableNodeDisp_FWD_DEFINED__
#define __IVariableNodeDisp_FWD_DEFINED__
typedef interface IVariableNodeDisp IVariableNodeDisp;
#endif 	/* __IVariableNodeDisp_FWD_DEFINED__ */


#ifndef __ISubstitutionDisp_FWD_DEFINED__
#define __ISubstitutionDisp_FWD_DEFINED__
typedef interface ISubstitutionDisp ISubstitutionDisp;
#endif 	/* __ISubstitutionDisp_FWD_DEFINED__ */


#ifndef __IExpressionDisp_FWD_DEFINED__
#define __IExpressionDisp_FWD_DEFINED__
typedef interface IExpressionDisp IExpressionDisp;
#endif 	/* __IExpressionDisp_FWD_DEFINED__ */


#ifndef __IMemberElementDisp_FWD_DEFINED__
#define __IMemberElementDisp_FWD_DEFINED__
typedef interface IMemberElementDisp IMemberElementDisp;
#endif 	/* __IMemberElementDisp_FWD_DEFINED__ */


#ifndef __IMemberAttributeDisp_FWD_DEFINED__
#define __IMemberAttributeDisp_FWD_DEFINED__
typedef interface IMemberAttributeDisp IMemberAttributeDisp;
#endif 	/* __IMemberAttributeDisp_FWD_DEFINED__ */


#ifndef __IRefactoredSettingDisp_FWD_DEFINED__
#define __IRefactoredSettingDisp_FWD_DEFINED__
typedef interface IRefactoredSettingDisp IRefactoredSettingDisp;
#endif 	/* __IRefactoredSettingDisp_FWD_DEFINED__ */


#ifndef __IValueSetDisp_FWD_DEFINED__
#define __IValueSetDisp_FWD_DEFINED__
typedef interface IValueSetDisp IValueSetDisp;
#endif 	/* __IValueSetDisp_FWD_DEFINED__ */


#ifndef __IControlledSettingDisp_FWD_DEFINED__
#define __IControlledSettingDisp_FWD_DEFINED__
typedef interface IControlledSettingDisp IControlledSettingDisp;
#endif 	/* __IControlledSettingDisp_FWD_DEFINED__ */


#ifndef __ITransactionsItemDisp_FWD_DEFINED__
#define __ITransactionsItemDisp_FWD_DEFINED__
typedef interface ITransactionsItemDisp ITransactionsItemDisp;
#endif 	/* __ITransactionsItemDisp_FWD_DEFINED__ */


#ifndef __IChangeRecordItemDisp_FWD_DEFINED__
#define __IChangeRecordItemDisp_FWD_DEFINED__
typedef interface IChangeRecordItemDisp IChangeRecordItemDisp;
#endif 	/* __IChangeRecordItemDisp_FWD_DEFINED__ */


#ifndef __ISecurityDefinitionDisp_FWD_DEFINED__
#define __ISecurityDefinitionDisp_FWD_DEFINED__
typedef interface ISecurityDefinitionDisp ISecurityDefinitionDisp;
#endif 	/* __ISecurityDefinitionDisp_FWD_DEFINED__ */


#ifndef __IItemNotify_FWD_DEFINED__
#define __IItemNotify_FWD_DEFINED__
typedef interface IItemNotify IItemNotify;
#endif 	/* __IItemNotify_FWD_DEFINED__ */


#ifndef __IItemChangeEnumerator_FWD_DEFINED__
#define __IItemChangeEnumerator_FWD_DEFINED__
typedef interface IItemChangeEnumerator IItemChangeEnumerator;
#endif 	/* __IItemChangeEnumerator_FWD_DEFINED__ */


#ifndef __IItemChange_FWD_DEFINED__
#define __IItemChange_FWD_DEFINED__
typedef interface IItemChange IItemChange;
#endif 	/* __IItemChange_FWD_DEFINED__ */


#ifndef __INamespaceGroupEnumerator_FWD_DEFINED__
#define __INamespaceGroupEnumerator_FWD_DEFINED__
typedef interface INamespaceGroupEnumerator INamespaceGroupEnumerator;
#endif 	/* __INamespaceGroupEnumerator_FWD_DEFINED__ */


#ifndef __INamespaceGroup_FWD_DEFINED__
#define __INamespaceGroup_FWD_DEFINED__
typedef interface INamespaceGroup INamespaceGroup;
#endif 	/* __INamespaceGroup_FWD_DEFINED__ */


#ifndef __INamespaceGroupDisp_FWD_DEFINED__
#define __INamespaceGroupDisp_FWD_DEFINED__
typedef interface INamespaceGroupDisp INamespaceGroupDisp;
#endif 	/* __INamespaceGroupDisp_FWD_DEFINED__ */


#ifndef __SettingsEngine_FWD_DEFINED__
#define __SettingsEngine_FWD_DEFINED__

#ifdef __cplusplus
typedef class SettingsEngine SettingsEngine;
#else
typedef struct SettingsEngine SettingsEngine;
#endif /* __cplusplus */

#endif 	/* __SettingsEngine_FWD_DEFINED__ */


#ifndef __AdvancedSettingsEngine_FWD_DEFINED__
#define __AdvancedSettingsEngine_FWD_DEFINED__

#ifdef __cplusplus
typedef class AdvancedSettingsEngine AdvancedSettingsEngine;
#else
typedef struct AdvancedSettingsEngine AdvancedSettingsEngine;
#endif /* __cplusplus */

#endif 	/* __AdvancedSettingsEngine_FWD_DEFINED__ */


#ifndef __SettingsEngineDisp_FWD_DEFINED__
#define __SettingsEngineDisp_FWD_DEFINED__

#ifdef __cplusplus
typedef class SettingsEngineDisp SettingsEngineDisp;
#else
typedef struct SettingsEngineDisp SettingsEngineDisp;
#endif /* __cplusplus */

#endif 	/* __SettingsEngineDisp_FWD_DEFINED__ */


#ifndef __AdvancedSettingsEngineDisp_FWD_DEFINED__
#define __AdvancedSettingsEngineDisp_FWD_DEFINED__

#ifdef __cplusplus
typedef class AdvancedSettingsEngineDisp AdvancedSettingsEngineDisp;
#else
typedef struct AdvancedSettingsEngineDisp AdvancedSettingsEngineDisp;
#endif /* __cplusplus */

#endif 	/* __AdvancedSettingsEngineDisp_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "wcmhandler.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_wcmconfig_0000 */
/* [local] */ 

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0001
    {	SharedEnumeration	= 1,
	UserEnumeration	= 2,
	AllEnumeration	= ( SharedEnumeration | UserEnumeration ) 
    } 	WcmNamespaceEnumerationFlags;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0002
    {	DefaultNamespaceView	= 0,
	LegacyNamespaceView	= 1
    } 	WcmNamespaceOption;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0003
    {	SettingChangeMode	= 1,
	MetadataChangeMode	= 2,
	RemoteSyncMode	= 3,
	LegacySyncMode	= 4,
	CompilationMode	= 5,
	AuthoringMode	= 6
    } 	WcmNamespaceMode;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0004
    {	InstallOnly	= 1,
	InstallWithUpgrade	= 2
    } 	WcmInstallMode;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0005
    {	UnknownValueType	= 0,
	NoValue	= 0x1,
	NoLimit	= 0x2,
	GroupSet	= 0x4,
	SingleValueEqual	= 0x10,
	SingleValueGreater	= 0x20,
	SingleValueGreaterOrEqual	= 0x30,
	SingleValueLess	= 0x40,
	SingleValueLessOrEqual	= 0x50,
	SingleValueNotEqual	= 0x60,
	RangeExclude	= 0x100,
	RangeLeftExcludeRightInclude	= 0x300,
	RangeLeftIncludeRightExclude	= 0x500,
	RangeInclude	= 0x700
    } 	WcmAllowedValueType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0006
    {	NotSilenced	= 0,
	ImplicitSilenced	= 1,
	ExplicitSilenced	= 2,
	ImplicitExplicitSilenced	= 3
    } 	WcmSilenceCause;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0007
    {	DeveloperAssertion	= 0x1,
	OperationalAssertion	= 0x8,
	OperationalAdministratorAssertion	= 0xa,
	OperationalLocalUserAssertion	= 0xc
    } 	WcmAssertionType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0008
    {	MergeBothStores	= 0,
	OverwriteManagedStore	= 1,
	OverwriteLegacyStore	= 2,
	SyncDefaultValues	= 4,
	UninstallLegacyStore	= 8
    } 	WcmSynchronizeOption;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0009
    {	UpdateAlways	= 0x10000,
	NoExpansion	= 0x20000,
	NoDefaultValue	= 0x40000,
	NoInheritedValue	= 0x80000,
	EncodedPath	= 0x100000,
	DefaultValueOnly	= 0x200000
    } 	WcmProcessingOptions;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0010
    {	ValueNotExisting	= 0,
	ValueDeleted	= 1,
	ValueNull	= 2,
	ValueIsValid	= 3,
	ValueNotValid	= 4
    } 	WcmValueStatus;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0011
    {	DeltaArchive	= 0,
	FullArchive	= 1,
	RestoreDeltaArchive	= 2,
	RestoreFullArchive	= 3
    } 	WcmArchiveOption;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0012
    {	DefaultSave	= 0,
	ReloadSave	= 1,
	ForceSave	= 2,
	TrySave	= 3
    } 	WcmSaveOption;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0013
    {	DefaultReload	= 0
    } 	WcmReloadOption;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0014
    {	ResetSelf	= 0,
	ResetAll	= 1
    } 	WcmResetOption;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0015
    {	RevertIndividual	= 0,
	RevertUntil	= 1
    } 	WcmRevertOption;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0016
    {	ValidateSelf	= 0,
	ValidateAll	= 1
    } 	WcmValidateOption;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0017
    {	ImportManifestFormat	= 0x1,
	ImportMetadata	= 0x2,
	ImportSettings	= 0x4,
	ImportTrustInfo	= 0x8,
	ImportByUpgrade	= 0x10
    } 	WcmImportOptions;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0018
    {	ExportManifestFormat	= 0x1,
	ExportMetadata	= 0x2,
	ExportSettings	= 0x4,
	ExportTransactions	= 0x8,
	ExportTrustInfo	= 0x10,
	ExportAssertions	= 0x20
    } 	WcmExportOptions;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0019
    {	FilterOnItem	= 0,
	FilterOnAttribute	= 1
    } 	WcmFilterType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0020
    {	UnknownItem	= 0,
	SettingsNamespace	= 1,
	Metadata	= 1000,
	ComplexTypes	= 1001,
	ComplexType	= 1002,
	Member	= 1003,
	AttributeMember	= 1004,
	SimpleTypes	= 1005,
	SimpleType	= 1006,
	Restriction	= 1007,
	RestrictionFacet	= 1008,
	Elements	= 1009,
	Element	= 1010,
	CustomHandlers	= 1011,
	CustomHandler	= 1012,
	Expressions	= 1013,
	Expression	= 1014,
	Substitutions	= 1015,
	Substitution	= 1016,
	Assertions	= 1017,
	Assertion	= 1018,
	RefactoredSettings	= 1019,
	RefactoredSetting	= 1020,
	ValueSet	= 1021,
	ControlledSetting	= 1022,
	SecurityDefinitions	= 1023,
	SecurityDefinition	= 1024,
	Variables	= 1025,
	Variable	= 1026,
	VariableNode	= 1027,
	Settings	= 2000,
	ScalarSetting	= 2001,
	ComplexSetting	= 2002,
	List	= 2003,
	Transactions	= 3000,
	Transaction	= 3001,
	ChangeRecord	= 3002,
	Attribute	= 4000,
	HostedNamespaces	= 5000,
	HostedNamespace	= 5001,
	UnknownMetadata	= 9001
    } 	WcmNodeType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0021
    {	WcmAttribute	= 0,
	XsdAttribute	= 1,
	UnknownAttribute	= 2,
	XmlAttribute	= 3
    } 	WcmAttributeType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0022
    {	NotifyOptionSubtree	= 0,
	NotifyOptionNodeOnly	= 1,
	NotifyOptionIgnoreOwnChange	= 2
    } 	WcmNotifyOptionsFlags;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0023
    {	NotifyFilterAllChanges	= 0,
	NotifyFilterSettingChanges	= 1,
	NotifyFilterMetadataChanges	= 2,
	NotifyFilterAssertionChanges	= 3,
	NotifyFilterRoamableItemChanges	= 4
    } 	WcmNotifyFilterFlags;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0024
    {	NotificationTypeCallBack	= 0,
	NotificationTypeEvent	= 1,
	NotificationTypeWindowMessage	= 2
    } 	WcmNotificationType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0025
    {	UnknownErrorCode	= 0,
	UnknownFacilityCode	= 1,
	InternalError	= 2,
	StateNodeNotFound	= 3,
	StateNodeNotAllowed	= 4,
	AttributeNotFound	= 5,
	AttributeNotAllowed	= 6,
	InvalidValue	= 7,
	InvalidValueFormat	= 8,
	TypeNotSpecified	= 9,
	InvalidDataType	= 10,
	NotPositioned	= 11,
	ReadonlyItem	= 12,
	InvalidPath	= 13,
	WrongEscapeString	= 14,
	InvalidVersionFormat	= 15,
	InvalidLanguageFormat	= 16,
	KeyNotChangeable	= 17,
	ExpressionNotFound	= 18,
	SubstitutionNotFound	= 19,
	UserAlreadyRegistered	= 20,
	UserNotFound	= 21,
	NamespaceNotFound	= 22,
	NamespaceAlreadyRegistered	= 23,
	StoreCorrupted	= 24,
	InvalidExpressionSyntax	= 25,
	NotificationNotFound	= 26,
	ConflictingAssertion	= 27,
	AssertionFailed	= 28,
	DuplicateName	= 29,
	InvalidKey	= 30,
	InvalidStream	= 31,
	HandlerNotFound	= 32,
	InvalidHandlerSyntax	= 33,
	ValidationFailed	= 34,
	CompilationFailed	= 35,
	RestrictionFailed	= 36,
	CyclicReferenceFound	= 37,
	LegacySettingWarning	= 39,
	UnknownResult	= 40,
	Windows_CE_Error	= 41,
	WindowsError	= 42,
	URTError	= 43,
	UMIError	= 44,
	SXSError	= 45,
	StorageError	= 46,
	SCardError	= 47,
	SetupAPIError	= 48,
	SecurityError	= 49,
	RPCError	= 50,
	Win32Error	= 51,
	Control	= 52,
	NULLError	= 53,
	MetaDirectoryError	= 54,
	MSMQError	= 55,
	MediaServerError	= 56,
	InternetError	= 57,
	ITFError	= 58,
	HTTPError	= 59,
	DPlayError	= 60,
	DispatchError	= 61,
	ConfigurationError	= 62,
	COMPlusError	= 63,
	CERTError	= 64,
	BackgroundCopyError	= 65,
	ACSError	= 66,
	AAFError	= 67
    } 	WcmResultError;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0026
    {	Informational	= 0,
	Warning	= 1,
	Error	= 2
    } 	WcmResultSeverity;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_wcmconfig_0000_0027
    {	ReadOnlyAccess	= 1,
	ReadWriteAccess	= 2
    } 	WcmNamespaceAccess;


typedef struct tag_WcmNotificationInfo
    {
    WcmNotificationType NotificationType;
    /* [switch_type] */ union 
        {
        IItemNotify *pNotify;
        DWORD_PTR hEvent;
        struct 
            {
            DWORD_PTR hWnd;
            UINT Msg;
            } 	wMsg;
        } 	Notification;
    } 	WcmNotificationInfo;

typedef DWORD_PTR WcmNotificationHandle;

typedef struct tag_WcmItemFilter
    {
    WcmFilterType FilterType;
    WCHAR *Name;
    WCHAR *Value;
    UINT ValueType;
    WcmProcessingOptions Options;
    } 	WcmItemFilter;




























































extern RPC_IF_HANDLE __MIDL_itf_wcmconfig_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wcmconfig_0000_v0_0_s_ifspec;

#ifndef __IItemEnumerator_INTERFACE_DEFINED__
#define __IItemEnumerator_INTERFACE_DEFINED__

/* interface IItemEnumerator */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IItemEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C718-3BA4-11D7-BF56-000874CD1BAE")
    IItemEnumerator : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Current( 
            /* [retval][out] */ VARIANT *Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE MoveNext( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemEnumerator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemEnumerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Current )( 
            IItemEnumerator * This,
            /* [retval][out] */ VARIANT *Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            IItemEnumerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IItemEnumerator * This);
        
        END_INTERFACE
    } IItemEnumeratorVtbl;

    interface IItemEnumerator
    {
        CONST_VTBL struct IItemEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemEnumerator_Current(This,Item)	\
    ( (This)->lpVtbl -> Current(This,Item) ) 

#define IItemEnumerator_MoveNext(This)	\
    ( (This)->lpVtbl -> MoveNext(This) ) 

#define IItemEnumerator_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemEnumerator_Current_Proxy( 
    IItemEnumerator * This,
    /* [retval][out] */ VARIANT *Item);


void __RPC_STUB IItemEnumerator_Current_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemEnumerator_MoveNext_Proxy( 
    IItemEnumerator * This);


void __RPC_STUB IItemEnumerator_MoveNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemEnumerator_Reset_Proxy( 
    IItemEnumerator * This);


void __RPC_STUB IItemEnumerator_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemEnumerator_INTERFACE_DEFINED__ */


#ifndef __IItemCollection_INTERFACE_DEFINED__
#define __IItemCollection_INTERFACE_DEFINED__

/* interface IItemCollection */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IItemCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C717-3BA4-11D7-BF56-000874CD1BAE")
    IItemCollection : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE IsReadOnly( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Count( 
            /* [retval][out] */ LONG *Count) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetItem( 
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ IBaseItem **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IBaseItem *Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ IBaseItem **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Contains( 
            /* [in] */ const VARIANT *Key) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ const VARIANT *Key) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ IItemEnumerator **Enumerator) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ const VARIANT *Key,
            /* [in] */ const VARIANT *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ const VARIANT *Key,
            /* [in] */ const VARIANT *Target,
            /* [in] */ BOOL Position) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Compare( 
            /* [in] */ const VARIANT *Item1,
            /* [in] */ const VARIANT *Item2,
            /* [retval][out] */ LONG *Position) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateWithKeys( 
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues,
            /* [retval][out] */ IBaseItem **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ContainsWithKeys( 
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveWithKeys( 
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetItemWithKeys( 
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues,
            /* [retval][out] */ IBaseItem **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemCollection * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IItemCollection * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Count )( 
            IItemCollection * This,
            /* [retval][out] */ LONG *Count);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItem )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IItemCollection * This,
            /* [in] */ IBaseItem *Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Contains )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *Key);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *Key);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            IItemCollection * This,
            /* [retval][out] */ IItemEnumerator **Enumerator);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *Key,
            /* [in] */ const VARIANT *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *Key,
            /* [in] */ const VARIANT *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Compare )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *Item1,
            /* [in] */ const VARIANT *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateWithKeys )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ContainsWithKeys )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveWithKeys )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemWithKeys )( 
            IItemCollection * This,
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues,
            /* [retval][out] */ IBaseItem **Item);
        
        END_INTERFACE
    } IItemCollectionVtbl;

    interface IItemCollection
    {
        CONST_VTBL struct IItemCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemCollection_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IItemCollection_Count(This,Count)	\
    ( (This)->lpVtbl -> Count(This,Count) ) 

#define IItemCollection_GetItem(This,Key,Item)	\
    ( (This)->lpVtbl -> GetItem(This,Key,Item) ) 

#define IItemCollection_Add(This,Item)	\
    ( (This)->lpVtbl -> Add(This,Item) ) 

#define IItemCollection_Create(This,Key,Item)	\
    ( (This)->lpVtbl -> Create(This,Key,Item) ) 

#define IItemCollection_Contains(This,Key)	\
    ( (This)->lpVtbl -> Contains(This,Key) ) 

#define IItemCollection_Remove(This,Key)	\
    ( (This)->lpVtbl -> Remove(This,Key) ) 

#define IItemCollection_GetEnumerator(This,Enumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,Enumerator) ) 

#define IItemCollection_Insert(This,Key,Target,Position,Item)	\
    ( (This)->lpVtbl -> Insert(This,Key,Target,Position,Item) ) 

#define IItemCollection_Move(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> Move(This,Key,Target,Position) ) 

#define IItemCollection_Compare(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> Compare(This,Item1,Item2,Position) ) 

#define IItemCollection_CreateWithKeys(This,baseName,keyNames,keyValues,Item)	\
    ( (This)->lpVtbl -> CreateWithKeys(This,baseName,keyNames,keyValues,Item) ) 

#define IItemCollection_ContainsWithKeys(This,baseName,keyNames,keyValues)	\
    ( (This)->lpVtbl -> ContainsWithKeys(This,baseName,keyNames,keyValues) ) 

#define IItemCollection_RemoveWithKeys(This,baseName,keyNames,keyValues)	\
    ( (This)->lpVtbl -> RemoveWithKeys(This,baseName,keyNames,keyValues) ) 

#define IItemCollection_GetItemWithKeys(This,baseName,keyNames,keyValues,Item)	\
    ( (This)->lpVtbl -> GetItemWithKeys(This,baseName,keyNames,keyValues,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_IsReadOnly_Proxy( 
    IItemCollection * This);


void __RPC_STUB IItemCollection_IsReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_Count_Proxy( 
    IItemCollection * This,
    /* [retval][out] */ LONG *Count);


void __RPC_STUB IItemCollection_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_GetItem_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *Key,
    /* [retval][out] */ IBaseItem **Item);


void __RPC_STUB IItemCollection_GetItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_Add_Proxy( 
    IItemCollection * This,
    /* [in] */ IBaseItem *Item);


void __RPC_STUB IItemCollection_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_Create_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *Key,
    /* [retval][out] */ IBaseItem **Item);


void __RPC_STUB IItemCollection_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_Contains_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *Key);


void __RPC_STUB IItemCollection_Contains_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_Remove_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *Key);


void __RPC_STUB IItemCollection_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_GetEnumerator_Proxy( 
    IItemCollection * This,
    /* [retval][out] */ IItemEnumerator **Enumerator);


void __RPC_STUB IItemCollection_GetEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_Insert_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *Key,
    /* [in] */ const VARIANT *Target,
    /* [in] */ BOOL Position,
    /* [retval][out] */ IBaseItem **Item);


void __RPC_STUB IItemCollection_Insert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_Move_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *Key,
    /* [in] */ const VARIANT *Target,
    /* [in] */ BOOL Position);


void __RPC_STUB IItemCollection_Move_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_Compare_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *Item1,
    /* [in] */ const VARIANT *Item2,
    /* [retval][out] */ LONG *Position);


void __RPC_STUB IItemCollection_Compare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_CreateWithKeys_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *baseName,
    /* [in] */ const VARIANT *keyNames,
    /* [in] */ const VARIANT *keyValues,
    /* [retval][out] */ IBaseItem **Item);


void __RPC_STUB IItemCollection_CreateWithKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_ContainsWithKeys_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *baseName,
    /* [in] */ const VARIANT *keyNames,
    /* [in] */ const VARIANT *keyValues);


void __RPC_STUB IItemCollection_ContainsWithKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_RemoveWithKeys_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *baseName,
    /* [in] */ const VARIANT *keyNames,
    /* [in] */ const VARIANT *keyValues);


void __RPC_STUB IItemCollection_RemoveWithKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemCollection_GetItemWithKeys_Proxy( 
    IItemCollection * This,
    /* [in] */ const VARIANT *baseName,
    /* [in] */ const VARIANT *keyNames,
    /* [in] */ const VARIANT *keyValues,
    /* [retval][out] */ IBaseItem **Item);


void __RPC_STUB IItemCollection_GetItemWithKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemCollection_INTERFACE_DEFINED__ */


#ifndef __INamespaceIdentity_INTERFACE_DEFINED__
#define __INamespaceIdentity_INTERFACE_DEFINED__

/* interface INamespaceIdentity */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_INamespaceIdentity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C719-3BA4-11D7-BF56-000874CD1BAE")
    INamespaceIdentity : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Initialize( 
            /* [string][in] */ const WCHAR *Name,
            /* [string][in] */ const WCHAR *Version,
            /* [string][in] */ const WCHAR *Language,
            /* [string][in] */ const WCHAR *Architecture,
            /* [string][in] */ const WCHAR *Token) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetUri( 
            /* [retval][out] */ BSTR *Uri) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetUri( 
            /* [string][in] */ const WCHAR *Uri) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetName( 
            /* [string][in] */ const WCHAR *Name) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetVersion( 
            /* [retval][out] */ BSTR *Version) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetVersion( 
            /* [string][in] */ const WCHAR *Version) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetLanguage( 
            /* [retval][out] */ BSTR *Language) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetLanguage( 
            /* [string][in] */ const WCHAR *Language) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetProcessorArchitecture( 
            /* [retval][out] */ BSTR *Architecture) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetProcessorArchitecture( 
            /* [string][in] */ const WCHAR *Architecture) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetPublicKeyToken( 
            /* [retval][out] */ BSTR *Token) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetPublicKeyToken( 
            /* [string][in] */ const WCHAR *Token) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetDeploymentIdentity( 
            /* [retval][out] */ BSTR *DeploymentIdentity) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetDeploymentIdentity( 
            /* [string][in] */ const WCHAR *DeploymentIdentity) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetContext( 
            /* [retval][out] */ WcmNamespaceContext *Context) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetContext( 
            /* [in] */ WcmNamespaceContext Context) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INamespaceIdentityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INamespaceIdentity * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INamespaceIdentity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INamespaceIdentity * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            INamespaceIdentity * This,
            /* [string][in] */ const WCHAR *Name,
            /* [string][in] */ const WCHAR *Version,
            /* [string][in] */ const WCHAR *Language,
            /* [string][in] */ const WCHAR *Architecture,
            /* [string][in] */ const WCHAR *Token);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetUri )( 
            INamespaceIdentity * This,
            /* [retval][out] */ BSTR *Uri);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetUri )( 
            INamespaceIdentity * This,
            /* [string][in] */ const WCHAR *Uri);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            INamespaceIdentity * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            INamespaceIdentity * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            INamespaceIdentity * This,
            /* [retval][out] */ BSTR *Version);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetVersion )( 
            INamespaceIdentity * This,
            /* [string][in] */ const WCHAR *Version);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            INamespaceIdentity * This,
            /* [retval][out] */ BSTR *Language);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetLanguage )( 
            INamespaceIdentity * This,
            /* [string][in] */ const WCHAR *Language);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetProcessorArchitecture )( 
            INamespaceIdentity * This,
            /* [retval][out] */ BSTR *Architecture);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetProcessorArchitecture )( 
            INamespaceIdentity * This,
            /* [string][in] */ const WCHAR *Architecture);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPublicKeyToken )( 
            INamespaceIdentity * This,
            /* [retval][out] */ BSTR *Token);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetPublicKeyToken )( 
            INamespaceIdentity * This,
            /* [string][in] */ const WCHAR *Token);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDeploymentIdentity )( 
            INamespaceIdentity * This,
            /* [retval][out] */ BSTR *DeploymentIdentity);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDeploymentIdentity )( 
            INamespaceIdentity * This,
            /* [string][in] */ const WCHAR *DeploymentIdentity);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetContext )( 
            INamespaceIdentity * This,
            /* [retval][out] */ WcmNamespaceContext *Context);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetContext )( 
            INamespaceIdentity * This,
            /* [in] */ WcmNamespaceContext Context);
        
        END_INTERFACE
    } INamespaceIdentityVtbl;

    interface INamespaceIdentity
    {
        CONST_VTBL struct INamespaceIdentityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INamespaceIdentity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INamespaceIdentity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INamespaceIdentity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INamespaceIdentity_Initialize(This,Name,Version,Language,Architecture,Token)	\
    ( (This)->lpVtbl -> Initialize(This,Name,Version,Language,Architecture,Token) ) 

#define INamespaceIdentity_GetUri(This,Uri)	\
    ( (This)->lpVtbl -> GetUri(This,Uri) ) 

#define INamespaceIdentity_SetUri(This,Uri)	\
    ( (This)->lpVtbl -> SetUri(This,Uri) ) 

#define INamespaceIdentity_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define INamespaceIdentity_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define INamespaceIdentity_GetVersion(This,Version)	\
    ( (This)->lpVtbl -> GetVersion(This,Version) ) 

#define INamespaceIdentity_SetVersion(This,Version)	\
    ( (This)->lpVtbl -> SetVersion(This,Version) ) 

#define INamespaceIdentity_GetLanguage(This,Language)	\
    ( (This)->lpVtbl -> GetLanguage(This,Language) ) 

#define INamespaceIdentity_SetLanguage(This,Language)	\
    ( (This)->lpVtbl -> SetLanguage(This,Language) ) 

#define INamespaceIdentity_GetProcessorArchitecture(This,Architecture)	\
    ( (This)->lpVtbl -> GetProcessorArchitecture(This,Architecture) ) 

#define INamespaceIdentity_SetProcessorArchitecture(This,Architecture)	\
    ( (This)->lpVtbl -> SetProcessorArchitecture(This,Architecture) ) 

#define INamespaceIdentity_GetPublicKeyToken(This,Token)	\
    ( (This)->lpVtbl -> GetPublicKeyToken(This,Token) ) 

#define INamespaceIdentity_SetPublicKeyToken(This,Token)	\
    ( (This)->lpVtbl -> SetPublicKeyToken(This,Token) ) 

#define INamespaceIdentity_GetDeploymentIdentity(This,DeploymentIdentity)	\
    ( (This)->lpVtbl -> GetDeploymentIdentity(This,DeploymentIdentity) ) 

#define INamespaceIdentity_SetDeploymentIdentity(This,DeploymentIdentity)	\
    ( (This)->lpVtbl -> SetDeploymentIdentity(This,DeploymentIdentity) ) 

#define INamespaceIdentity_GetContext(This,Context)	\
    ( (This)->lpVtbl -> GetContext(This,Context) ) 

#define INamespaceIdentity_SetContext(This,Context)	\
    ( (This)->lpVtbl -> SetContext(This,Context) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_Initialize_Proxy( 
    INamespaceIdentity * This,
    /* [string][in] */ const WCHAR *Name,
    /* [string][in] */ const WCHAR *Version,
    /* [string][in] */ const WCHAR *Language,
    /* [string][in] */ const WCHAR *Architecture,
    /* [string][in] */ const WCHAR *Token);


void __RPC_STUB INamespaceIdentity_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_GetUri_Proxy( 
    INamespaceIdentity * This,
    /* [retval][out] */ BSTR *Uri);


void __RPC_STUB INamespaceIdentity_GetUri_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_SetUri_Proxy( 
    INamespaceIdentity * This,
    /* [string][in] */ const WCHAR *Uri);


void __RPC_STUB INamespaceIdentity_SetUri_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_GetName_Proxy( 
    INamespaceIdentity * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB INamespaceIdentity_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_SetName_Proxy( 
    INamespaceIdentity * This,
    /* [string][in] */ const WCHAR *Name);


void __RPC_STUB INamespaceIdentity_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_GetVersion_Proxy( 
    INamespaceIdentity * This,
    /* [retval][out] */ BSTR *Version);


void __RPC_STUB INamespaceIdentity_GetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_SetVersion_Proxy( 
    INamespaceIdentity * This,
    /* [string][in] */ const WCHAR *Version);


void __RPC_STUB INamespaceIdentity_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_GetLanguage_Proxy( 
    INamespaceIdentity * This,
    /* [retval][out] */ BSTR *Language);


void __RPC_STUB INamespaceIdentity_GetLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_SetLanguage_Proxy( 
    INamespaceIdentity * This,
    /* [string][in] */ const WCHAR *Language);


void __RPC_STUB INamespaceIdentity_SetLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_GetProcessorArchitecture_Proxy( 
    INamespaceIdentity * This,
    /* [retval][out] */ BSTR *Architecture);


void __RPC_STUB INamespaceIdentity_GetProcessorArchitecture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_SetProcessorArchitecture_Proxy( 
    INamespaceIdentity * This,
    /* [string][in] */ const WCHAR *Architecture);


void __RPC_STUB INamespaceIdentity_SetProcessorArchitecture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_GetPublicKeyToken_Proxy( 
    INamespaceIdentity * This,
    /* [retval][out] */ BSTR *Token);


void __RPC_STUB INamespaceIdentity_GetPublicKeyToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_SetPublicKeyToken_Proxy( 
    INamespaceIdentity * This,
    /* [string][in] */ const WCHAR *Token);


void __RPC_STUB INamespaceIdentity_SetPublicKeyToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_GetDeploymentIdentity_Proxy( 
    INamespaceIdentity * This,
    /* [retval][out] */ BSTR *DeploymentIdentity);


void __RPC_STUB INamespaceIdentity_GetDeploymentIdentity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_SetDeploymentIdentity_Proxy( 
    INamespaceIdentity * This,
    /* [string][in] */ const WCHAR *DeploymentIdentity);


void __RPC_STUB INamespaceIdentity_SetDeploymentIdentity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_GetContext_Proxy( 
    INamespaceIdentity * This,
    /* [retval][out] */ WcmNamespaceContext *Context);


void __RPC_STUB INamespaceIdentity_GetContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceIdentity_SetContext_Proxy( 
    INamespaceIdentity * This,
    /* [in] */ WcmNamespaceContext Context);


void __RPC_STUB INamespaceIdentity_SetContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INamespaceIdentity_INTERFACE_DEFINED__ */


#ifndef __ITargetInfo_INTERFACE_DEFINED__
#define __ITargetInfo_INTERFACE_DEFINED__

/* interface ITargetInfo */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ITargetInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C737-3BA4-11D7-BF56-000874CD1BAE")
    ITargetInfo : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [string][in] */ const WCHAR *Property,
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [string][in] */ const WCHAR *Property,
            /* [string][in] */ const WCHAR *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ IItemEnumerator **Enumerator) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ExpandTarget( 
            /* [string][in] */ const WCHAR *Location,
            /* [retval][out] */ BSTR *ExpandedLocation) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ExpandTargetPath( 
            /* [string][in] */ const WCHAR *Location,
            /* [retval][out] */ BSTR *ExpandedLocation) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetModulePath( 
            /* [string][in] */ const WCHAR *Module,
            /* [string][in] */ const WCHAR *Path) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE LoadModule( 
            /* [string][in] */ const WCHAR *Module,
            /* [retval][out] */ DWORD_PTR *ModuleHandle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITargetInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITargetInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITargetInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITargetInfo * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            ITargetInfo * This,
            /* [string][in] */ const WCHAR *Property,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            ITargetInfo * This,
            /* [string][in] */ const WCHAR *Property,
            /* [string][in] */ const WCHAR *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            ITargetInfo * This,
            /* [retval][out] */ IItemEnumerator **Enumerator);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ExpandTarget )( 
            ITargetInfo * This,
            /* [string][in] */ const WCHAR *Location,
            /* [retval][out] */ BSTR *ExpandedLocation);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ExpandTargetPath )( 
            ITargetInfo * This,
            /* [string][in] */ const WCHAR *Location,
            /* [retval][out] */ BSTR *ExpandedLocation);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetModulePath )( 
            ITargetInfo * This,
            /* [string][in] */ const WCHAR *Module,
            /* [string][in] */ const WCHAR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *LoadModule )( 
            ITargetInfo * This,
            /* [string][in] */ const WCHAR *Module,
            /* [retval][out] */ DWORD_PTR *ModuleHandle);
        
        END_INTERFACE
    } ITargetInfoVtbl;

    interface ITargetInfo
    {
        CONST_VTBL struct ITargetInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITargetInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITargetInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITargetInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITargetInfo_GetProperty(This,Property,Value)	\
    ( (This)->lpVtbl -> GetProperty(This,Property,Value) ) 

#define ITargetInfo_SetProperty(This,Property,Value)	\
    ( (This)->lpVtbl -> SetProperty(This,Property,Value) ) 

#define ITargetInfo_GetEnumerator(This,Enumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,Enumerator) ) 

#define ITargetInfo_ExpandTarget(This,Location,ExpandedLocation)	\
    ( (This)->lpVtbl -> ExpandTarget(This,Location,ExpandedLocation) ) 

#define ITargetInfo_ExpandTargetPath(This,Location,ExpandedLocation)	\
    ( (This)->lpVtbl -> ExpandTargetPath(This,Location,ExpandedLocation) ) 

#define ITargetInfo_SetModulePath(This,Module,Path)	\
    ( (This)->lpVtbl -> SetModulePath(This,Module,Path) ) 

#define ITargetInfo_LoadModule(This,Module,ModuleHandle)	\
    ( (This)->lpVtbl -> LoadModule(This,Module,ModuleHandle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE ITargetInfo_GetProperty_Proxy( 
    ITargetInfo * This,
    /* [string][in] */ const WCHAR *Property,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB ITargetInfo_GetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ITargetInfo_SetProperty_Proxy( 
    ITargetInfo * This,
    /* [string][in] */ const WCHAR *Property,
    /* [string][in] */ const WCHAR *Value);


void __RPC_STUB ITargetInfo_SetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ITargetInfo_GetEnumerator_Proxy( 
    ITargetInfo * This,
    /* [retval][out] */ IItemEnumerator **Enumerator);


void __RPC_STUB ITargetInfo_GetEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ITargetInfo_ExpandTarget_Proxy( 
    ITargetInfo * This,
    /* [string][in] */ const WCHAR *Location,
    /* [retval][out] */ BSTR *ExpandedLocation);


void __RPC_STUB ITargetInfo_ExpandTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ITargetInfo_ExpandTargetPath_Proxy( 
    ITargetInfo * This,
    /* [string][in] */ const WCHAR *Location,
    /* [retval][out] */ BSTR *ExpandedLocation);


void __RPC_STUB ITargetInfo_ExpandTargetPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ITargetInfo_SetModulePath_Proxy( 
    ITargetInfo * This,
    /* [string][in] */ const WCHAR *Module,
    /* [string][in] */ const WCHAR *Path);


void __RPC_STUB ITargetInfo_SetModulePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ITargetInfo_LoadModule_Proxy( 
    ITargetInfo * This,
    /* [string][in] */ const WCHAR *Module,
    /* [retval][out] */ DWORD_PTR *ModuleHandle);


void __RPC_STUB ITargetInfo_LoadModule_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITargetInfo_INTERFACE_DEFINED__ */


#ifndef __ISettingsEngine_INTERFACE_DEFINED__
#define __ISettingsEngine_INTERFACE_DEFINED__

/* interface ISettingsEngine */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ISettingsEngine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C71A-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsEngine : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNamespaces( 
            /* [retval][out] */ IItemCollection **NamespaceCollection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNamespacesByOptions( 
            /* [in] */ WcmNamespaceEnumerationFlags Flags,
            /* [string][in] */ const WCHAR *UserSid,
            /* [retval][out] */ IItemCollection **NamespaceCollection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNamespace( 
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [in] */ WcmNamespaceMode Mode,
            /* [in] */ WcmNamespaceAccess Access,
            /* [retval][out] */ ISettingsNamespace **NamespaceItem) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNamespaceByOptions( 
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [in] */ WcmNamespaceMode Mode,
            /* [in] */ WcmNamespaceAccess Access,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ WcmNamespaceOption Option,
            /* [retval][out] */ ISettingsNamespace **NamespaceItem) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetErrorDescription( 
            /* [in] */ LONG HResult,
            /* [retval][out] */ BSTR *Message) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RegisterForNotification( 
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid,
            /* [string][in] */ const WCHAR *Setting,
            /* [in] */ WcmNotifyOptionsFlags NotifyOptions,
            /* [in] */ WcmNotifyFilterFlags NotifyFilter,
            /* [in] */ WcmNotificationInfo *NotificationInfo,
            /* [retval][out] */ WcmNotificationHandle *NotificationHandle) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE UnregisterNotification( 
            /* [in] */ WcmNotificationHandle NotificationHandle) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateNamespaceIdentity( 
            /* [retval][out] */ INamespaceIdentity **NamespaceID) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateNamespaceGroup( 
            /* [retval][out] */ INamespaceGroup **Group) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsEngineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsEngine * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsEngine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsEngine * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNamespaces )( 
            ISettingsEngine * This,
            /* [retval][out] */ IItemCollection **NamespaceCollection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNamespacesByOptions )( 
            ISettingsEngine * This,
            /* [in] */ WcmNamespaceEnumerationFlags Flags,
            /* [string][in] */ const WCHAR *UserSid,
            /* [retval][out] */ IItemCollection **NamespaceCollection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNamespace )( 
            ISettingsEngine * This,
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [in] */ WcmNamespaceMode Mode,
            /* [in] */ WcmNamespaceAccess Access,
            /* [retval][out] */ ISettingsNamespace **NamespaceItem);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNamespaceByOptions )( 
            ISettingsEngine * This,
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [in] */ WcmNamespaceMode Mode,
            /* [in] */ WcmNamespaceAccess Access,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ WcmNamespaceOption Option,
            /* [retval][out] */ ISettingsNamespace **NamespaceItem);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetErrorDescription )( 
            ISettingsEngine * This,
            /* [in] */ LONG HResult,
            /* [retval][out] */ BSTR *Message);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterForNotification )( 
            ISettingsEngine * This,
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid,
            /* [string][in] */ const WCHAR *Setting,
            /* [in] */ WcmNotifyOptionsFlags NotifyOptions,
            /* [in] */ WcmNotifyFilterFlags NotifyFilter,
            /* [in] */ WcmNotificationInfo *NotificationInfo,
            /* [retval][out] */ WcmNotificationHandle *NotificationHandle);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *UnregisterNotification )( 
            ISettingsEngine * This,
            /* [in] */ WcmNotificationHandle NotificationHandle);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateNamespaceIdentity )( 
            ISettingsEngine * This,
            /* [retval][out] */ INamespaceIdentity **NamespaceID);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateNamespaceGroup )( 
            ISettingsEngine * This,
            /* [retval][out] */ INamespaceGroup **Group);
        
        END_INTERFACE
    } ISettingsEngineVtbl;

    interface ISettingsEngine
    {
        CONST_VTBL struct ISettingsEngineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsEngine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsEngine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsEngine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsEngine_GetNamespaces(This,NamespaceCollection)	\
    ( (This)->lpVtbl -> GetNamespaces(This,NamespaceCollection) ) 

#define ISettingsEngine_GetNamespacesByOptions(This,Flags,UserSid,NamespaceCollection)	\
    ( (This)->lpVtbl -> GetNamespacesByOptions(This,Flags,UserSid,NamespaceCollection) ) 

#define ISettingsEngine_GetNamespace(This,NamespaceID,Mode,Access,NamespaceItem)	\
    ( (This)->lpVtbl -> GetNamespace(This,NamespaceID,Mode,Access,NamespaceItem) ) 

#define ISettingsEngine_GetNamespaceByOptions(This,NamespaceID,Mode,Access,UserSid,Option,NamespaceItem)	\
    ( (This)->lpVtbl -> GetNamespaceByOptions(This,NamespaceID,Mode,Access,UserSid,Option,NamespaceItem) ) 

#define ISettingsEngine_GetErrorDescription(This,HResult,Message)	\
    ( (This)->lpVtbl -> GetErrorDescription(This,HResult,Message) ) 

#define ISettingsEngine_RegisterForNotification(This,NamespaceID,UserSid,Setting,NotifyOptions,NotifyFilter,NotificationInfo,NotificationHandle)	\
    ( (This)->lpVtbl -> RegisterForNotification(This,NamespaceID,UserSid,Setting,NotifyOptions,NotifyFilter,NotificationInfo,NotificationHandle) ) 

#define ISettingsEngine_UnregisterNotification(This,NotificationHandle)	\
    ( (This)->lpVtbl -> UnregisterNotification(This,NotificationHandle) ) 

#define ISettingsEngine_CreateNamespaceIdentity(This,NamespaceID)	\
    ( (This)->lpVtbl -> CreateNamespaceIdentity(This,NamespaceID) ) 

#define ISettingsEngine_CreateNamespaceGroup(This,Group)	\
    ( (This)->lpVtbl -> CreateNamespaceGroup(This,Group) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_GetNamespaces_Proxy( 
    ISettingsEngine * This,
    /* [retval][out] */ IItemCollection **NamespaceCollection);


void __RPC_STUB ISettingsEngine_GetNamespaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_GetNamespacesByOptions_Proxy( 
    ISettingsEngine * This,
    /* [in] */ WcmNamespaceEnumerationFlags Flags,
    /* [string][in] */ const WCHAR *UserSid,
    /* [retval][out] */ IItemCollection **NamespaceCollection);


void __RPC_STUB ISettingsEngine_GetNamespacesByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_GetNamespace_Proxy( 
    ISettingsEngine * This,
    /* [in] */ INamespaceIdentity *NamespaceID,
    /* [in] */ WcmNamespaceMode Mode,
    /* [in] */ WcmNamespaceAccess Access,
    /* [retval][out] */ ISettingsNamespace **NamespaceItem);


void __RPC_STUB ISettingsEngine_GetNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_GetNamespaceByOptions_Proxy( 
    ISettingsEngine * This,
    /* [in] */ INamespaceIdentity *NamespaceID,
    /* [in] */ WcmNamespaceMode Mode,
    /* [in] */ WcmNamespaceAccess Access,
    /* [string][in] */ const WCHAR *UserSid,
    /* [in] */ WcmNamespaceOption Option,
    /* [retval][out] */ ISettingsNamespace **NamespaceItem);


void __RPC_STUB ISettingsEngine_GetNamespaceByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_GetErrorDescription_Proxy( 
    ISettingsEngine * This,
    /* [in] */ LONG HResult,
    /* [retval][out] */ BSTR *Message);


void __RPC_STUB ISettingsEngine_GetErrorDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_RegisterForNotification_Proxy( 
    ISettingsEngine * This,
    /* [in] */ INamespaceIdentity *NamespaceID,
    /* [string][in] */ const WCHAR *UserSid,
    /* [string][in] */ const WCHAR *Setting,
    /* [in] */ WcmNotifyOptionsFlags NotifyOptions,
    /* [in] */ WcmNotifyFilterFlags NotifyFilter,
    /* [in] */ WcmNotificationInfo *NotificationInfo,
    /* [retval][out] */ WcmNotificationHandle *NotificationHandle);


void __RPC_STUB ISettingsEngine_RegisterForNotification_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_UnregisterNotification_Proxy( 
    ISettingsEngine * This,
    /* [in] */ WcmNotificationHandle NotificationHandle);


void __RPC_STUB ISettingsEngine_UnregisterNotification_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_CreateNamespaceIdentity_Proxy( 
    ISettingsEngine * This,
    /* [retval][out] */ INamespaceIdentity **NamespaceID);


void __RPC_STUB ISettingsEngine_CreateNamespaceIdentity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsEngine_CreateNamespaceGroup_Proxy( 
    ISettingsEngine * This,
    /* [retval][out] */ INamespaceGroup **Group);


void __RPC_STUB ISettingsEngine_CreateNamespaceGroup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsEngine_INTERFACE_DEFINED__ */


#ifndef __IAdvancedSettingsEngine_INTERFACE_DEFINED__
#define __IAdvancedSettingsEngine_INTERFACE_DEFINED__

/* interface IAdvancedSettingsEngine */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IAdvancedSettingsEngine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AE578BC7-3BA4-11D7-BF56-000874CD1BAE")
    IAdvancedSettingsEngine : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RegisterUser( 
            /* [string][in] */ const WCHAR *UserSid) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE UnregisterUser( 
            /* [string][in] */ const WCHAR *UserSid) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateNamespace( 
            /* [retval][out] */ ISettingsNamespace **NamespaceItem) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateNamespaceByOptions( 
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ WcmNamespaceOption Option,
            /* [retval][out] */ ISettingsNamespace **NamespaceItem) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RegisterNamespaceFromStream( 
            /* [in] */ WcmInstallMode Mode,
            /* [in] */ IStream *Stream,
            /* [in] */ WcmNamespaceContext InstallContext,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ INamespaceIdentity *OldVersion,
            /* [retval][out] */ VARIANT *ppResults) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RegisterNamespaceFromFile( 
            /* [in] */ WcmInstallMode Mode,
            /* [string][in] */ const WCHAR *Manifest,
            /* [in] */ WcmNamespaceContext InstallContext,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ INamespaceIdentity *OldVersion,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE UnregisterNamespace( 
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE UninstallNamespace( 
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Import( 
            /* [in] */ ISettingsNamespace *Namespace,
            /* [in] */ DWORD Option,
            /* [in] */ IStream *Stream,
            /* [retval][out] */ VARIANT *Results) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ ISettingsNamespace *Namespace,
            /* [in] */ DWORD Option,
            /* [in] */ IStream *Stream) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ImportItem( 
            /* [in] */ IStream *Stream,
            /* [in] */ ISettingsNamespace *Namespace,
            /* [out] */ IBaseItem **NewItem) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ExportItem( 
            /* [in] */ IBaseItem *Item,
            /* [in] */ IStream *Stream) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE LegacySynchronize( 
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ WcmSynchronizeOption Option,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetSettingsEngine( 
            /* [retval][out] */ ISettingsEngine **SettingsEngine) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateTargetInfo( 
            /* [retval][out] */ ITargetInfo **Target) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetTargetInfo( 
            /* [in] */ ITargetInfo **Target) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetTargetInfo( 
            /* [in] */ ITargetInfo *Target) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAdvancedSettingsEngineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAdvancedSettingsEngine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAdvancedSettingsEngine * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterUser )( 
            IAdvancedSettingsEngine * This,
            /* [string][in] */ const WCHAR *UserSid);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *UnregisterUser )( 
            IAdvancedSettingsEngine * This,
            /* [string][in] */ const WCHAR *UserSid);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateNamespace )( 
            IAdvancedSettingsEngine * This,
            /* [retval][out] */ ISettingsNamespace **NamespaceItem);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateNamespaceByOptions )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ WcmNamespaceOption Option,
            /* [retval][out] */ ISettingsNamespace **NamespaceItem);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterNamespaceFromStream )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ WcmInstallMode Mode,
            /* [in] */ IStream *Stream,
            /* [in] */ WcmNamespaceContext InstallContext,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ INamespaceIdentity *OldVersion,
            /* [retval][out] */ VARIANT *ppResults);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterNamespaceFromFile )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ WcmInstallMode Mode,
            /* [string][in] */ const WCHAR *Manifest,
            /* [in] */ WcmNamespaceContext InstallContext,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ INamespaceIdentity *OldVersion,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *UnregisterNamespace )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *UninstallNamespace )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Import )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ ISettingsNamespace *Namespace,
            /* [in] */ DWORD Option,
            /* [in] */ IStream *Stream,
            /* [retval][out] */ VARIANT *Results);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ ISettingsNamespace *Namespace,
            /* [in] */ DWORD Option,
            /* [in] */ IStream *Stream);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ImportItem )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ IStream *Stream,
            /* [in] */ ISettingsNamespace *Namespace,
            /* [out] */ IBaseItem **NewItem);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ExportItem )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ IBaseItem *Item,
            /* [in] */ IStream *Stream);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *LegacySynchronize )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ INamespaceIdentity *NamespaceID,
            /* [string][in] */ const WCHAR *UserSid,
            /* [in] */ WcmSynchronizeOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSettingsEngine )( 
            IAdvancedSettingsEngine * This,
            /* [retval][out] */ ISettingsEngine **SettingsEngine);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateTargetInfo )( 
            IAdvancedSettingsEngine * This,
            /* [retval][out] */ ITargetInfo **Target);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTargetInfo )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ ITargetInfo **Target);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetTargetInfo )( 
            IAdvancedSettingsEngine * This,
            /* [in] */ ITargetInfo *Target);
        
        END_INTERFACE
    } IAdvancedSettingsEngineVtbl;

    interface IAdvancedSettingsEngine
    {
        CONST_VTBL struct IAdvancedSettingsEngineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAdvancedSettingsEngine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAdvancedSettingsEngine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAdvancedSettingsEngine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAdvancedSettingsEngine_RegisterUser(This,UserSid)	\
    ( (This)->lpVtbl -> RegisterUser(This,UserSid) ) 

#define IAdvancedSettingsEngine_UnregisterUser(This,UserSid)	\
    ( (This)->lpVtbl -> UnregisterUser(This,UserSid) ) 

#define IAdvancedSettingsEngine_CreateNamespace(This,NamespaceItem)	\
    ( (This)->lpVtbl -> CreateNamespace(This,NamespaceItem) ) 

#define IAdvancedSettingsEngine_CreateNamespaceByOptions(This,NamespaceID,UserSid,Overwrite,Option,NamespaceItem)	\
    ( (This)->lpVtbl -> CreateNamespaceByOptions(This,NamespaceID,UserSid,Overwrite,Option,NamespaceItem) ) 

#define IAdvancedSettingsEngine_RegisterNamespaceFromStream(This,Mode,Stream,InstallContext,UserSid,Overwrite,OldVersion,ppResults)	\
    ( (This)->lpVtbl -> RegisterNamespaceFromStream(This,Mode,Stream,InstallContext,UserSid,Overwrite,OldVersion,ppResults) ) 

#define IAdvancedSettingsEngine_RegisterNamespaceFromFile(This,Mode,Manifest,InstallContext,UserSid,Overwrite,OldVersion,ppResult)	\
    ( (This)->lpVtbl -> RegisterNamespaceFromFile(This,Mode,Manifest,InstallContext,UserSid,Overwrite,OldVersion,ppResult) ) 

#define IAdvancedSettingsEngine_UnregisterNamespace(This,NamespaceID,UserSid)	\
    ( (This)->lpVtbl -> UnregisterNamespace(This,NamespaceID,UserSid) ) 

#define IAdvancedSettingsEngine_UninstallNamespace(This,NamespaceID,UserSid)	\
    ( (This)->lpVtbl -> UninstallNamespace(This,NamespaceID,UserSid) ) 

#define IAdvancedSettingsEngine_Import(This,Namespace,Option,Stream,Results)	\
    ( (This)->lpVtbl -> Import(This,Namespace,Option,Stream,Results) ) 

#define IAdvancedSettingsEngine_Export(This,Namespace,Option,Stream)	\
    ( (This)->lpVtbl -> Export(This,Namespace,Option,Stream) ) 

#define IAdvancedSettingsEngine_ImportItem(This,Stream,Namespace,NewItem)	\
    ( (This)->lpVtbl -> ImportItem(This,Stream,Namespace,NewItem) ) 

#define IAdvancedSettingsEngine_ExportItem(This,Item,Stream)	\
    ( (This)->lpVtbl -> ExportItem(This,Item,Stream) ) 

#define IAdvancedSettingsEngine_LegacySynchronize(This,NamespaceID,UserSid,Option,ppResult)	\
    ( (This)->lpVtbl -> LegacySynchronize(This,NamespaceID,UserSid,Option,ppResult) ) 

#define IAdvancedSettingsEngine_GetSettingsEngine(This,SettingsEngine)	\
    ( (This)->lpVtbl -> GetSettingsEngine(This,SettingsEngine) ) 

#define IAdvancedSettingsEngine_CreateTargetInfo(This,Target)	\
    ( (This)->lpVtbl -> CreateTargetInfo(This,Target) ) 

#define IAdvancedSettingsEngine_GetTargetInfo(This,Target)	\
    ( (This)->lpVtbl -> GetTargetInfo(This,Target) ) 

#define IAdvancedSettingsEngine_SetTargetInfo(This,Target)	\
    ( (This)->lpVtbl -> SetTargetInfo(This,Target) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_RegisterUser_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [string][in] */ const WCHAR *UserSid);


void __RPC_STUB IAdvancedSettingsEngine_RegisterUser_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_UnregisterUser_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [string][in] */ const WCHAR *UserSid);


void __RPC_STUB IAdvancedSettingsEngine_UnregisterUser_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_CreateNamespace_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [retval][out] */ ISettingsNamespace **NamespaceItem);


void __RPC_STUB IAdvancedSettingsEngine_CreateNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_CreateNamespaceByOptions_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ INamespaceIdentity *NamespaceID,
    /* [string][in] */ const WCHAR *UserSid,
    /* [in] */ BOOL Overwrite,
    /* [in] */ WcmNamespaceOption Option,
    /* [retval][out] */ ISettingsNamespace **NamespaceItem);


void __RPC_STUB IAdvancedSettingsEngine_CreateNamespaceByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_RegisterNamespaceFromStream_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ WcmInstallMode Mode,
    /* [in] */ IStream *Stream,
    /* [in] */ WcmNamespaceContext InstallContext,
    /* [string][in] */ const WCHAR *UserSid,
    /* [in] */ BOOL Overwrite,
    /* [in] */ INamespaceIdentity *OldVersion,
    /* [retval][out] */ VARIANT *ppResults);


void __RPC_STUB IAdvancedSettingsEngine_RegisterNamespaceFromStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_RegisterNamespaceFromFile_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ WcmInstallMode Mode,
    /* [string][in] */ const WCHAR *Manifest,
    /* [in] */ WcmNamespaceContext InstallContext,
    /* [string][in] */ const WCHAR *UserSid,
    /* [in] */ BOOL Overwrite,
    /* [in] */ INamespaceIdentity *OldVersion,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB IAdvancedSettingsEngine_RegisterNamespaceFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_UnregisterNamespace_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ INamespaceIdentity *NamespaceID,
    /* [string][in] */ const WCHAR *UserSid);


void __RPC_STUB IAdvancedSettingsEngine_UnregisterNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_UninstallNamespace_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ INamespaceIdentity *NamespaceID,
    /* [string][in] */ const WCHAR *UserSid);


void __RPC_STUB IAdvancedSettingsEngine_UninstallNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_Import_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ ISettingsNamespace *Namespace,
    /* [in] */ DWORD Option,
    /* [in] */ IStream *Stream,
    /* [retval][out] */ VARIANT *Results);


void __RPC_STUB IAdvancedSettingsEngine_Import_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_Export_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ ISettingsNamespace *Namespace,
    /* [in] */ DWORD Option,
    /* [in] */ IStream *Stream);


void __RPC_STUB IAdvancedSettingsEngine_Export_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_ImportItem_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ IStream *Stream,
    /* [in] */ ISettingsNamespace *Namespace,
    /* [out] */ IBaseItem **NewItem);


void __RPC_STUB IAdvancedSettingsEngine_ImportItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_ExportItem_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ IBaseItem *Item,
    /* [in] */ IStream *Stream);


void __RPC_STUB IAdvancedSettingsEngine_ExportItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_LegacySynchronize_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ INamespaceIdentity *NamespaceID,
    /* [string][in] */ const WCHAR *UserSid,
    /* [in] */ WcmSynchronizeOption Option,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB IAdvancedSettingsEngine_LegacySynchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_GetSettingsEngine_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [retval][out] */ ISettingsEngine **SettingsEngine);


void __RPC_STUB IAdvancedSettingsEngine_GetSettingsEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_CreateTargetInfo_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [retval][out] */ ITargetInfo **Target);


void __RPC_STUB IAdvancedSettingsEngine_CreateTargetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_GetTargetInfo_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ ITargetInfo **Target);


void __RPC_STUB IAdvancedSettingsEngine_GetTargetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngine_SetTargetInfo_Proxy( 
    IAdvancedSettingsEngine * This,
    /* [in] */ ITargetInfo *Target);


void __RPC_STUB IAdvancedSettingsEngine_SetTargetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAdvancedSettingsEngine_INTERFACE_DEFINED__ */


#ifndef __IBaseItem_INTERFACE_DEFINED__
#define __IBaseItem_INTERFACE_DEFINED__

/* interface IBaseItem */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IBaseItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C71D-3BA4-11D7-BF56-000874CD1BAE")
    IBaseItem : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetName( 
            /* [string][in] */ const WCHAR *Name) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetPath( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetFullPath( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetType( 
            /* [retval][out] */ LONG *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE IsReadOnly( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNodeType( 
            /* [retval][out] */ WcmNodeType *NodeType) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetDisplayName( 
            /* [retval][out] */ BSTR *DisplayName) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetDisplayName( 
            /* [string][in] */ const WCHAR *DisplayName) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetDescription( 
            /* [retval][out] */ BSTR *Description) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetDescription( 
            /* [string][in] */ const WCHAR *Description) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetParent( 
            /* [retval][out] */ IBaseItem **Parent) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE HasChild( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetValue( 
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetValue( 
            /* [in] */ const VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetDefaultValue( 
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetDefaultValue( 
            /* [in] */ const VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetValueByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetValueByOptions( 
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DeleteValue( 
            /* [in] */ FILETIME Timestamp) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Reset( 
            /* [in] */ WcmResetOption Option) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Children( 
            /* [retval][out] */ IItemCollection **Children) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AddChild( 
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetChild( 
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveChild( 
            /* [string][in] */ const WCHAR *Name) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE InsertChild( 
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE MoveChild( 
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CompareChildOrder( 
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Attributes( 
            /* [retval][out] */ IItemCollection **Attributes) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetAttribute( 
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveAttribute( 
            /* [string][in] */ const WCHAR *Name) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetItemByPath( 
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateItemByPath( 
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveItemByPath( 
            /* [string][in] */ const WCHAR *Path) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueInteger( 
            /* [retval][out] */ LONG *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueInteger( 
            /* [in] */ LONG Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueInteger64( 
            /* [retval][out] */ __int64 *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueInteger64( 
            /* [in] */ __int64 Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueString( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueString( 
            /* [string][in] */ const WCHAR *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueBoolean( 
            /* [retval][out] */ BOOL *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueBoolean( 
            /* [in] */ BOOL Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueDouble( 
            /* [retval][out] */ double *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueDouble( 
            /* [in] */ double Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueBinary( 
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueBinary( 
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueFileTime( 
            /* [retval][out] */ FILETIME *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueFileTime( 
            /* [in] */ const FILETIME *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueRaw( 
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueRaw( 
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueIntegerByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueIntegerByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueInteger64ByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueInteger64ByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueStringByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueStringByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueBooleanByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueBooleanByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueDoubleByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueDoubleByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueBinaryByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueBinaryByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueFileTimeByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueFileTimeByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueRawByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueRawByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBaseItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBaseItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBaseItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBaseItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IBaseItem * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IBaseItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IBaseItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IBaseItem * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IBaseItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IBaseItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IBaseItem * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IBaseItem * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IBaseItem * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IBaseItem * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IBaseItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IBaseItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IBaseItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IBaseItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IBaseItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IBaseItem * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IBaseItem * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IBaseItem * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IBaseItem * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IBaseItem * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IBaseItem * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IBaseItem * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IBaseItem * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IBaseItem * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IBaseItem * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IBaseItem * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IBaseItem * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IBaseItem * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IBaseItem * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IBaseItem * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IBaseItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IBaseItem * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IBaseItem * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IBaseItem * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IBaseItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IBaseItem * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IBaseItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        END_INTERFACE
    } IBaseItemVtbl;

    interface IBaseItem
    {
        CONST_VTBL struct IBaseItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBaseItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBaseItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBaseItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBaseItem_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IBaseItem_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IBaseItem_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IBaseItem_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IBaseItem_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IBaseItem_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IBaseItem_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IBaseItem_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IBaseItem_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IBaseItem_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IBaseItem_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IBaseItem_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IBaseItem_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IBaseItem_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IBaseItem_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IBaseItem_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IBaseItem_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IBaseItem_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IBaseItem_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IBaseItem_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IBaseItem_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IBaseItem_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IBaseItem_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IBaseItem_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IBaseItem_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IBaseItem_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IBaseItem_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IBaseItem_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IBaseItem_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IBaseItem_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IBaseItem_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IBaseItem_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IBaseItem_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IBaseItem_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IBaseItem_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IBaseItem_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IBaseItem_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IBaseItem_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IBaseItem_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IBaseItem_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IBaseItem_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IBaseItem_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IBaseItem_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IBaseItem_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IBaseItem_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IBaseItem_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IBaseItem_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IBaseItem_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IBaseItem_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IBaseItem_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IBaseItem_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IBaseItem_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IBaseItem_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IBaseItem_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IBaseItem_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IBaseItem_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IBaseItem_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IBaseItem_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IBaseItem_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IBaseItem_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IBaseItem_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IBaseItem_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IBaseItem_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IBaseItem_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IBaseItem_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IBaseItem_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IBaseItem_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IBaseItem_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetName_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB IBaseItem_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_SetName_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Name);


void __RPC_STUB IBaseItem_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetPath_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ BSTR *Path);


void __RPC_STUB IBaseItem_GetPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetFullPath_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ BSTR *Path);


void __RPC_STUB IBaseItem_GetFullPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetType_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ LONG *Type);


void __RPC_STUB IBaseItem_GetType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_IsReadOnly_Proxy( 
    IBaseItem * This);


void __RPC_STUB IBaseItem_IsReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_IsDirty_Proxy( 
    IBaseItem * This);


void __RPC_STUB IBaseItem_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetNodeType_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ WcmNodeType *NodeType);


void __RPC_STUB IBaseItem_GetNodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetDisplayName_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ BSTR *DisplayName);


void __RPC_STUB IBaseItem_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_SetDisplayName_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *DisplayName);


void __RPC_STUB IBaseItem_SetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetDescription_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ BSTR *Description);


void __RPC_STUB IBaseItem_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_SetDescription_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Description);


void __RPC_STUB IBaseItem_SetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetParent_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ IBaseItem **Parent);


void __RPC_STUB IBaseItem_GetParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_HasChild_Proxy( 
    IBaseItem * This);


void __RPC_STUB IBaseItem_HasChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetValue_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IBaseItem_GetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_SetValue_Proxy( 
    IBaseItem * This,
    /* [in] */ const VARIANT *Value);


void __RPC_STUB IBaseItem_SetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetDefaultValue_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IBaseItem_GetDefaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_SetDefaultValue_Proxy( 
    IBaseItem * This,
    /* [in] */ const VARIANT *Value);


void __RPC_STUB IBaseItem_SetDefaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetValueByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [out] */ FILETIME *Timestamp,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IBaseItem_GetValueByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_SetValueByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ const VARIANT *Value,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ FILETIME Timestamp);


void __RPC_STUB IBaseItem_SetValueByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_DeleteValue_Proxy( 
    IBaseItem * This,
    /* [in] */ FILETIME Timestamp);


void __RPC_STUB IBaseItem_DeleteValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_Reset_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmResetOption Option);


void __RPC_STUB IBaseItem_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_Children_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ IItemCollection **Children);


void __RPC_STUB IBaseItem_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_AddChild_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Name,
    /* [retval][out] */ IBaseItem **Child);


void __RPC_STUB IBaseItem_AddChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetChild_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Name,
    /* [retval][out] */ IBaseItem **Child);


void __RPC_STUB IBaseItem_GetChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_RemoveChild_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Name);


void __RPC_STUB IBaseItem_RemoveChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_InsertChild_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Key,
    /* [string][in] */ const WCHAR *Target,
    /* [in] */ BOOL Position,
    /* [retval][out] */ IBaseItem **Child);


void __RPC_STUB IBaseItem_InsertChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_MoveChild_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Key,
    /* [string][in] */ const WCHAR *Target,
    /* [in] */ BOOL Position);


void __RPC_STUB IBaseItem_MoveChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_CompareChildOrder_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Item1,
    /* [string][in] */ const WCHAR *Item2,
    /* [retval][out] */ LONG *Position);


void __RPC_STUB IBaseItem_CompareChildOrder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_Attributes_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ IItemCollection **Attributes);


void __RPC_STUB IBaseItem_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_AddAttribute_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Name,
    /* [in] */ const VARIANT *Value);


void __RPC_STUB IBaseItem_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetAttribute_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Name,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IBaseItem_GetAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_RemoveAttribute_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Name);


void __RPC_STUB IBaseItem_RemoveAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_GetItemByPath_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Path,
    /* [retval][out] */ IBaseItem **Item);


void __RPC_STUB IBaseItem_GetItemByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_CreateItemByPath_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Path,
    /* [retval][out] */ IBaseItem **Item);


void __RPC_STUB IBaseItem_CreateItemByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IBaseItem_RemoveItemByPath_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Path);


void __RPC_STUB IBaseItem_RemoveItemByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueInteger_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ LONG *Value);


void __RPC_STUB IBaseItem_GetValueInteger_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueInteger_Proxy( 
    IBaseItem * This,
    /* [in] */ LONG Value);


void __RPC_STUB IBaseItem_SetValueInteger_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueInteger64_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ __int64 *Value);


void __RPC_STUB IBaseItem_GetValueInteger64_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueInteger64_Proxy( 
    IBaseItem * This,
    /* [in] */ __int64 Value);


void __RPC_STUB IBaseItem_SetValueInteger64_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueString_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IBaseItem_GetValueString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueString_Proxy( 
    IBaseItem * This,
    /* [string][in] */ const WCHAR *Value);


void __RPC_STUB IBaseItem_SetValueString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueBoolean_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ BOOL *Value);


void __RPC_STUB IBaseItem_GetValueBoolean_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueBoolean_Proxy( 
    IBaseItem * This,
    /* [in] */ BOOL Value);


void __RPC_STUB IBaseItem_SetValueBoolean_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueDouble_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ double *Value);


void __RPC_STUB IBaseItem_GetValueDouble_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueDouble_Proxy( 
    IBaseItem * This,
    /* [in] */ double Value);


void __RPC_STUB IBaseItem_SetValueDouble_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueBinary_Proxy( 
    IBaseItem * This,
    /* [size_is][size_is][out] */ BYTE **Data,
    /* [retval][out] */ ULONG *DataSize);


void __RPC_STUB IBaseItem_GetValueBinary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueBinary_Proxy( 
    IBaseItem * This,
    /* [size_is][in] */ const BYTE *Data,
    /* [in] */ ULONG DataSize);


void __RPC_STUB IBaseItem_SetValueBinary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueFileTime_Proxy( 
    IBaseItem * This,
    /* [retval][out] */ FILETIME *Value);


void __RPC_STUB IBaseItem_GetValueFileTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueFileTime_Proxy( 
    IBaseItem * This,
    /* [in] */ const FILETIME *Value);


void __RPC_STUB IBaseItem_SetValueFileTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueRaw_Proxy( 
    IBaseItem * This,
    /* [size_is][size_is][out] */ BYTE **Data,
    /* [retval][out] */ ULONG *DataSize);


void __RPC_STUB IBaseItem_GetValueRaw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueRaw_Proxy( 
    IBaseItem * This,
    /* [in] */ LONG DataType,
    /* [size_is][in] */ const BYTE *Data,
    /* [in] */ ULONG DataSize);


void __RPC_STUB IBaseItem_SetValueRaw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueIntegerByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [retval][out] */ LONG *Value);


void __RPC_STUB IBaseItem_GetValueIntegerByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueIntegerByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ LONG Value);


void __RPC_STUB IBaseItem_SetValueIntegerByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueInteger64ByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [retval][out] */ __int64 *Value);


void __RPC_STUB IBaseItem_GetValueInteger64ByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueInteger64ByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ __int64 Value);


void __RPC_STUB IBaseItem_SetValueInteger64ByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueStringByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB IBaseItem_GetValueStringByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueStringByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [string][in] */ const WCHAR *Value);


void __RPC_STUB IBaseItem_SetValueStringByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueBooleanByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [retval][out] */ BOOL *Value);


void __RPC_STUB IBaseItem_GetValueBooleanByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueBooleanByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ BOOL Value);


void __RPC_STUB IBaseItem_SetValueBooleanByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueDoubleByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [retval][out] */ double *Value);


void __RPC_STUB IBaseItem_GetValueDoubleByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueDoubleByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ double Value);


void __RPC_STUB IBaseItem_SetValueDoubleByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueBinaryByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [size_is][size_is][out] */ BYTE **Data,
    /* [retval][out] */ ULONG *DataSize);


void __RPC_STUB IBaseItem_GetValueBinaryByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueBinaryByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [size_is][in] */ const BYTE *Data,
    /* [in] */ ULONG DataSize);


void __RPC_STUB IBaseItem_SetValueBinaryByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueFileTimeByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [retval][out] */ FILETIME *Value);


void __RPC_STUB IBaseItem_GetValueFileTimeByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueFileTimeByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ const FILETIME *Value);


void __RPC_STUB IBaseItem_SetValueFileTimeByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_GetValueRawByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [size_is][size_is][out] */ BYTE **Data,
    /* [retval][out] */ ULONG *DataSize);


void __RPC_STUB IBaseItem_GetValueRawByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBaseItem_SetValueRawByOptions_Proxy( 
    IBaseItem * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ LONG DataType,
    /* [size_is][in] */ const BYTE *Data,
    /* [in] */ ULONG DataSize);


void __RPC_STUB IBaseItem_SetValueRawByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBaseItem_INTERFACE_DEFINED__ */


#ifndef __ISettingsNamespace_INTERFACE_DEFINED__
#define __ISettingsNamespace_INTERFACE_DEFINED__

/* interface ISettingsNamespace */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ISettingsNamespace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C722-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsNamespace : public IBaseItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetIdentity( 
            /* [retval][out] */ INamespaceIdentity **Identity) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetIdentity( 
            /* [in] */ INamespaceIdentity *Identity) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetTargetInfo( 
            /* [retval][out] */ ITargetInfo **Target) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Settings( 
            /* [retval][out] */ IItemCollection **Settings) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Metadata( 
            /* [retval][out] */ IMetadata **Metadata) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Transactions( 
            /* [retval][out] */ IItemCollection **Transactions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [string][in] */ const WCHAR *Message) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SaveByOptions( 
            /* [in] */ WcmSaveOption Option,
            /* [in] */ const VARIANT *Value,
            /* [retval][out] */ ISettingsResult **ppResult) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Reload( 
            /* [in] */ WcmReloadOption Option) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetXmlNamespaceUri( 
            /* [string][in] */ const WCHAR *NamespacePrefix,
            /* [retval][out] */ BSTR *NamespaceUri) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetXmlNamespacePrefix( 
            /* [string][in] */ const WCHAR *NamespaceUri,
            /* [retval][out] */ BSTR *NamespacePrefix) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Validate( 
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetSettingByPath( 
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ ISettingsItem **Setting) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateSettingByPath( 
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ ISettingsItem **Setting) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveSettingByPath( 
            /* [string][in] */ const WCHAR *Path) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetSettingValue( 
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetSettingValue( 
            /* [string][in] */ const WCHAR *Path,
            /* [in] */ const VARIANT *Value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemSet( 
            /* [in] */ WcmNamespaceContext AccessContext,
            /* [string][in] */ const WCHAR *Branch,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const WcmItemFilter *AttributeFilter,
            /* [out] */ IItemSetEnumerator **Enumerator) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RegisterForNotification( 
            /* [string][in] */ const WCHAR *Setting,
            /* [in] */ WcmNotifyOptionsFlags NotifyOptions,
            /* [in] */ WcmNotifyFilterFlags NotifyFilter,
            /* [in] */ WcmNotificationInfo *NotificationInfo,
            /* [retval][out] */ WcmNotificationHandle *NotificationHandle) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE UnregisterNotification( 
            /* [in] */ WcmNotificationHandle NotificationHandle) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE EvaluateValues( 
            /* [in] */ VARIANT *settings,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsNamespaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsNamespace * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsNamespace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsNamespace * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            ISettingsNamespace * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            ISettingsNamespace * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            ISettingsNamespace * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ISettingsNamespace * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            ISettingsNamespace * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            ISettingsNamespace * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            ISettingsNamespace * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            ISettingsNamespace * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ISettingsNamespace * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            ISettingsNamespace * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            ISettingsNamespace * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            ISettingsNamespace * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            ISettingsNamespace * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            ISettingsNamespace * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            ISettingsNamespace * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISettingsNamespace * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISettingsNamespace * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            ISettingsNamespace * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            ISettingsNamespace * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            ISettingsNamespace * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            ISettingsNamespace * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            ISettingsNamespace * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            ISettingsNamespace * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            ISettingsNamespace * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            ISettingsNamespace * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            ISettingsNamespace * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            ISettingsNamespace * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            ISettingsNamespace * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            ISettingsNamespace * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            ISettingsNamespace * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            ISettingsNamespace * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            ISettingsNamespace * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            ISettingsNamespace * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            ISettingsNamespace * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetIdentity )( 
            ISettingsNamespace * This,
            /* [retval][out] */ INamespaceIdentity **Identity);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetIdentity )( 
            ISettingsNamespace * This,
            /* [in] */ INamespaceIdentity *Identity);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTargetInfo )( 
            ISettingsNamespace * This,
            /* [retval][out] */ ITargetInfo **Target);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Settings )( 
            ISettingsNamespace * This,
            /* [retval][out] */ IItemCollection **Settings);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Metadata )( 
            ISettingsNamespace * This,
            /* [retval][out] */ IMetadata **Metadata);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Transactions )( 
            ISettingsNamespace * This,
            /* [retval][out] */ IItemCollection **Transactions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Message);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SaveByOptions )( 
            ISettingsNamespace * This,
            /* [in] */ WcmSaveOption Option,
            /* [in] */ const VARIANT *Value,
            /* [retval][out] */ ISettingsResult **ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            ISettingsNamespace * This,
            /* [in] */ WcmReloadOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetXmlNamespaceUri )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *NamespacePrefix,
            /* [retval][out] */ BSTR *NamespaceUri);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetXmlNamespacePrefix )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *NamespaceUri,
            /* [retval][out] */ BSTR *NamespacePrefix);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ISettingsNamespace * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSettingByPath )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ ISettingsItem **Setting);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateSettingByPath )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ ISettingsItem **Setting);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveSettingByPath )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSettingValue )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetSettingValue )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Path,
            /* [in] */ const VARIANT *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemSet )( 
            ISettingsNamespace * This,
            /* [in] */ WcmNamespaceContext AccessContext,
            /* [string][in] */ const WCHAR *Branch,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const WcmItemFilter *AttributeFilter,
            /* [out] */ IItemSetEnumerator **Enumerator);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterForNotification )( 
            ISettingsNamespace * This,
            /* [string][in] */ const WCHAR *Setting,
            /* [in] */ WcmNotifyOptionsFlags NotifyOptions,
            /* [in] */ WcmNotifyFilterFlags NotifyFilter,
            /* [in] */ WcmNotificationInfo *NotificationInfo,
            /* [retval][out] */ WcmNotificationHandle *NotificationHandle);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *UnregisterNotification )( 
            ISettingsNamespace * This,
            /* [in] */ WcmNotificationHandle NotificationHandle);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *EvaluateValues )( 
            ISettingsNamespace * This,
            /* [in] */ VARIANT *settings,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } ISettingsNamespaceVtbl;

    interface ISettingsNamespace
    {
        CONST_VTBL struct ISettingsNamespaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsNamespace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsNamespace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsNamespace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsNamespace_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define ISettingsNamespace_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define ISettingsNamespace_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define ISettingsNamespace_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define ISettingsNamespace_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define ISettingsNamespace_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define ISettingsNamespace_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define ISettingsNamespace_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define ISettingsNamespace_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define ISettingsNamespace_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define ISettingsNamespace_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define ISettingsNamespace_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define ISettingsNamespace_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define ISettingsNamespace_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define ISettingsNamespace_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define ISettingsNamespace_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define ISettingsNamespace_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define ISettingsNamespace_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define ISettingsNamespace_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISettingsNamespace_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISettingsNamespace_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISettingsNamespace_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISettingsNamespace_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define ISettingsNamespace_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISettingsNamespace_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISettingsNamespace_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISettingsNamespace_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define ISettingsNamespace_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISettingsNamespace_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISettingsNamespace_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define ISettingsNamespace_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISettingsNamespace_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISettingsNamespace_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISettingsNamespace_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISettingsNamespace_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISettingsNamespace_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define ISettingsNamespace_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define ISettingsNamespace_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define ISettingsNamespace_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define ISettingsNamespace_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define ISettingsNamespace_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define ISettingsNamespace_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define ISettingsNamespace_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define ISettingsNamespace_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define ISettingsNamespace_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define ISettingsNamespace_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define ISettingsNamespace_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define ISettingsNamespace_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define ISettingsNamespace_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define ISettingsNamespace_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define ISettingsNamespace_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define ISettingsNamespace_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define ISettingsNamespace_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define ISettingsNamespace_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define ISettingsNamespace_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define ISettingsNamespace_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define ISettingsNamespace_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define ISettingsNamespace_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define ISettingsNamespace_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define ISettingsNamespace_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define ISettingsNamespace_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define ISettingsNamespace_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define ISettingsNamespace_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define ISettingsNamespace_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define ISettingsNamespace_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define ISettingsNamespace_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define ISettingsNamespace_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define ISettingsNamespace_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define ISettingsNamespace_GetIdentity(This,Identity)	\
    ( (This)->lpVtbl -> GetIdentity(This,Identity) ) 

#define ISettingsNamespace_SetIdentity(This,Identity)	\
    ( (This)->lpVtbl -> SetIdentity(This,Identity) ) 

#define ISettingsNamespace_GetTargetInfo(This,Target)	\
    ( (This)->lpVtbl -> GetTargetInfo(This,Target) ) 

#define ISettingsNamespace_Settings(This,Settings)	\
    ( (This)->lpVtbl -> Settings(This,Settings) ) 

#define ISettingsNamespace_Metadata(This,Metadata)	\
    ( (This)->lpVtbl -> Metadata(This,Metadata) ) 

#define ISettingsNamespace_Transactions(This,Transactions)	\
    ( (This)->lpVtbl -> Transactions(This,Transactions) ) 

#define ISettingsNamespace_Save(This,Message)	\
    ( (This)->lpVtbl -> Save(This,Message) ) 

#define ISettingsNamespace_SaveByOptions(This,Option,Value,ppResult)	\
    ( (This)->lpVtbl -> SaveByOptions(This,Option,Value,ppResult) ) 

#define ISettingsNamespace_Reload(This,Option)	\
    ( (This)->lpVtbl -> Reload(This,Option) ) 

#define ISettingsNamespace_GetXmlNamespaceUri(This,NamespacePrefix,NamespaceUri)	\
    ( (This)->lpVtbl -> GetXmlNamespaceUri(This,NamespacePrefix,NamespaceUri) ) 

#define ISettingsNamespace_GetXmlNamespacePrefix(This,NamespaceUri,NamespacePrefix)	\
    ( (This)->lpVtbl -> GetXmlNamespacePrefix(This,NamespaceUri,NamespacePrefix) ) 

#define ISettingsNamespace_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 

#define ISettingsNamespace_GetSettingByPath(This,Path,Setting)	\
    ( (This)->lpVtbl -> GetSettingByPath(This,Path,Setting) ) 

#define ISettingsNamespace_CreateSettingByPath(This,Path,Setting)	\
    ( (This)->lpVtbl -> CreateSettingByPath(This,Path,Setting) ) 

#define ISettingsNamespace_RemoveSettingByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveSettingByPath(This,Path) ) 

#define ISettingsNamespace_GetSettingValue(This,Path,Value)	\
    ( (This)->lpVtbl -> GetSettingValue(This,Path,Value) ) 

#define ISettingsNamespace_SetSettingValue(This,Path,Value)	\
    ( (This)->lpVtbl -> SetSettingValue(This,Path,Value) ) 

#define ISettingsNamespace_GetItemSet(This,AccessContext,Branch,Options,AttributeFilter,Enumerator)	\
    ( (This)->lpVtbl -> GetItemSet(This,AccessContext,Branch,Options,AttributeFilter,Enumerator) ) 

#define ISettingsNamespace_RegisterForNotification(This,Setting,NotifyOptions,NotifyFilter,NotificationInfo,NotificationHandle)	\
    ( (This)->lpVtbl -> RegisterForNotification(This,Setting,NotifyOptions,NotifyFilter,NotificationInfo,NotificationHandle) ) 

#define ISettingsNamespace_UnregisterNotification(This,NotificationHandle)	\
    ( (This)->lpVtbl -> UnregisterNotification(This,NotificationHandle) ) 

#define ISettingsNamespace_EvaluateValues(This,settings,ppResult)	\
    ( (This)->lpVtbl -> EvaluateValues(This,settings,ppResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_GetIdentity_Proxy( 
    ISettingsNamespace * This,
    /* [retval][out] */ INamespaceIdentity **Identity);


void __RPC_STUB ISettingsNamespace_GetIdentity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_SetIdentity_Proxy( 
    ISettingsNamespace * This,
    /* [in] */ INamespaceIdentity *Identity);


void __RPC_STUB ISettingsNamespace_SetIdentity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_GetTargetInfo_Proxy( 
    ISettingsNamespace * This,
    /* [retval][out] */ ITargetInfo **Target);


void __RPC_STUB ISettingsNamespace_GetTargetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_Settings_Proxy( 
    ISettingsNamespace * This,
    /* [retval][out] */ IItemCollection **Settings);


void __RPC_STUB ISettingsNamespace_Settings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_Metadata_Proxy( 
    ISettingsNamespace * This,
    /* [retval][out] */ IMetadata **Metadata);


void __RPC_STUB ISettingsNamespace_Metadata_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_Transactions_Proxy( 
    ISettingsNamespace * This,
    /* [retval][out] */ IItemCollection **Transactions);


void __RPC_STUB ISettingsNamespace_Transactions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_Save_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *Message);


void __RPC_STUB ISettingsNamespace_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_SaveByOptions_Proxy( 
    ISettingsNamespace * This,
    /* [in] */ WcmSaveOption Option,
    /* [in] */ const VARIANT *Value,
    /* [retval][out] */ ISettingsResult **ppResult);


void __RPC_STUB ISettingsNamespace_SaveByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_Reload_Proxy( 
    ISettingsNamespace * This,
    /* [in] */ WcmReloadOption Option);


void __RPC_STUB ISettingsNamespace_Reload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_GetXmlNamespaceUri_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *NamespacePrefix,
    /* [retval][out] */ BSTR *NamespaceUri);


void __RPC_STUB ISettingsNamespace_GetXmlNamespaceUri_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_GetXmlNamespacePrefix_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *NamespaceUri,
    /* [retval][out] */ BSTR *NamespacePrefix);


void __RPC_STUB ISettingsNamespace_GetXmlNamespacePrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_Validate_Proxy( 
    ISettingsNamespace * This,
    /* [in] */ WcmValidateOption Option,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB ISettingsNamespace_Validate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_GetSettingByPath_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *Path,
    /* [retval][out] */ ISettingsItem **Setting);


void __RPC_STUB ISettingsNamespace_GetSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_CreateSettingByPath_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *Path,
    /* [retval][out] */ ISettingsItem **Setting);


void __RPC_STUB ISettingsNamespace_CreateSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_RemoveSettingByPath_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *Path);


void __RPC_STUB ISettingsNamespace_RemoveSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_GetSettingValue_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *Path,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB ISettingsNamespace_GetSettingValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_SetSettingValue_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *Path,
    /* [in] */ const VARIANT *Value);


void __RPC_STUB ISettingsNamespace_SetSettingValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ISettingsNamespace_GetItemSet_Proxy( 
    ISettingsNamespace * This,
    /* [in] */ WcmNamespaceContext AccessContext,
    /* [string][in] */ const WCHAR *Branch,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ const WcmItemFilter *AttributeFilter,
    /* [out] */ IItemSetEnumerator **Enumerator);


void __RPC_STUB ISettingsNamespace_GetItemSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_RegisterForNotification_Proxy( 
    ISettingsNamespace * This,
    /* [string][in] */ const WCHAR *Setting,
    /* [in] */ WcmNotifyOptionsFlags NotifyOptions,
    /* [in] */ WcmNotifyFilterFlags NotifyFilter,
    /* [in] */ WcmNotificationInfo *NotificationInfo,
    /* [retval][out] */ WcmNotificationHandle *NotificationHandle);


void __RPC_STUB ISettingsNamespace_RegisterForNotification_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_UnregisterNotification_Proxy( 
    ISettingsNamespace * This,
    /* [in] */ WcmNotificationHandle NotificationHandle);


void __RPC_STUB ISettingsNamespace_UnregisterNotification_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsNamespace_EvaluateValues_Proxy( 
    ISettingsNamespace * This,
    /* [in] */ VARIANT *settings,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB ISettingsNamespace_EvaluateValues_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsNamespace_INTERFACE_DEFINED__ */


#ifndef __ISettingsItem_INTERFACE_DEFINED__
#define __ISettingsItem_INTERFACE_DEFINED__

/* interface ISettingsItem */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ISettingsItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C720-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsItem : public IBaseItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetTypeDefinition( 
            /* [retval][out] */ IMetadataItem **Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE IsDynamic( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Assertions( 
            /* [retval][out] */ IItemCollection **pAssertions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ResetToDefault( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetAllowedValues( 
            /* [retval][out] */ ISettingsAllowedValue **AllowedValues) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetSettingByPath( 
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ ISettingsItem **Setting) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateSettingByPath( 
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ ISettingsItem **Setting) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveSettingByPath( 
            /* [string][in] */ const WCHAR *Path) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            ISettingsItem * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            ISettingsItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            ISettingsItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ISettingsItem * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            ISettingsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            ISettingsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            ISettingsItem * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            ISettingsItem * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ISettingsItem * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            ISettingsItem * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            ISettingsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            ISettingsItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            ISettingsItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            ISettingsItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            ISettingsItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISettingsItem * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISettingsItem * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISettingsItem * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            ISettingsItem * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            ISettingsItem * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            ISettingsItem * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            ISettingsItem * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            ISettingsItem * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            ISettingsItem * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            ISettingsItem * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            ISettingsItem * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            ISettingsItem * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            ISettingsItem * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            ISettingsItem * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            ISettingsItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            ISettingsItem * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            ISettingsItem * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            ISettingsItem * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            ISettingsItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            ISettingsItem * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            ISettingsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTypeDefinition )( 
            ISettingsItem * This,
            /* [retval][out] */ IMetadataItem **Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDynamic )( 
            ISettingsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Assertions )( 
            ISettingsItem * This,
            /* [retval][out] */ IItemCollection **pAssertions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ResetToDefault )( 
            ISettingsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAllowedValues )( 
            ISettingsItem * This,
            /* [retval][out] */ ISettingsAllowedValue **AllowedValues);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSettingByPath )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ ISettingsItem **Setting);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateSettingByPath )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ ISettingsItem **Setting);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveSettingByPath )( 
            ISettingsItem * This,
            /* [string][in] */ const WCHAR *Path);
        
        END_INTERFACE
    } ISettingsItemVtbl;

    interface ISettingsItem
    {
        CONST_VTBL struct ISettingsItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsItem_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define ISettingsItem_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define ISettingsItem_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define ISettingsItem_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define ISettingsItem_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define ISettingsItem_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define ISettingsItem_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define ISettingsItem_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define ISettingsItem_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define ISettingsItem_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define ISettingsItem_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define ISettingsItem_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define ISettingsItem_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define ISettingsItem_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define ISettingsItem_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define ISettingsItem_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define ISettingsItem_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define ISettingsItem_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define ISettingsItem_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISettingsItem_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISettingsItem_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISettingsItem_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISettingsItem_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define ISettingsItem_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISettingsItem_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISettingsItem_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISettingsItem_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define ISettingsItem_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISettingsItem_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISettingsItem_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define ISettingsItem_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISettingsItem_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISettingsItem_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISettingsItem_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISettingsItem_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISettingsItem_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define ISettingsItem_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define ISettingsItem_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define ISettingsItem_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define ISettingsItem_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define ISettingsItem_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define ISettingsItem_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define ISettingsItem_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define ISettingsItem_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define ISettingsItem_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define ISettingsItem_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define ISettingsItem_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define ISettingsItem_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define ISettingsItem_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define ISettingsItem_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define ISettingsItem_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define ISettingsItem_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define ISettingsItem_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define ISettingsItem_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define ISettingsItem_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define ISettingsItem_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define ISettingsItem_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define ISettingsItem_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define ISettingsItem_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define ISettingsItem_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define ISettingsItem_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define ISettingsItem_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define ISettingsItem_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define ISettingsItem_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define ISettingsItem_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define ISettingsItem_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define ISettingsItem_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define ISettingsItem_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define ISettingsItem_GetTypeDefinition(This,Type)	\
    ( (This)->lpVtbl -> GetTypeDefinition(This,Type) ) 

#define ISettingsItem_IsDynamic(This)	\
    ( (This)->lpVtbl -> IsDynamic(This) ) 

#define ISettingsItem_Assertions(This,pAssertions)	\
    ( (This)->lpVtbl -> Assertions(This,pAssertions) ) 

#define ISettingsItem_ResetToDefault(This)	\
    ( (This)->lpVtbl -> ResetToDefault(This) ) 

#define ISettingsItem_GetAllowedValues(This,AllowedValues)	\
    ( (This)->lpVtbl -> GetAllowedValues(This,AllowedValues) ) 

#define ISettingsItem_GetSettingByPath(This,Path,Setting)	\
    ( (This)->lpVtbl -> GetSettingByPath(This,Path,Setting) ) 

#define ISettingsItem_CreateSettingByPath(This,Path,Setting)	\
    ( (This)->lpVtbl -> CreateSettingByPath(This,Path,Setting) ) 

#define ISettingsItem_RemoveSettingByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveSettingByPath(This,Path) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsItem_GetTypeDefinition_Proxy( 
    ISettingsItem * This,
    /* [retval][out] */ IMetadataItem **Type);


void __RPC_STUB ISettingsItem_GetTypeDefinition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsItem_IsDynamic_Proxy( 
    ISettingsItem * This);


void __RPC_STUB ISettingsItem_IsDynamic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsItem_Assertions_Proxy( 
    ISettingsItem * This,
    /* [retval][out] */ IItemCollection **pAssertions);


void __RPC_STUB ISettingsItem_Assertions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsItem_ResetToDefault_Proxy( 
    ISettingsItem * This);


void __RPC_STUB ISettingsItem_ResetToDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsItem_GetAllowedValues_Proxy( 
    ISettingsItem * This,
    /* [retval][out] */ ISettingsAllowedValue **AllowedValues);


void __RPC_STUB ISettingsItem_GetAllowedValues_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsItem_GetSettingByPath_Proxy( 
    ISettingsItem * This,
    /* [string][in] */ const WCHAR *Path,
    /* [retval][out] */ ISettingsItem **Setting);


void __RPC_STUB ISettingsItem_GetSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsItem_CreateSettingByPath_Proxy( 
    ISettingsItem * This,
    /* [string][in] */ const WCHAR *Path,
    /* [retval][out] */ ISettingsItem **Setting);


void __RPC_STUB ISettingsItem_CreateSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsItem_RemoveSettingByPath_Proxy( 
    ISettingsItem * This,
    /* [string][in] */ const WCHAR *Path);


void __RPC_STUB ISettingsItem_RemoveSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsItem_INTERFACE_DEFINED__ */


#ifndef __ISettingsAttribute_INTERFACE_DEFINED__
#define __ISettingsAttribute_INTERFACE_DEFINED__

/* interface ISettingsAttribute */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ISettingsAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C72F-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsAttribute : public IBaseItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE IsInherited( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AttributeType( 
            /* [retval][out] */ WcmAttributeType *AttributeType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsAttribute * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            ISettingsAttribute * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            ISettingsAttribute * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            ISettingsAttribute * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ISettingsAttribute * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            ISettingsAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            ISettingsAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            ISettingsAttribute * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            ISettingsAttribute * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ISettingsAttribute * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            ISettingsAttribute * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            ISettingsAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            ISettingsAttribute * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            ISettingsAttribute * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            ISettingsAttribute * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            ISettingsAttribute * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISettingsAttribute * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISettingsAttribute * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            ISettingsAttribute * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            ISettingsAttribute * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            ISettingsAttribute * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            ISettingsAttribute * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            ISettingsAttribute * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            ISettingsAttribute * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            ISettingsAttribute * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            ISettingsAttribute * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            ISettingsAttribute * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            ISettingsAttribute * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            ISettingsAttribute * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            ISettingsAttribute * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            ISettingsAttribute * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            ISettingsAttribute * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            ISettingsAttribute * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            ISettingsAttribute * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            ISettingsAttribute * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            ISettingsAttribute * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            ISettingsAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsInherited )( 
            ISettingsAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AttributeType )( 
            ISettingsAttribute * This,
            /* [retval][out] */ WcmAttributeType *AttributeType);
        
        END_INTERFACE
    } ISettingsAttributeVtbl;

    interface ISettingsAttribute
    {
        CONST_VTBL struct ISettingsAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsAttribute_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define ISettingsAttribute_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define ISettingsAttribute_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define ISettingsAttribute_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define ISettingsAttribute_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define ISettingsAttribute_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define ISettingsAttribute_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define ISettingsAttribute_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define ISettingsAttribute_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define ISettingsAttribute_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define ISettingsAttribute_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define ISettingsAttribute_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define ISettingsAttribute_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define ISettingsAttribute_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define ISettingsAttribute_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define ISettingsAttribute_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define ISettingsAttribute_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define ISettingsAttribute_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define ISettingsAttribute_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISettingsAttribute_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISettingsAttribute_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISettingsAttribute_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISettingsAttribute_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define ISettingsAttribute_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISettingsAttribute_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISettingsAttribute_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISettingsAttribute_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define ISettingsAttribute_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISettingsAttribute_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISettingsAttribute_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define ISettingsAttribute_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISettingsAttribute_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISettingsAttribute_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISettingsAttribute_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISettingsAttribute_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISettingsAttribute_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define ISettingsAttribute_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define ISettingsAttribute_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define ISettingsAttribute_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define ISettingsAttribute_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define ISettingsAttribute_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define ISettingsAttribute_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define ISettingsAttribute_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define ISettingsAttribute_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define ISettingsAttribute_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define ISettingsAttribute_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define ISettingsAttribute_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define ISettingsAttribute_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define ISettingsAttribute_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define ISettingsAttribute_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define ISettingsAttribute_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define ISettingsAttribute_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define ISettingsAttribute_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define ISettingsAttribute_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define ISettingsAttribute_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define ISettingsAttribute_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define ISettingsAttribute_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define ISettingsAttribute_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define ISettingsAttribute_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define ISettingsAttribute_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define ISettingsAttribute_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define ISettingsAttribute_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define ISettingsAttribute_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define ISettingsAttribute_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define ISettingsAttribute_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define ISettingsAttribute_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define ISettingsAttribute_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define ISettingsAttribute_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define ISettingsAttribute_IsInherited(This)	\
    ( (This)->lpVtbl -> IsInherited(This) ) 

#define ISettingsAttribute_AttributeType(This,AttributeType)	\
    ( (This)->lpVtbl -> AttributeType(This,AttributeType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsAttribute_IsInherited_Proxy( 
    ISettingsAttribute * This);


void __RPC_STUB ISettingsAttribute_IsInherited_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISettingsAttribute_AttributeType_Proxy( 
    ISettingsAttribute * This,
    /* [retval][out] */ WcmAttributeType *AttributeType);


void __RPC_STUB ISettingsAttribute_AttributeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsAttribute_INTERFACE_DEFINED__ */


#ifndef __IMetadataItem_INTERFACE_DEFINED__
#define __IMetadataItem_INTERFACE_DEFINED__

/* interface IMetadataItem */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IMetadataItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C721-3BA4-11D7-BF56-000874CD1BAE")
    IMetadataItem : public IBaseItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Validate( 
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMetadataItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMetadataItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMetadataItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMetadataItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IMetadataItem * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IMetadataItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IMetadataItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IMetadataItem * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IMetadataItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IMetadataItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IMetadataItem * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IMetadataItem * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IMetadataItem * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IMetadataItem * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IMetadataItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IMetadataItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IMetadataItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IMetadataItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IMetadataItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IMetadataItem * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IMetadataItem * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IMetadataItem * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IMetadataItem * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IMetadataItem * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IMetadataItem * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IMetadataItem * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IMetadataItem * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IMetadataItem * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IMetadataItem * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IMetadataItem * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IMetadataItem * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IMetadataItem * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IMetadataItem * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IMetadataItem * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IMetadataItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IMetadataItem * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IMetadataItem * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IMetadataItem * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IMetadataItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IMetadataItem * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IMetadataItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IMetadataItem * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IMetadataItemVtbl;

    interface IMetadataItem
    {
        CONST_VTBL struct IMetadataItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMetadataItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMetadataItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMetadataItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMetadataItem_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IMetadataItem_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IMetadataItem_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IMetadataItem_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IMetadataItem_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IMetadataItem_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IMetadataItem_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IMetadataItem_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IMetadataItem_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IMetadataItem_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IMetadataItem_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IMetadataItem_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IMetadataItem_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IMetadataItem_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IMetadataItem_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IMetadataItem_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IMetadataItem_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IMetadataItem_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IMetadataItem_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IMetadataItem_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IMetadataItem_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IMetadataItem_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IMetadataItem_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IMetadataItem_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IMetadataItem_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IMetadataItem_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IMetadataItem_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IMetadataItem_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IMetadataItem_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IMetadataItem_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IMetadataItem_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IMetadataItem_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IMetadataItem_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IMetadataItem_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IMetadataItem_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IMetadataItem_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IMetadataItem_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IMetadataItem_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IMetadataItem_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IMetadataItem_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IMetadataItem_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IMetadataItem_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IMetadataItem_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IMetadataItem_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IMetadataItem_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IMetadataItem_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IMetadataItem_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IMetadataItem_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IMetadataItem_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IMetadataItem_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IMetadataItem_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IMetadataItem_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IMetadataItem_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IMetadataItem_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IMetadataItem_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IMetadataItem_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IMetadataItem_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IMetadataItem_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IMetadataItem_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IMetadataItem_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IMetadataItem_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IMetadataItem_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IMetadataItem_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IMetadataItem_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IMetadataItem_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IMetadataItem_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IMetadataItem_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IMetadataItem_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IMetadataItem_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadataItem_Validate_Proxy( 
    IMetadataItem * This,
    /* [in] */ WcmValidateOption Option,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB IMetadataItem_Validate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMetadataItem_INTERFACE_DEFINED__ */


#ifndef __IMetadata_INTERFACE_DEFINED__
#define __IMetadata_INTERFACE_DEFINED__

/* interface IMetadata */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IMetadata;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C723-3BA4-11D7-BF56-000874CD1BAE")
    IMetadata : public IBaseItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ComplexTypes( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SimpleTypes( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Elements( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CustomHandlers( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Substitutions( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Expressions( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Assertions( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RefactoredSettings( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SecurityDefinitions( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Variables( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE IsAssertionExpressionValid( 
            /* [string][in] */ const WCHAR *expression,
            /* [retval][out] */ ISettingsResult **ppIResult) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateAssertion( 
            /* [string][in] */ const WCHAR *name,
            /* [in] */ WcmAssertionType assertionType,
            /* [string][in] */ const WCHAR *expression,
            /* [string][in] */ const WCHAR *satValues,
            /* [in] */ BOOL bPending,
            /* [retval][out] */ IAssertion **newAssertion) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AreAssertionsInConflict( 
            /* [string][in] */ const WCHAR *assertExpression1,
            /* [string][in] */ const WCHAR *assertExpression2,
            /* [retval][out] */ ISettingsResult **pResult) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE MergeAssertions( 
            /* [string][in] */ const WCHAR *assertExpression1,
            /* [string][in] */ const WCHAR *assertExpression2,
            /* [retval][out] */ BSTR *newAssertExpression) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMetadataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMetadata * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMetadata * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMetadata * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IMetadata * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IMetadata * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IMetadata * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IMetadata * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IMetadata * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IMetadata * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IMetadata * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IMetadata * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IMetadata * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IMetadata * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IMetadata * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IMetadata * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IMetadata * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IMetadata * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IMetadata * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IMetadata * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IMetadata * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IMetadata * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IMetadata * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IMetadata * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IMetadata * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IMetadata * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IMetadata * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IMetadata * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IMetadata * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IMetadata * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IMetadata * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IMetadata * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IMetadata * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IMetadata * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IMetadata * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IMetadata * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IMetadata * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IMetadata * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ComplexTypes )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SimpleTypes )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Elements )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CustomHandlers )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Substitutions )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Expressions )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Assertions )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RefactoredSettings )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SecurityDefinitions )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Variables )( 
            IMetadata * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsAssertionExpressionValid )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *expression,
            /* [retval][out] */ ISettingsResult **ppIResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateAssertion )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *name,
            /* [in] */ WcmAssertionType assertionType,
            /* [string][in] */ const WCHAR *expression,
            /* [string][in] */ const WCHAR *satValues,
            /* [in] */ BOOL bPending,
            /* [retval][out] */ IAssertion **newAssertion);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AreAssertionsInConflict )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *assertExpression1,
            /* [string][in] */ const WCHAR *assertExpression2,
            /* [retval][out] */ ISettingsResult **pResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MergeAssertions )( 
            IMetadata * This,
            /* [string][in] */ const WCHAR *assertExpression1,
            /* [string][in] */ const WCHAR *assertExpression2,
            /* [retval][out] */ BSTR *newAssertExpression);
        
        END_INTERFACE
    } IMetadataVtbl;

    interface IMetadata
    {
        CONST_VTBL struct IMetadataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMetadata_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMetadata_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMetadata_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMetadata_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IMetadata_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IMetadata_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IMetadata_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IMetadata_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IMetadata_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IMetadata_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IMetadata_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IMetadata_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IMetadata_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IMetadata_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IMetadata_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IMetadata_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IMetadata_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IMetadata_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IMetadata_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IMetadata_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IMetadata_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IMetadata_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IMetadata_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IMetadata_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IMetadata_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IMetadata_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IMetadata_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IMetadata_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IMetadata_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IMetadata_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IMetadata_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IMetadata_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IMetadata_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IMetadata_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IMetadata_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IMetadata_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IMetadata_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IMetadata_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IMetadata_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IMetadata_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IMetadata_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IMetadata_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IMetadata_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IMetadata_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IMetadata_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IMetadata_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IMetadata_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IMetadata_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IMetadata_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IMetadata_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IMetadata_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IMetadata_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IMetadata_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IMetadata_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IMetadata_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IMetadata_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IMetadata_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IMetadata_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IMetadata_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IMetadata_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IMetadata_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IMetadata_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IMetadata_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IMetadata_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IMetadata_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IMetadata_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IMetadata_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IMetadata_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IMetadata_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IMetadata_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IMetadata_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IMetadata_ComplexTypes(This,Collection)	\
    ( (This)->lpVtbl -> ComplexTypes(This,Collection) ) 

#define IMetadata_SimpleTypes(This,Collection)	\
    ( (This)->lpVtbl -> SimpleTypes(This,Collection) ) 

#define IMetadata_Elements(This,Collection)	\
    ( (This)->lpVtbl -> Elements(This,Collection) ) 

#define IMetadata_CustomHandlers(This,Collection)	\
    ( (This)->lpVtbl -> CustomHandlers(This,Collection) ) 

#define IMetadata_Substitutions(This,Collection)	\
    ( (This)->lpVtbl -> Substitutions(This,Collection) ) 

#define IMetadata_Expressions(This,Collection)	\
    ( (This)->lpVtbl -> Expressions(This,Collection) ) 

#define IMetadata_Assertions(This,Collection)	\
    ( (This)->lpVtbl -> Assertions(This,Collection) ) 

#define IMetadata_RefactoredSettings(This,Collection)	\
    ( (This)->lpVtbl -> RefactoredSettings(This,Collection) ) 

#define IMetadata_SecurityDefinitions(This,Collection)	\
    ( (This)->lpVtbl -> SecurityDefinitions(This,Collection) ) 

#define IMetadata_Variables(This,Collection)	\
    ( (This)->lpVtbl -> Variables(This,Collection) ) 

#define IMetadata_IsAssertionExpressionValid(This,expression,ppIResult)	\
    ( (This)->lpVtbl -> IsAssertionExpressionValid(This,expression,ppIResult) ) 

#define IMetadata_CreateAssertion(This,name,assertionType,expression,satValues,bPending,newAssertion)	\
    ( (This)->lpVtbl -> CreateAssertion(This,name,assertionType,expression,satValues,bPending,newAssertion) ) 

#define IMetadata_AreAssertionsInConflict(This,assertExpression1,assertExpression2,pResult)	\
    ( (This)->lpVtbl -> AreAssertionsInConflict(This,assertExpression1,assertExpression2,pResult) ) 

#define IMetadata_MergeAssertions(This,assertExpression1,assertExpression2,newAssertExpression)	\
    ( (This)->lpVtbl -> MergeAssertions(This,assertExpression1,assertExpression2,newAssertExpression) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_ComplexTypes_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_ComplexTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_SimpleTypes_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_SimpleTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_Elements_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_Elements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_CustomHandlers_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_CustomHandlers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_Substitutions_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_Substitutions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_Expressions_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_Expressions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_Assertions_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_Assertions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_RefactoredSettings_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_RefactoredSettings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_SecurityDefinitions_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_SecurityDefinitions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_Variables_Proxy( 
    IMetadata * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB IMetadata_Variables_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_IsAssertionExpressionValid_Proxy( 
    IMetadata * This,
    /* [string][in] */ const WCHAR *expression,
    /* [retval][out] */ ISettingsResult **ppIResult);


void __RPC_STUB IMetadata_IsAssertionExpressionValid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_CreateAssertion_Proxy( 
    IMetadata * This,
    /* [string][in] */ const WCHAR *name,
    /* [in] */ WcmAssertionType assertionType,
    /* [string][in] */ const WCHAR *expression,
    /* [string][in] */ const WCHAR *satValues,
    /* [in] */ BOOL bPending,
    /* [retval][out] */ IAssertion **newAssertion);


void __RPC_STUB IMetadata_CreateAssertion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_AreAssertionsInConflict_Proxy( 
    IMetadata * This,
    /* [string][in] */ const WCHAR *assertExpression1,
    /* [string][in] */ const WCHAR *assertExpression2,
    /* [retval][out] */ ISettingsResult **pResult);


void __RPC_STUB IMetadata_AreAssertionsInConflict_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMetadata_MergeAssertions_Proxy( 
    IMetadata * This,
    /* [string][in] */ const WCHAR *assertExpression1,
    /* [string][in] */ const WCHAR *assertExpression2,
    /* [retval][out] */ BSTR *newAssertExpression);


void __RPC_STUB IMetadata_MergeAssertions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMetadata_INTERFACE_DEFINED__ */


#ifndef __ISettingsAllowedValue_INTERFACE_DEFINED__
#define __ISettingsAllowedValue_INTERFACE_DEFINED__

/* interface ISettingsAllowedValue */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_ISettingsAllowedValue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C73B-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsAllowedValue : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowedValueType( 
            /* [retval][out] */ WcmAllowedValueType *pavType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ VARIANT *pvalue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinimumValue( 
            /* [retval][out] */ VARIANT *pvalue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MaximumValue( 
            /* [retval][out] */ VARIANT *pvalue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Set( 
            /* [retval][out] */ VARIANT *pvalueSet) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsAllowedValueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsAllowedValue * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsAllowedValue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsAllowedValue * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISettingsAllowedValue * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISettingsAllowedValue * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISettingsAllowedValue * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISettingsAllowedValue * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowedValueType )( 
            ISettingsAllowedValue * This,
            /* [retval][out] */ WcmAllowedValueType *pavType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ISettingsAllowedValue * This,
            /* [retval][out] */ VARIANT *pvalue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumValue )( 
            ISettingsAllowedValue * This,
            /* [retval][out] */ VARIANT *pvalue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumValue )( 
            ISettingsAllowedValue * This,
            /* [retval][out] */ VARIANT *pvalue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Set )( 
            ISettingsAllowedValue * This,
            /* [retval][out] */ VARIANT *pvalueSet);
        
        END_INTERFACE
    } ISettingsAllowedValueVtbl;

    interface ISettingsAllowedValue
    {
        CONST_VTBL struct ISettingsAllowedValueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsAllowedValue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsAllowedValue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsAllowedValue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsAllowedValue_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISettingsAllowedValue_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISettingsAllowedValue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISettingsAllowedValue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISettingsAllowedValue_get_AllowedValueType(This,pavType)	\
    ( (This)->lpVtbl -> get_AllowedValueType(This,pavType) ) 

#define ISettingsAllowedValue_get_Value(This,pvalue)	\
    ( (This)->lpVtbl -> get_Value(This,pvalue) ) 

#define ISettingsAllowedValue_get_MinimumValue(This,pvalue)	\
    ( (This)->lpVtbl -> get_MinimumValue(This,pvalue) ) 

#define ISettingsAllowedValue_get_MaximumValue(This,pvalue)	\
    ( (This)->lpVtbl -> get_MaximumValue(This,pvalue) ) 

#define ISettingsAllowedValue_get_Set(This,pvalueSet)	\
    ( (This)->lpVtbl -> get_Set(This,pvalueSet) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsAllowedValue_get_AllowedValueType_Proxy( 
    ISettingsAllowedValue * This,
    /* [retval][out] */ WcmAllowedValueType *pavType);


void __RPC_STUB ISettingsAllowedValue_get_AllowedValueType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsAllowedValue_get_Value_Proxy( 
    ISettingsAllowedValue * This,
    /* [retval][out] */ VARIANT *pvalue);


void __RPC_STUB ISettingsAllowedValue_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsAllowedValue_get_MinimumValue_Proxy( 
    ISettingsAllowedValue * This,
    /* [retval][out] */ VARIANT *pvalue);


void __RPC_STUB ISettingsAllowedValue_get_MinimumValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsAllowedValue_get_MaximumValue_Proxy( 
    ISettingsAllowedValue * This,
    /* [retval][out] */ VARIANT *pvalue);


void __RPC_STUB ISettingsAllowedValue_get_MaximumValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsAllowedValue_get_Set_Proxy( 
    ISettingsAllowedValue * This,
    /* [retval][out] */ VARIANT *pvalueSet);


void __RPC_STUB ISettingsAllowedValue_get_Set_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsAllowedValue_INTERFACE_DEFINED__ */


#ifndef __ISettingsResult_INTERFACE_DEFINED__
#define __ISettingsResult_INTERFACE_DEFINED__

/* interface ISettingsResult */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_ISettingsResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C72D-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *description) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ErrorCode( 
            /* [retval][out] */ HRESULT *hrOut) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContextDescription( 
            BSTR *description) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            DWORD *dwLine) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Column( 
            DWORD *dwColumn) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Source( 
            /* [retval][out] */ BSTR *file) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsResult * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISettingsResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISettingsResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISettingsResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISettingsResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISettingsResult * This,
            /* [retval][out] */ BSTR *description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorCode )( 
            ISettingsResult * This,
            /* [retval][out] */ HRESULT *hrOut);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContextDescription )( 
            ISettingsResult * This,
            BSTR *description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            ISettingsResult * This,
            DWORD *dwLine);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Column )( 
            ISettingsResult * This,
            DWORD *dwColumn);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            ISettingsResult * This,
            /* [retval][out] */ BSTR *file);
        
        END_INTERFACE
    } ISettingsResultVtbl;

    interface ISettingsResult
    {
        CONST_VTBL struct ISettingsResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsResult_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsResult_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsResult_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsResult_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISettingsResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISettingsResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISettingsResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISettingsResult_get_Description(This,description)	\
    ( (This)->lpVtbl -> get_Description(This,description) ) 

#define ISettingsResult_get_ErrorCode(This,hrOut)	\
    ( (This)->lpVtbl -> get_ErrorCode(This,hrOut) ) 

#define ISettingsResult_get_ContextDescription(This,description)	\
    ( (This)->lpVtbl -> get_ContextDescription(This,description) ) 

#define ISettingsResult_get_Line(This,dwLine)	\
    ( (This)->lpVtbl -> get_Line(This,dwLine) ) 

#define ISettingsResult_get_Column(This,dwColumn)	\
    ( (This)->lpVtbl -> get_Column(This,dwColumn) ) 

#define ISettingsResult_get_Source(This,file)	\
    ( (This)->lpVtbl -> get_Source(This,file) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsResult_get_Description_Proxy( 
    ISettingsResult * This,
    /* [retval][out] */ BSTR *description);


void __RPC_STUB ISettingsResult_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsResult_get_ErrorCode_Proxy( 
    ISettingsResult * This,
    /* [retval][out] */ HRESULT *hrOut);


void __RPC_STUB ISettingsResult_get_ErrorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsResult_get_ContextDescription_Proxy( 
    ISettingsResult * This,
    BSTR *description);


void __RPC_STUB ISettingsResult_get_ContextDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsResult_get_Line_Proxy( 
    ISettingsResult * This,
    DWORD *dwLine);


void __RPC_STUB ISettingsResult_get_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsResult_get_Column_Proxy( 
    ISettingsResult * This,
    DWORD *dwColumn);


void __RPC_STUB ISettingsResult_get_Column_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsResult_get_Source_Proxy( 
    ISettingsResult * This,
    /* [retval][out] */ BSTR *file);


void __RPC_STUB ISettingsResult_get_Source_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsResult_INTERFACE_DEFINED__ */


#ifndef __IAssertion_INTERFACE_DEFINED__
#define __IAssertion_INTERFACE_DEFINED__

/* interface IAssertion */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IAssertion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C732-3BA4-11D7-BF56-000874CD1BAE")
    IAssertion : public IMetadataItem
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetExpression( 
            /* [retval][out] */ BSTR *expression) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExpression( 
            /* [string][in] */ const WCHAR *newExpression) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetIsPending( 
            /* [retval][out] */ BOOL *bResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetIsPending( 
            /* [in] */ BOOL bSetting) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFailedAction( 
            /* [retval][out] */ BSTR *action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetFailedAction( 
            /* [string][in] */ const WCHAR *action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSilencedAction( 
            /* [retval][out] */ BSTR *action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSilencedAction( 
            /* [string][in] */ const WCHAR *newAction) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSource( 
            /* [retval][out] */ BSTR *source) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSource( 
            /* [string][in] */ const WCHAR *source) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCategory( 
            /* [retval][out] */ BSTR *category) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCategory( 
            /* [string][in] */ const WCHAR *category) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAssertionType( 
            /* [retval][out] */ WcmAssertionType *at) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExplicitSilenceState( 
            /* [retval][out] */ BOOL *bIsSilenced) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExplicitSilenceState( 
            /* [in] */ BOOL isSilence) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetImplicitSilenceState( 
            /* [retval][out] */ BOOL *isSilenced) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSettingNames( 
            /* [retval][out] */ BSTR *names) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUsers( 
            /* [retval][out] */ BSTR *users) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetUsers( 
            /* [string][in] */ const WCHAR *users) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSilenceLinks( 
            /* [retval][out] */ BSTR *slink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSilenceLinks( 
            /* [string][in] */ const WCHAR *slink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBackwardSilenceLinks( 
            /* [retval][out] */ BSTR *backlink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBackwardSilenceLinks( 
            /* [string][in] */ const WCHAR *backLink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHelpUrl( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHelpUrl( 
            /* [string][in] */ const WCHAR *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSilencer( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSilenceCause( 
            /* [retval][out] */ WcmSilenceCause *psc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSatisfyValueExpression( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSatisfyValueExpression( 
            /* [string][in] */ const WCHAR *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMasterSwitch( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMasterSwitch( 
            /* [string][in] */ const WCHAR *value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAssertionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAssertion * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAssertion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAssertion * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IAssertion * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IAssertion * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IAssertion * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IAssertion * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IAssertion * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IAssertion * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IAssertion * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IAssertion * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IAssertion * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IAssertion * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IAssertion * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IAssertion * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IAssertion * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IAssertion * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IAssertion * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IAssertion * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IAssertion * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IAssertion * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IAssertion * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IAssertion * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IAssertion * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IAssertion * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IAssertion * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IAssertion * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IAssertion * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IAssertion * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IAssertion * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IAssertion * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IAssertion * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IAssertion * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IAssertion * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetExpression )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *expression);
        
        HRESULT ( STDMETHODCALLTYPE *SetExpression )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *newExpression);
        
        HRESULT ( STDMETHODCALLTYPE *GetIsPending )( 
            IAssertion * This,
            /* [retval][out] */ BOOL *bResult);
        
        HRESULT ( STDMETHODCALLTYPE *SetIsPending )( 
            IAssertion * This,
            /* [in] */ BOOL bSetting);
        
        HRESULT ( STDMETHODCALLTYPE *GetFailedAction )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *action);
        
        HRESULT ( STDMETHODCALLTYPE *SetFailedAction )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *action);
        
        HRESULT ( STDMETHODCALLTYPE *GetSilencedAction )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *action);
        
        HRESULT ( STDMETHODCALLTYPE *SetSilencedAction )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *newAction);
        
        HRESULT ( STDMETHODCALLTYPE *GetSource )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *source);
        
        HRESULT ( STDMETHODCALLTYPE *SetSource )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *source);
        
        HRESULT ( STDMETHODCALLTYPE *GetCategory )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *category);
        
        HRESULT ( STDMETHODCALLTYPE *SetCategory )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *category);
        
        HRESULT ( STDMETHODCALLTYPE *GetAssertionType )( 
            IAssertion * This,
            /* [retval][out] */ WcmAssertionType *at);
        
        HRESULT ( STDMETHODCALLTYPE *GetExplicitSilenceState )( 
            IAssertion * This,
            /* [retval][out] */ BOOL *bIsSilenced);
        
        HRESULT ( STDMETHODCALLTYPE *SetExplicitSilenceState )( 
            IAssertion * This,
            /* [in] */ BOOL isSilence);
        
        HRESULT ( STDMETHODCALLTYPE *GetImplicitSilenceState )( 
            IAssertion * This,
            /* [retval][out] */ BOOL *isSilenced);
        
        HRESULT ( STDMETHODCALLTYPE *GetSettingNames )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *names);
        
        HRESULT ( STDMETHODCALLTYPE *GetUsers )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *users);
        
        HRESULT ( STDMETHODCALLTYPE *SetUsers )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *users);
        
        HRESULT ( STDMETHODCALLTYPE *GetSilenceLinks )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *slink);
        
        HRESULT ( STDMETHODCALLTYPE *SetSilenceLinks )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *slink);
        
        HRESULT ( STDMETHODCALLTYPE *GetBackwardSilenceLinks )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *backlink);
        
        HRESULT ( STDMETHODCALLTYPE *SetBackwardSilenceLinks )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *backLink);
        
        HRESULT ( STDMETHODCALLTYPE *GetHelpUrl )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *value);
        
        HRESULT ( STDMETHODCALLTYPE *SetHelpUrl )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetSilencer )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetSilenceCause )( 
            IAssertion * This,
            /* [retval][out] */ WcmSilenceCause *psc);
        
        HRESULT ( STDMETHODCALLTYPE *GetSatisfyValueExpression )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *value);
        
        HRESULT ( STDMETHODCALLTYPE *SetSatisfyValueExpression )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *value);
        
        HRESULT ( STDMETHODCALLTYPE *GetMasterSwitch )( 
            IAssertion * This,
            /* [retval][out] */ BSTR *value);
        
        HRESULT ( STDMETHODCALLTYPE *SetMasterSwitch )( 
            IAssertion * This,
            /* [string][in] */ const WCHAR *value);
        
        END_INTERFACE
    } IAssertionVtbl;

    interface IAssertion
    {
        CONST_VTBL struct IAssertionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAssertion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAssertion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAssertion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAssertion_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IAssertion_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IAssertion_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IAssertion_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IAssertion_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IAssertion_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IAssertion_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IAssertion_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IAssertion_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IAssertion_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IAssertion_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IAssertion_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IAssertion_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IAssertion_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IAssertion_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IAssertion_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IAssertion_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IAssertion_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IAssertion_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IAssertion_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IAssertion_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IAssertion_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IAssertion_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IAssertion_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IAssertion_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IAssertion_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IAssertion_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IAssertion_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IAssertion_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IAssertion_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IAssertion_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IAssertion_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IAssertion_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IAssertion_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IAssertion_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IAssertion_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IAssertion_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IAssertion_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IAssertion_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IAssertion_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IAssertion_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IAssertion_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IAssertion_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IAssertion_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IAssertion_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IAssertion_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IAssertion_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IAssertion_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IAssertion_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IAssertion_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IAssertion_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IAssertion_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IAssertion_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IAssertion_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IAssertion_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IAssertion_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IAssertion_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IAssertion_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IAssertion_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IAssertion_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IAssertion_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IAssertion_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IAssertion_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IAssertion_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IAssertion_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IAssertion_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IAssertion_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IAssertion_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IAssertion_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IAssertion_GetExpression(This,expression)	\
    ( (This)->lpVtbl -> GetExpression(This,expression) ) 

#define IAssertion_SetExpression(This,newExpression)	\
    ( (This)->lpVtbl -> SetExpression(This,newExpression) ) 

#define IAssertion_GetIsPending(This,bResult)	\
    ( (This)->lpVtbl -> GetIsPending(This,bResult) ) 

#define IAssertion_SetIsPending(This,bSetting)	\
    ( (This)->lpVtbl -> SetIsPending(This,bSetting) ) 

#define IAssertion_GetFailedAction(This,action)	\
    ( (This)->lpVtbl -> GetFailedAction(This,action) ) 

#define IAssertion_SetFailedAction(This,action)	\
    ( (This)->lpVtbl -> SetFailedAction(This,action) ) 

#define IAssertion_GetSilencedAction(This,action)	\
    ( (This)->lpVtbl -> GetSilencedAction(This,action) ) 

#define IAssertion_SetSilencedAction(This,newAction)	\
    ( (This)->lpVtbl -> SetSilencedAction(This,newAction) ) 

#define IAssertion_GetSource(This,source)	\
    ( (This)->lpVtbl -> GetSource(This,source) ) 

#define IAssertion_SetSource(This,source)	\
    ( (This)->lpVtbl -> SetSource(This,source) ) 

#define IAssertion_GetCategory(This,category)	\
    ( (This)->lpVtbl -> GetCategory(This,category) ) 

#define IAssertion_SetCategory(This,category)	\
    ( (This)->lpVtbl -> SetCategory(This,category) ) 

#define IAssertion_GetAssertionType(This,at)	\
    ( (This)->lpVtbl -> GetAssertionType(This,at) ) 

#define IAssertion_GetExplicitSilenceState(This,bIsSilenced)	\
    ( (This)->lpVtbl -> GetExplicitSilenceState(This,bIsSilenced) ) 

#define IAssertion_SetExplicitSilenceState(This,isSilence)	\
    ( (This)->lpVtbl -> SetExplicitSilenceState(This,isSilence) ) 

#define IAssertion_GetImplicitSilenceState(This,isSilenced)	\
    ( (This)->lpVtbl -> GetImplicitSilenceState(This,isSilenced) ) 

#define IAssertion_GetSettingNames(This,names)	\
    ( (This)->lpVtbl -> GetSettingNames(This,names) ) 

#define IAssertion_GetUsers(This,users)	\
    ( (This)->lpVtbl -> GetUsers(This,users) ) 

#define IAssertion_SetUsers(This,users)	\
    ( (This)->lpVtbl -> SetUsers(This,users) ) 

#define IAssertion_GetSilenceLinks(This,slink)	\
    ( (This)->lpVtbl -> GetSilenceLinks(This,slink) ) 

#define IAssertion_SetSilenceLinks(This,slink)	\
    ( (This)->lpVtbl -> SetSilenceLinks(This,slink) ) 

#define IAssertion_GetBackwardSilenceLinks(This,backlink)	\
    ( (This)->lpVtbl -> GetBackwardSilenceLinks(This,backlink) ) 

#define IAssertion_SetBackwardSilenceLinks(This,backLink)	\
    ( (This)->lpVtbl -> SetBackwardSilenceLinks(This,backLink) ) 

#define IAssertion_GetHelpUrl(This,value)	\
    ( (This)->lpVtbl -> GetHelpUrl(This,value) ) 

#define IAssertion_SetHelpUrl(This,value)	\
    ( (This)->lpVtbl -> SetHelpUrl(This,value) ) 

#define IAssertion_GetSilencer(This,value)	\
    ( (This)->lpVtbl -> GetSilencer(This,value) ) 

#define IAssertion_GetSilenceCause(This,psc)	\
    ( (This)->lpVtbl -> GetSilenceCause(This,psc) ) 

#define IAssertion_GetSatisfyValueExpression(This,value)	\
    ( (This)->lpVtbl -> GetSatisfyValueExpression(This,value) ) 

#define IAssertion_SetSatisfyValueExpression(This,value)	\
    ( (This)->lpVtbl -> SetSatisfyValueExpression(This,value) ) 

#define IAssertion_GetMasterSwitch(This,value)	\
    ( (This)->lpVtbl -> GetMasterSwitch(This,value) ) 

#define IAssertion_SetMasterSwitch(This,value)	\
    ( (This)->lpVtbl -> SetMasterSwitch(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IAssertion_GetExpression_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *expression);


void __RPC_STUB IAssertion_GetExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetExpression_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *newExpression);


void __RPC_STUB IAssertion_SetExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetIsPending_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BOOL *bResult);


void __RPC_STUB IAssertion_GetIsPending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetIsPending_Proxy( 
    IAssertion * This,
    /* [in] */ BOOL bSetting);


void __RPC_STUB IAssertion_SetIsPending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetFailedAction_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *action);


void __RPC_STUB IAssertion_GetFailedAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetFailedAction_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *action);


void __RPC_STUB IAssertion_SetFailedAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetSilencedAction_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *action);


void __RPC_STUB IAssertion_GetSilencedAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetSilencedAction_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *newAction);


void __RPC_STUB IAssertion_SetSilencedAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetSource_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *source);


void __RPC_STUB IAssertion_GetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetSource_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *source);


void __RPC_STUB IAssertion_SetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetCategory_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *category);


void __RPC_STUB IAssertion_GetCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetCategory_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *category);


void __RPC_STUB IAssertion_SetCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetAssertionType_Proxy( 
    IAssertion * This,
    /* [retval][out] */ WcmAssertionType *at);


void __RPC_STUB IAssertion_GetAssertionType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetExplicitSilenceState_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BOOL *bIsSilenced);


void __RPC_STUB IAssertion_GetExplicitSilenceState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetExplicitSilenceState_Proxy( 
    IAssertion * This,
    /* [in] */ BOOL isSilence);


void __RPC_STUB IAssertion_SetExplicitSilenceState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetImplicitSilenceState_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BOOL *isSilenced);


void __RPC_STUB IAssertion_GetImplicitSilenceState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetSettingNames_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *names);


void __RPC_STUB IAssertion_GetSettingNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetUsers_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *users);


void __RPC_STUB IAssertion_GetUsers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetUsers_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *users);


void __RPC_STUB IAssertion_SetUsers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetSilenceLinks_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *slink);


void __RPC_STUB IAssertion_GetSilenceLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetSilenceLinks_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *slink);


void __RPC_STUB IAssertion_SetSilenceLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetBackwardSilenceLinks_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *backlink);


void __RPC_STUB IAssertion_GetBackwardSilenceLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetBackwardSilenceLinks_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *backLink);


void __RPC_STUB IAssertion_SetBackwardSilenceLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetHelpUrl_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *value);


void __RPC_STUB IAssertion_GetHelpUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetHelpUrl_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *value);


void __RPC_STUB IAssertion_SetHelpUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetSilencer_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *value);


void __RPC_STUB IAssertion_GetSilencer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetSilenceCause_Proxy( 
    IAssertion * This,
    /* [retval][out] */ WcmSilenceCause *psc);


void __RPC_STUB IAssertion_GetSilenceCause_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetSatisfyValueExpression_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *value);


void __RPC_STUB IAssertion_GetSatisfyValueExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetSatisfyValueExpression_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *value);


void __RPC_STUB IAssertion_SetSatisfyValueExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_GetMasterSwitch_Proxy( 
    IAssertion * This,
    /* [retval][out] */ BSTR *value);


void __RPC_STUB IAssertion_GetMasterSwitch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IAssertion_SetMasterSwitch_Proxy( 
    IAssertion * This,
    /* [string][in] */ const WCHAR *value);


void __RPC_STUB IAssertion_SetMasterSwitch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAssertion_INTERFACE_DEFINED__ */


#ifndef __IComplexType_INTERFACE_DEFINED__
#define __IComplexType_INTERFACE_DEFINED__

/* interface IComplexType */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IComplexType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C725-3BA4-11D7-BF56-000874CD1BAE")
    IComplexType : public IMetadataItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AddMemberElement( 
            /* [string][in] */ const WCHAR *Name,
            /* [string][in] */ const WCHAR *Type,
            /* [in] */ const VARIANT *DefaultValue,
            /* [retval][out] */ IMemberElement **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetMemberElement( 
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IMemberElement **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveMemberElement( 
            /* [string][in] */ const WCHAR *Name) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AddMemberAttribute( 
            /* [string][in] */ const WCHAR *Name,
            /* [string][in] */ const WCHAR *Type,
            /* [in] */ const VARIANT *DefaultValue,
            /* [retval][out] */ IMemberAttribute **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetMemberAttribute( 
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IMemberAttribute **Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveMemberAttribute( 
            /* [string][in] */ const WCHAR *Name) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IComplexTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IComplexType * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IComplexType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IComplexType * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IComplexType * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IComplexType * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IComplexType * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IComplexType * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IComplexType * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IComplexType * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IComplexType * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IComplexType * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IComplexType * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IComplexType * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IComplexType * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IComplexType * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IComplexType * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IComplexType * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IComplexType * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IComplexType * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IComplexType * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IComplexType * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IComplexType * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IComplexType * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IComplexType * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IComplexType * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IComplexType * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IComplexType * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IComplexType * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IComplexType * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IComplexType * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IComplexType * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IComplexType * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IComplexType * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IComplexType * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IComplexType * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IComplexType * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IComplexType * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IComplexType * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IComplexType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IComplexType * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddMemberElement )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [string][in] */ const WCHAR *Type,
            /* [in] */ const VARIANT *DefaultValue,
            /* [retval][out] */ IMemberElement **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetMemberElement )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IMemberElement **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveMemberElement )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddMemberAttribute )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [string][in] */ const WCHAR *Type,
            /* [in] */ const VARIANT *DefaultValue,
            /* [retval][out] */ IMemberAttribute **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetMemberAttribute )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IMemberAttribute **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveMemberAttribute )( 
            IComplexType * This,
            /* [string][in] */ const WCHAR *Name);
        
        END_INTERFACE
    } IComplexTypeVtbl;

    interface IComplexType
    {
        CONST_VTBL struct IComplexTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IComplexType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IComplexType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IComplexType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IComplexType_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IComplexType_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IComplexType_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IComplexType_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IComplexType_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IComplexType_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IComplexType_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IComplexType_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IComplexType_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IComplexType_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IComplexType_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IComplexType_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IComplexType_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IComplexType_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IComplexType_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IComplexType_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IComplexType_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IComplexType_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IComplexType_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IComplexType_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IComplexType_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IComplexType_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IComplexType_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IComplexType_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IComplexType_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IComplexType_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IComplexType_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IComplexType_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IComplexType_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IComplexType_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IComplexType_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IComplexType_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IComplexType_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IComplexType_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IComplexType_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IComplexType_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IComplexType_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IComplexType_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IComplexType_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IComplexType_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IComplexType_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IComplexType_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IComplexType_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IComplexType_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IComplexType_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IComplexType_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IComplexType_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IComplexType_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IComplexType_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IComplexType_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IComplexType_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IComplexType_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IComplexType_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IComplexType_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IComplexType_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IComplexType_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IComplexType_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IComplexType_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IComplexType_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IComplexType_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IComplexType_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IComplexType_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IComplexType_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IComplexType_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IComplexType_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IComplexType_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IComplexType_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IComplexType_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IComplexType_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IComplexType_AddMemberElement(This,Name,Type,DefaultValue,Item)	\
    ( (This)->lpVtbl -> AddMemberElement(This,Name,Type,DefaultValue,Item) ) 

#define IComplexType_GetMemberElement(This,Name,Item)	\
    ( (This)->lpVtbl -> GetMemberElement(This,Name,Item) ) 

#define IComplexType_RemoveMemberElement(This,Name)	\
    ( (This)->lpVtbl -> RemoveMemberElement(This,Name) ) 

#define IComplexType_AddMemberAttribute(This,Name,Type,DefaultValue,Item)	\
    ( (This)->lpVtbl -> AddMemberAttribute(This,Name,Type,DefaultValue,Item) ) 

#define IComplexType_GetMemberAttribute(This,Name,Item)	\
    ( (This)->lpVtbl -> GetMemberAttribute(This,Name,Item) ) 

#define IComplexType_RemoveMemberAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveMemberAttribute(This,Name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IComplexType_AddMemberElement_Proxy( 
    IComplexType * This,
    /* [string][in] */ const WCHAR *Name,
    /* [string][in] */ const WCHAR *Type,
    /* [in] */ const VARIANT *DefaultValue,
    /* [retval][out] */ IMemberElement **Item);


void __RPC_STUB IComplexType_AddMemberElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IComplexType_GetMemberElement_Proxy( 
    IComplexType * This,
    /* [string][in] */ const WCHAR *Name,
    /* [retval][out] */ IMemberElement **Item);


void __RPC_STUB IComplexType_GetMemberElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IComplexType_RemoveMemberElement_Proxy( 
    IComplexType * This,
    /* [string][in] */ const WCHAR *Name);


void __RPC_STUB IComplexType_RemoveMemberElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IComplexType_AddMemberAttribute_Proxy( 
    IComplexType * This,
    /* [string][in] */ const WCHAR *Name,
    /* [string][in] */ const WCHAR *Type,
    /* [in] */ const VARIANT *DefaultValue,
    /* [retval][out] */ IMemberAttribute **Item);


void __RPC_STUB IComplexType_AddMemberAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IComplexType_GetMemberAttribute_Proxy( 
    IComplexType * This,
    /* [string][in] */ const WCHAR *Name,
    /* [retval][out] */ IMemberAttribute **Item);


void __RPC_STUB IComplexType_GetMemberAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IComplexType_RemoveMemberAttribute_Proxy( 
    IComplexType * This,
    /* [string][in] */ const WCHAR *Name);


void __RPC_STUB IComplexType_RemoveMemberAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IComplexType_INTERFACE_DEFINED__ */


#ifndef __ISimpleType_INTERFACE_DEFINED__
#define __ISimpleType_INTERFACE_DEFINED__

/* interface ISimpleType */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ISimpleType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C726-3BA4-11D7-BF56-000874CD1BAE")
    ISimpleType : public IMetadataItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetXsdType( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetXsdType( 
            /* [string][in] */ const WCHAR *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT __stdcall GetArrayType( 
            /* [retval][out] */ BOOL *pfArrayType) = 0;
        
        virtual /* [helpstring] */ HRESULT __stdcall SetArrayType( 
            /* [in] */ BOOL fArrayType) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Restrictions( 
            /* [retval][out] */ IItemCollection **Collection) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimpleTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimpleType * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimpleType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimpleType * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            ISimpleType * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            ISimpleType * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            ISimpleType * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ISimpleType * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            ISimpleType * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            ISimpleType * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            ISimpleType * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            ISimpleType * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ISimpleType * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            ISimpleType * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            ISimpleType * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            ISimpleType * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            ISimpleType * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            ISimpleType * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            ISimpleType * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISimpleType * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISimpleType * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISimpleType * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            ISimpleType * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            ISimpleType * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            ISimpleType * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            ISimpleType * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            ISimpleType * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            ISimpleType * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            ISimpleType * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            ISimpleType * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            ISimpleType * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            ISimpleType * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            ISimpleType * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            ISimpleType * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            ISimpleType * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            ISimpleType * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            ISimpleType * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            ISimpleType * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            ISimpleType * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            ISimpleType * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ISimpleType * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetXsdType )( 
            ISimpleType * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetXsdType )( 
            ISimpleType * This,
            /* [string][in] */ const WCHAR *Type);
        
        /* [helpstring] */ HRESULT ( __stdcall *GetArrayType )( 
            ISimpleType * This,
            /* [retval][out] */ BOOL *pfArrayType);
        
        /* [helpstring] */ HRESULT ( __stdcall *SetArrayType )( 
            ISimpleType * This,
            /* [in] */ BOOL fArrayType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Restrictions )( 
            ISimpleType * This,
            /* [retval][out] */ IItemCollection **Collection);
        
        END_INTERFACE
    } ISimpleTypeVtbl;

    interface ISimpleType
    {
        CONST_VTBL struct ISimpleTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimpleType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimpleType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimpleType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimpleType_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define ISimpleType_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define ISimpleType_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define ISimpleType_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define ISimpleType_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define ISimpleType_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define ISimpleType_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define ISimpleType_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define ISimpleType_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define ISimpleType_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define ISimpleType_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define ISimpleType_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define ISimpleType_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define ISimpleType_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define ISimpleType_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define ISimpleType_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define ISimpleType_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define ISimpleType_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define ISimpleType_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISimpleType_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISimpleType_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISimpleType_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISimpleType_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define ISimpleType_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISimpleType_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISimpleType_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISimpleType_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define ISimpleType_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISimpleType_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISimpleType_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define ISimpleType_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISimpleType_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISimpleType_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISimpleType_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISimpleType_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISimpleType_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define ISimpleType_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define ISimpleType_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define ISimpleType_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define ISimpleType_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define ISimpleType_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define ISimpleType_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define ISimpleType_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define ISimpleType_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define ISimpleType_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define ISimpleType_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define ISimpleType_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define ISimpleType_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define ISimpleType_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define ISimpleType_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define ISimpleType_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define ISimpleType_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define ISimpleType_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define ISimpleType_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define ISimpleType_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define ISimpleType_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define ISimpleType_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define ISimpleType_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define ISimpleType_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define ISimpleType_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define ISimpleType_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define ISimpleType_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define ISimpleType_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define ISimpleType_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define ISimpleType_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define ISimpleType_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define ISimpleType_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define ISimpleType_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define ISimpleType_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define ISimpleType_GetXsdType(This,Type)	\
    ( (This)->lpVtbl -> GetXsdType(This,Type) ) 

#define ISimpleType_SetXsdType(This,Type)	\
    ( (This)->lpVtbl -> SetXsdType(This,Type) ) 

#define ISimpleType_GetArrayType(This,pfArrayType)	\
    ( (This)->lpVtbl -> GetArrayType(This,pfArrayType) ) 

#define ISimpleType_SetArrayType(This,fArrayType)	\
    ( (This)->lpVtbl -> SetArrayType(This,fArrayType) ) 

#define ISimpleType_Restrictions(This,Collection)	\
    ( (This)->lpVtbl -> Restrictions(This,Collection) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISimpleType_GetXsdType_Proxy( 
    ISimpleType * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB ISimpleType_GetXsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISimpleType_SetXsdType_Proxy( 
    ISimpleType * This,
    /* [string][in] */ const WCHAR *Type);


void __RPC_STUB ISimpleType_SetXsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT __stdcall ISimpleType_GetArrayType_Proxy( 
    ISimpleType * This,
    /* [retval][out] */ BOOL *pfArrayType);


void __RPC_STUB ISimpleType_GetArrayType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT __stdcall ISimpleType_SetArrayType_Proxy( 
    ISimpleType * This,
    /* [in] */ BOOL fArrayType);


void __RPC_STUB ISimpleType_SetArrayType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ISimpleType_Restrictions_Proxy( 
    ISimpleType * This,
    /* [retval][out] */ IItemCollection **Collection);


void __RPC_STUB ISimpleType_Restrictions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISimpleType_INTERFACE_DEFINED__ */


#ifndef __ICustomHandler_INTERFACE_DEFINED__
#define __ICustomHandler_INTERFACE_DEFINED__

/* interface ICustomHandler */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ICustomHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C727-3BA4-11D7-BF56-000874CD1BAE")
    ICustomHandler : public IMetadataItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetHandlerType( 
            /* [retval][out] */ BSTR *HandlerType) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetHandlerType( 
            /* [string][in] */ const WCHAR *HandlerType) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetSource( 
            /* [retval][out] */ BSTR *Source) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetSource( 
            /* [string][in] */ const WCHAR *Source) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICustomHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICustomHandler * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICustomHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICustomHandler * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            ICustomHandler * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            ICustomHandler * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            ICustomHandler * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ICustomHandler * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            ICustomHandler * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            ICustomHandler * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            ICustomHandler * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            ICustomHandler * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ICustomHandler * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            ICustomHandler * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            ICustomHandler * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            ICustomHandler * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            ICustomHandler * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            ICustomHandler * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            ICustomHandler * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ICustomHandler * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ICustomHandler * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ICustomHandler * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            ICustomHandler * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            ICustomHandler * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            ICustomHandler * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            ICustomHandler * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            ICustomHandler * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            ICustomHandler * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            ICustomHandler * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            ICustomHandler * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            ICustomHandler * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            ICustomHandler * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            ICustomHandler * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            ICustomHandler * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            ICustomHandler * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            ICustomHandler * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            ICustomHandler * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            ICustomHandler * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            ICustomHandler * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            ICustomHandler * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ICustomHandler * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetHandlerType )( 
            ICustomHandler * This,
            /* [retval][out] */ BSTR *HandlerType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetHandlerType )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *HandlerType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSource )( 
            ICustomHandler * This,
            /* [retval][out] */ BSTR *Source);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetSource )( 
            ICustomHandler * This,
            /* [string][in] */ const WCHAR *Source);
        
        END_INTERFACE
    } ICustomHandlerVtbl;

    interface ICustomHandler
    {
        CONST_VTBL struct ICustomHandlerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICustomHandler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICustomHandler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICustomHandler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICustomHandler_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define ICustomHandler_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define ICustomHandler_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define ICustomHandler_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define ICustomHandler_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define ICustomHandler_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define ICustomHandler_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define ICustomHandler_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define ICustomHandler_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define ICustomHandler_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define ICustomHandler_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define ICustomHandler_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define ICustomHandler_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define ICustomHandler_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define ICustomHandler_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define ICustomHandler_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define ICustomHandler_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define ICustomHandler_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define ICustomHandler_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ICustomHandler_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ICustomHandler_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ICustomHandler_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ICustomHandler_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define ICustomHandler_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ICustomHandler_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ICustomHandler_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ICustomHandler_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define ICustomHandler_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ICustomHandler_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ICustomHandler_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define ICustomHandler_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ICustomHandler_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ICustomHandler_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ICustomHandler_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ICustomHandler_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ICustomHandler_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define ICustomHandler_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define ICustomHandler_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define ICustomHandler_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define ICustomHandler_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define ICustomHandler_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define ICustomHandler_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define ICustomHandler_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define ICustomHandler_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define ICustomHandler_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define ICustomHandler_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define ICustomHandler_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define ICustomHandler_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define ICustomHandler_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define ICustomHandler_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define ICustomHandler_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define ICustomHandler_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define ICustomHandler_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define ICustomHandler_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define ICustomHandler_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define ICustomHandler_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define ICustomHandler_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define ICustomHandler_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define ICustomHandler_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define ICustomHandler_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define ICustomHandler_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define ICustomHandler_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define ICustomHandler_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define ICustomHandler_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define ICustomHandler_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define ICustomHandler_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define ICustomHandler_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define ICustomHandler_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define ICustomHandler_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define ICustomHandler_GetHandlerType(This,HandlerType)	\
    ( (This)->lpVtbl -> GetHandlerType(This,HandlerType) ) 

#define ICustomHandler_SetHandlerType(This,HandlerType)	\
    ( (This)->lpVtbl -> SetHandlerType(This,HandlerType) ) 

#define ICustomHandler_GetSource(This,Source)	\
    ( (This)->lpVtbl -> GetSource(This,Source) ) 

#define ICustomHandler_SetSource(This,Source)	\
    ( (This)->lpVtbl -> SetSource(This,Source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE ICustomHandler_GetHandlerType_Proxy( 
    ICustomHandler * This,
    /* [retval][out] */ BSTR *HandlerType);


void __RPC_STUB ICustomHandler_GetHandlerType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ICustomHandler_SetHandlerType_Proxy( 
    ICustomHandler * This,
    /* [string][in] */ const WCHAR *HandlerType);


void __RPC_STUB ICustomHandler_SetHandlerType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ICustomHandler_GetSource_Proxy( 
    ICustomHandler * This,
    /* [retval][out] */ BSTR *Source);


void __RPC_STUB ICustomHandler_GetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE ICustomHandler_SetSource_Proxy( 
    ICustomHandler * This,
    /* [string][in] */ const WCHAR *Source);


void __RPC_STUB ICustomHandler_SetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICustomHandler_INTERFACE_DEFINED__ */


#ifndef __IElement_INTERFACE_DEFINED__
#define __IElement_INTERFACE_DEFINED__

/* interface IElement */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C728-3BA4-11D7-BF56-000874CD1BAE")
    IElement : public IMetadataItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetXsdType( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetXsdType( 
            /* [string][in] */ const WCHAR *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetTypeDefinition( 
            /* [retval][out] */ IMetadataItem **Type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IElement * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IElement * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IElement * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IElement * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IElement * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IElement * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IElement * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IElement * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IElement * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IElement * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IElement * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IElement * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IElement * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IElement * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IElement * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IElement * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IElement * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IElement * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IElement * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IElement * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IElement * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IElement * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IElement * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IElement * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IElement * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IElement * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IElement * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IElement * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IElement * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IElement * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IElement * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IElement * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IElement * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IElement * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IElement * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IElement * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IElement * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IElement * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetXsdType )( 
            IElement * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetXsdType )( 
            IElement * This,
            /* [string][in] */ const WCHAR *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTypeDefinition )( 
            IElement * This,
            /* [retval][out] */ IMetadataItem **Type);
        
        END_INTERFACE
    } IElementVtbl;

    interface IElement
    {
        CONST_VTBL struct IElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IElement_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IElement_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IElement_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IElement_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IElement_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IElement_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IElement_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IElement_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IElement_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IElement_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IElement_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IElement_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IElement_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IElement_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IElement_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IElement_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IElement_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IElement_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IElement_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IElement_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IElement_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IElement_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IElement_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IElement_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IElement_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IElement_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IElement_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IElement_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IElement_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IElement_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IElement_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IElement_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IElement_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IElement_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IElement_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IElement_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IElement_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IElement_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IElement_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IElement_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IElement_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IElement_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IElement_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IElement_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IElement_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IElement_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IElement_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IElement_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IElement_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IElement_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IElement_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IElement_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IElement_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IElement_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IElement_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IElement_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IElement_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IElement_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IElement_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IElement_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IElement_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IElement_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IElement_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IElement_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IElement_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IElement_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IElement_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IElement_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IElement_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IElement_GetXsdType(This,Type)	\
    ( (This)->lpVtbl -> GetXsdType(This,Type) ) 

#define IElement_SetXsdType(This,Type)	\
    ( (This)->lpVtbl -> SetXsdType(This,Type) ) 

#define IElement_GetTypeDefinition(This,Type)	\
    ( (This)->lpVtbl -> GetTypeDefinition(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IElement_GetXsdType_Proxy( 
    IElement * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB IElement_GetXsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IElement_SetXsdType_Proxy( 
    IElement * This,
    /* [string][in] */ const WCHAR *Type);


void __RPC_STUB IElement_SetXsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IElement_GetTypeDefinition_Proxy( 
    IElement * This,
    /* [retval][out] */ IMetadataItem **Type);


void __RPC_STUB IElement_GetTypeDefinition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IElement_INTERFACE_DEFINED__ */


#ifndef __IVariable_INTERFACE_DEFINED__
#define __IVariable_INTERFACE_DEFINED__

/* interface IVariable */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IVariable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C742-3BA4-11D7-BF56-000874CD1BAE")
    IVariable : public IMetadataItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IVariableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVariable * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVariable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVariable * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IVariable * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IVariable * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IVariable * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IVariable * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IVariable * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IVariable * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IVariable * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IVariable * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IVariable * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IVariable * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IVariable * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IVariable * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IVariable * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IVariable * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IVariable * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IVariable * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IVariable * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IVariable * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IVariable * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IVariable * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IVariable * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IVariable * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IVariable * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IVariable * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IVariable * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IVariable * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IVariable * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IVariable * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IVariable * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IVariable * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IVariable * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IVariable * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IVariable * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IVariable * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IVariable * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IVariable * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IVariable * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IVariable * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IVariableVtbl;

    interface IVariable
    {
        CONST_VTBL struct IVariableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVariable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IVariable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IVariable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IVariable_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IVariable_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IVariable_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IVariable_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IVariable_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IVariable_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IVariable_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IVariable_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IVariable_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IVariable_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IVariable_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IVariable_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IVariable_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IVariable_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IVariable_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IVariable_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IVariable_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IVariable_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IVariable_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IVariable_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IVariable_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IVariable_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IVariable_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IVariable_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IVariable_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IVariable_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IVariable_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IVariable_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IVariable_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IVariable_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IVariable_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IVariable_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IVariable_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IVariable_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IVariable_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IVariable_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IVariable_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IVariable_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IVariable_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IVariable_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IVariable_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IVariable_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IVariable_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IVariable_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IVariable_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IVariable_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IVariable_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IVariable_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IVariable_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IVariable_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IVariable_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IVariable_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IVariable_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IVariable_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IVariable_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IVariable_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IVariable_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IVariable_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IVariable_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IVariable_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IVariable_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IVariable_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IVariable_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IVariable_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IVariable_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IVariable_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IVariable_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IVariable_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IVariable_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IVariable_INTERFACE_DEFINED__ */


#ifndef __IVariableNode_INTERFACE_DEFINED__
#define __IVariableNode_INTERFACE_DEFINED__

/* interface IVariableNode */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IVariableNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C743-3BA4-11D7-BF56-000874CD1BAE")
    IVariableNode : public IMetadataItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IVariableNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVariableNode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVariableNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVariableNode * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IVariableNode * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IVariableNode * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IVariableNode * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IVariableNode * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IVariableNode * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IVariableNode * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IVariableNode * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IVariableNode * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IVariableNode * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IVariableNode * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IVariableNode * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IVariableNode * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IVariableNode * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IVariableNode * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IVariableNode * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IVariableNode * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IVariableNode * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IVariableNode * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IVariableNode * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IVariableNode * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IVariableNode * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IVariableNode * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IVariableNode * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IVariableNode * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IVariableNode * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IVariableNode * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IVariableNode * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IVariableNode * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IVariableNode * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IVariableNode * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IVariableNode * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IVariableNode * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IVariableNode * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IVariableNode * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IVariableNode * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IVariableNode * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IVariableNode * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IVariableNode * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IVariableNodeVtbl;

    interface IVariableNode
    {
        CONST_VTBL struct IVariableNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVariableNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IVariableNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IVariableNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IVariableNode_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IVariableNode_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IVariableNode_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IVariableNode_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IVariableNode_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IVariableNode_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IVariableNode_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IVariableNode_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IVariableNode_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IVariableNode_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IVariableNode_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IVariableNode_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IVariableNode_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IVariableNode_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IVariableNode_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IVariableNode_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IVariableNode_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IVariableNode_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IVariableNode_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IVariableNode_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IVariableNode_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IVariableNode_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IVariableNode_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IVariableNode_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IVariableNode_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IVariableNode_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IVariableNode_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IVariableNode_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IVariableNode_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IVariableNode_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IVariableNode_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IVariableNode_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IVariableNode_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IVariableNode_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IVariableNode_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IVariableNode_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IVariableNode_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IVariableNode_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IVariableNode_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IVariableNode_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IVariableNode_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IVariableNode_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IVariableNode_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IVariableNode_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IVariableNode_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IVariableNode_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IVariableNode_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IVariableNode_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IVariableNode_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IVariableNode_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IVariableNode_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IVariableNode_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IVariableNode_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IVariableNode_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IVariableNode_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IVariableNode_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IVariableNode_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IVariableNode_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IVariableNode_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IVariableNode_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IVariableNode_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IVariableNode_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IVariableNode_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IVariableNode_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IVariableNode_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IVariableNode_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IVariableNode_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IVariableNode_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IVariableNode_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IVariableNode_INTERFACE_DEFINED__ */


#ifndef __ISubstitution_INTERFACE_DEFINED__
#define __ISubstitution_INTERFACE_DEFINED__

/* interface ISubstitution */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ISubstitution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C729-3BA4-11D7-BF56-000874CD1BAE")
    ISubstitution : public IMetadataItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ISubstitutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISubstitution * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISubstitution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISubstitution * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            ISubstitution * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            ISubstitution * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            ISubstitution * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ISubstitution * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            ISubstitution * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            ISubstitution * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            ISubstitution * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            ISubstitution * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ISubstitution * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            ISubstitution * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            ISubstitution * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            ISubstitution * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            ISubstitution * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            ISubstitution * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            ISubstitution * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISubstitution * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISubstitution * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISubstitution * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            ISubstitution * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            ISubstitution * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            ISubstitution * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            ISubstitution * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            ISubstitution * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            ISubstitution * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            ISubstitution * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            ISubstitution * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            ISubstitution * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            ISubstitution * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            ISubstitution * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            ISubstitution * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            ISubstitution * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            ISubstitution * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            ISubstitution * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            ISubstitution * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            ISubstitution * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            ISubstitution * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            ISubstitution * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ISubstitution * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } ISubstitutionVtbl;

    interface ISubstitution
    {
        CONST_VTBL struct ISubstitutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISubstitution_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define ISubstitution_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define ISubstitution_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define ISubstitution_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define ISubstitution_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define ISubstitution_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define ISubstitution_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define ISubstitution_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define ISubstitution_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define ISubstitution_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define ISubstitution_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define ISubstitution_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define ISubstitution_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define ISubstitution_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define ISubstitution_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define ISubstitution_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define ISubstitution_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define ISubstitution_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define ISubstitution_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISubstitution_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISubstitution_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISubstitution_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISubstitution_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define ISubstitution_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISubstitution_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISubstitution_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISubstitution_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define ISubstitution_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISubstitution_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISubstitution_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define ISubstitution_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISubstitution_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISubstitution_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISubstitution_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISubstitution_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISubstitution_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define ISubstitution_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define ISubstitution_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define ISubstitution_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define ISubstitution_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define ISubstitution_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define ISubstitution_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define ISubstitution_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define ISubstitution_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define ISubstitution_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define ISubstitution_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define ISubstitution_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define ISubstitution_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define ISubstitution_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define ISubstitution_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define ISubstitution_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define ISubstitution_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define ISubstitution_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define ISubstitution_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define ISubstitution_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define ISubstitution_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define ISubstitution_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define ISubstitution_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define ISubstitution_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define ISubstitution_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define ISubstitution_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define ISubstitution_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define ISubstitution_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define ISubstitution_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define ISubstitution_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define ISubstitution_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define ISubstitution_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define ISubstitution_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define ISubstitution_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISubstitution_INTERFACE_DEFINED__ */


#ifndef __IExpression_INTERFACE_DEFINED__
#define __IExpression_INTERFACE_DEFINED__

/* interface IExpression */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IExpression;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C72C-3BA4-11D7-BF56-000874CD1BAE")
    IExpression : public IMetadataItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IExpressionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExpression * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExpression * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExpression * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IExpression * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IExpression * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IExpression * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IExpression * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IExpression * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IExpression * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IExpression * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IExpression * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IExpression * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IExpression * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IExpression * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IExpression * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IExpression * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IExpression * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IExpression * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IExpression * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IExpression * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IExpression * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IExpression * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IExpression * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IExpression * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IExpression * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IExpression * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IExpression * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IExpression * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IExpression * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IExpression * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IExpression * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IExpression * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IExpression * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IExpression * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IExpression * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IExpression * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IExpression * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IExpression * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IExpression * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IExpression * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IExpression * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IExpressionVtbl;

    interface IExpression
    {
        CONST_VTBL struct IExpressionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExpression_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExpression_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExpression_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExpression_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IExpression_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IExpression_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IExpression_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IExpression_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IExpression_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IExpression_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IExpression_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IExpression_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IExpression_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IExpression_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IExpression_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IExpression_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IExpression_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IExpression_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IExpression_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IExpression_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IExpression_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IExpression_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IExpression_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IExpression_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IExpression_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IExpression_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IExpression_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IExpression_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IExpression_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IExpression_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IExpression_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IExpression_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IExpression_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IExpression_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IExpression_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IExpression_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IExpression_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IExpression_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IExpression_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IExpression_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IExpression_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IExpression_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IExpression_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IExpression_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IExpression_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IExpression_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IExpression_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IExpression_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IExpression_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IExpression_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IExpression_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IExpression_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IExpression_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IExpression_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IExpression_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IExpression_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IExpression_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IExpression_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IExpression_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IExpression_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IExpression_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IExpression_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IExpression_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IExpression_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IExpression_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IExpression_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IExpression_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IExpression_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IExpression_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IExpression_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IExpression_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IExpression_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExpression_INTERFACE_DEFINED__ */


#ifndef __IMemberElement_INTERFACE_DEFINED__
#define __IMemberElement_INTERFACE_DEFINED__

/* interface IMemberElement */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IMemberElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C72A-3BA4-11D7-BF56-000874CD1BAE")
    IMemberElement : public IMetadataItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetXsdType( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetXsdType( 
            /* [string][in] */ const WCHAR *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetTypeDefinition( 
            /* [retval][out] */ IMetadataItem **Type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMemberElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMemberElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMemberElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMemberElement * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IMemberElement * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IMemberElement * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IMemberElement * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IMemberElement * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IMemberElement * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IMemberElement * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IMemberElement * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IMemberElement * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IMemberElement * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IMemberElement * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IMemberElement * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IMemberElement * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IMemberElement * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IMemberElement * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IMemberElement * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IMemberElement * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IMemberElement * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IMemberElement * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IMemberElement * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IMemberElement * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IMemberElement * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IMemberElement * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IMemberElement * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IMemberElement * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IMemberElement * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IMemberElement * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IMemberElement * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IMemberElement * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IMemberElement * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IMemberElement * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IMemberElement * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IMemberElement * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IMemberElement * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IMemberElement * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IMemberElement * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IMemberElement * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IMemberElement * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetXsdType )( 
            IMemberElement * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetXsdType )( 
            IMemberElement * This,
            /* [string][in] */ const WCHAR *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTypeDefinition )( 
            IMemberElement * This,
            /* [retval][out] */ IMetadataItem **Type);
        
        END_INTERFACE
    } IMemberElementVtbl;

    interface IMemberElement
    {
        CONST_VTBL struct IMemberElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMemberElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMemberElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMemberElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMemberElement_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IMemberElement_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IMemberElement_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IMemberElement_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IMemberElement_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IMemberElement_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IMemberElement_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IMemberElement_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IMemberElement_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IMemberElement_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IMemberElement_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IMemberElement_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IMemberElement_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IMemberElement_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IMemberElement_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IMemberElement_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IMemberElement_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IMemberElement_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IMemberElement_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IMemberElement_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IMemberElement_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IMemberElement_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IMemberElement_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IMemberElement_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IMemberElement_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IMemberElement_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IMemberElement_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IMemberElement_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IMemberElement_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IMemberElement_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IMemberElement_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IMemberElement_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IMemberElement_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IMemberElement_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IMemberElement_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IMemberElement_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IMemberElement_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IMemberElement_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IMemberElement_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IMemberElement_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IMemberElement_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IMemberElement_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IMemberElement_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IMemberElement_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IMemberElement_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IMemberElement_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IMemberElement_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IMemberElement_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IMemberElement_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IMemberElement_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IMemberElement_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IMemberElement_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IMemberElement_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IMemberElement_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IMemberElement_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IMemberElement_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IMemberElement_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IMemberElement_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IMemberElement_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IMemberElement_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IMemberElement_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IMemberElement_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IMemberElement_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IMemberElement_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IMemberElement_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IMemberElement_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IMemberElement_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IMemberElement_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IMemberElement_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IMemberElement_GetXsdType(This,Type)	\
    ( (This)->lpVtbl -> GetXsdType(This,Type) ) 

#define IMemberElement_SetXsdType(This,Type)	\
    ( (This)->lpVtbl -> SetXsdType(This,Type) ) 

#define IMemberElement_GetTypeDefinition(This,Type)	\
    ( (This)->lpVtbl -> GetTypeDefinition(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMemberElement_GetXsdType_Proxy( 
    IMemberElement * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB IMemberElement_GetXsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMemberElement_SetXsdType_Proxy( 
    IMemberElement * This,
    /* [string][in] */ const WCHAR *Type);


void __RPC_STUB IMemberElement_SetXsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMemberElement_GetTypeDefinition_Proxy( 
    IMemberElement * This,
    /* [retval][out] */ IMetadataItem **Type);


void __RPC_STUB IMemberElement_GetTypeDefinition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMemberElement_INTERFACE_DEFINED__ */


#ifndef __IMemberAttribute_INTERFACE_DEFINED__
#define __IMemberAttribute_INTERFACE_DEFINED__

/* interface IMemberAttribute */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IMemberAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C72B-3BA4-11D7-BF56-000874CD1BAE")
    IMemberAttribute : public IMetadataItem
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetXsdType( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetXsdType( 
            /* [string][in] */ const WCHAR *Type) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetTypeDefinition( 
            /* [retval][out] */ IMetadataItem **Type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMemberAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMemberAttribute * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMemberAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMemberAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IMemberAttribute * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IMemberAttribute * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IMemberAttribute * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IMemberAttribute * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IMemberAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IMemberAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IMemberAttribute * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IMemberAttribute * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IMemberAttribute * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IMemberAttribute * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IMemberAttribute * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IMemberAttribute * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IMemberAttribute * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IMemberAttribute * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IMemberAttribute * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IMemberAttribute * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IMemberAttribute * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IMemberAttribute * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IMemberAttribute * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IMemberAttribute * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IMemberAttribute * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IMemberAttribute * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IMemberAttribute * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IMemberAttribute * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IMemberAttribute * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IMemberAttribute * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IMemberAttribute * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IMemberAttribute * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IMemberAttribute * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IMemberAttribute * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IMemberAttribute * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IMemberAttribute * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IMemberAttribute * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IMemberAttribute * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IMemberAttribute * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IMemberAttribute * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IMemberAttribute * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetXsdType )( 
            IMemberAttribute * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetXsdType )( 
            IMemberAttribute * This,
            /* [string][in] */ const WCHAR *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetTypeDefinition )( 
            IMemberAttribute * This,
            /* [retval][out] */ IMetadataItem **Type);
        
        END_INTERFACE
    } IMemberAttributeVtbl;

    interface IMemberAttribute
    {
        CONST_VTBL struct IMemberAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMemberAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMemberAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMemberAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMemberAttribute_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IMemberAttribute_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IMemberAttribute_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IMemberAttribute_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IMemberAttribute_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IMemberAttribute_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IMemberAttribute_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IMemberAttribute_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IMemberAttribute_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IMemberAttribute_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IMemberAttribute_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IMemberAttribute_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IMemberAttribute_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IMemberAttribute_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IMemberAttribute_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IMemberAttribute_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IMemberAttribute_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IMemberAttribute_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IMemberAttribute_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IMemberAttribute_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IMemberAttribute_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IMemberAttribute_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IMemberAttribute_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IMemberAttribute_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IMemberAttribute_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IMemberAttribute_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IMemberAttribute_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IMemberAttribute_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IMemberAttribute_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IMemberAttribute_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IMemberAttribute_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IMemberAttribute_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IMemberAttribute_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IMemberAttribute_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IMemberAttribute_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IMemberAttribute_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IMemberAttribute_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IMemberAttribute_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IMemberAttribute_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IMemberAttribute_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IMemberAttribute_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IMemberAttribute_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IMemberAttribute_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IMemberAttribute_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IMemberAttribute_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IMemberAttribute_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IMemberAttribute_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IMemberAttribute_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IMemberAttribute_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IMemberAttribute_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IMemberAttribute_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IMemberAttribute_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IMemberAttribute_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IMemberAttribute_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IMemberAttribute_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IMemberAttribute_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IMemberAttribute_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IMemberAttribute_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IMemberAttribute_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IMemberAttribute_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IMemberAttribute_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IMemberAttribute_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IMemberAttribute_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IMemberAttribute_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IMemberAttribute_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IMemberAttribute_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IMemberAttribute_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IMemberAttribute_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IMemberAttribute_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IMemberAttribute_GetXsdType(This,Type)	\
    ( (This)->lpVtbl -> GetXsdType(This,Type) ) 

#define IMemberAttribute_SetXsdType(This,Type)	\
    ( (This)->lpVtbl -> SetXsdType(This,Type) ) 

#define IMemberAttribute_GetTypeDefinition(This,Type)	\
    ( (This)->lpVtbl -> GetTypeDefinition(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMemberAttribute_GetXsdType_Proxy( 
    IMemberAttribute * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB IMemberAttribute_GetXsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMemberAttribute_SetXsdType_Proxy( 
    IMemberAttribute * This,
    /* [string][in] */ const WCHAR *Type);


void __RPC_STUB IMemberAttribute_SetXsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IMemberAttribute_GetTypeDefinition_Proxy( 
    IMemberAttribute * This,
    /* [retval][out] */ IMetadataItem **Type);


void __RPC_STUB IMemberAttribute_GetTypeDefinition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMemberAttribute_INTERFACE_DEFINED__ */


#ifndef __IRefactoredSetting_INTERFACE_DEFINED__
#define __IRefactoredSetting_INTERFACE_DEFINED__

/* interface IRefactoredSetting */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IRefactoredSetting;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C73C-3BA4-11D7-BF56-000874CD1BAE")
    IRefactoredSetting : public IMetadataItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IRefactoredSettingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRefactoredSetting * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRefactoredSetting * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRefactoredSetting * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IRefactoredSetting * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IRefactoredSetting * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IRefactoredSetting * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IRefactoredSetting * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IRefactoredSetting * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IRefactoredSetting * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IRefactoredSetting * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IRefactoredSetting * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IRefactoredSetting * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IRefactoredSetting * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IRefactoredSetting * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IRefactoredSetting * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IRefactoredSetting * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IRefactoredSetting * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IRefactoredSetting * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IRefactoredSetting * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IRefactoredSetting * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IRefactoredSetting * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IRefactoredSetting * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IRefactoredSetting * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IRefactoredSetting * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IRefactoredSetting * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IRefactoredSetting * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IRefactoredSetting * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IRefactoredSetting * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IRefactoredSetting * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IRefactoredSetting * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IRefactoredSetting * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IRefactoredSetting * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IRefactoredSetting * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IRefactoredSetting * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IRefactoredSetting * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IRefactoredSetting * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IRefactoredSetting * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IRefactoredSetting * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IRefactoredSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IRefactoredSetting * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IRefactoredSettingVtbl;

    interface IRefactoredSetting
    {
        CONST_VTBL struct IRefactoredSettingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRefactoredSetting_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRefactoredSetting_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRefactoredSetting_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRefactoredSetting_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IRefactoredSetting_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IRefactoredSetting_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IRefactoredSetting_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IRefactoredSetting_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IRefactoredSetting_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IRefactoredSetting_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IRefactoredSetting_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IRefactoredSetting_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IRefactoredSetting_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IRefactoredSetting_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IRefactoredSetting_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IRefactoredSetting_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IRefactoredSetting_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IRefactoredSetting_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IRefactoredSetting_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IRefactoredSetting_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IRefactoredSetting_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IRefactoredSetting_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IRefactoredSetting_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IRefactoredSetting_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IRefactoredSetting_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IRefactoredSetting_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IRefactoredSetting_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IRefactoredSetting_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IRefactoredSetting_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IRefactoredSetting_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IRefactoredSetting_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IRefactoredSetting_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IRefactoredSetting_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IRefactoredSetting_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IRefactoredSetting_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IRefactoredSetting_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IRefactoredSetting_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IRefactoredSetting_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IRefactoredSetting_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IRefactoredSetting_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IRefactoredSetting_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IRefactoredSetting_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IRefactoredSetting_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IRefactoredSetting_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IRefactoredSetting_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IRefactoredSetting_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IRefactoredSetting_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IRefactoredSetting_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IRefactoredSetting_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IRefactoredSetting_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IRefactoredSetting_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IRefactoredSetting_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IRefactoredSetting_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IRefactoredSetting_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IRefactoredSetting_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IRefactoredSetting_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IRefactoredSetting_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IRefactoredSetting_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IRefactoredSetting_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IRefactoredSetting_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IRefactoredSetting_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IRefactoredSetting_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IRefactoredSetting_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IRefactoredSetting_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IRefactoredSetting_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IRefactoredSetting_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IRefactoredSetting_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IRefactoredSetting_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IRefactoredSetting_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IRefactoredSetting_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IRefactoredSetting_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IRefactoredSetting_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRefactoredSetting_INTERFACE_DEFINED__ */


#ifndef __IValueSet_INTERFACE_DEFINED__
#define __IValueSet_INTERFACE_DEFINED__

/* interface IValueSet */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IValueSet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C73D-3BA4-11D7-BF56-000874CD1BAE")
    IValueSet : public IMetadataItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IValueSetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IValueSet * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IValueSet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IValueSet * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IValueSet * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IValueSet * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IValueSet * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IValueSet * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IValueSet * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IValueSet * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IValueSet * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IValueSet * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IValueSet * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IValueSet * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IValueSet * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IValueSet * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IValueSet * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IValueSet * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IValueSet * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IValueSet * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IValueSet * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IValueSet * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IValueSet * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IValueSet * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IValueSet * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IValueSet * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IValueSet * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IValueSet * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IValueSet * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IValueSet * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IValueSet * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IValueSet * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IValueSet * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IValueSet * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IValueSet * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IValueSet * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IValueSet * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IValueSet * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IValueSet * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IValueSet * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IValueSet * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IValueSet * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IValueSetVtbl;

    interface IValueSet
    {
        CONST_VTBL struct IValueSetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IValueSet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IValueSet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IValueSet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IValueSet_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IValueSet_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IValueSet_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IValueSet_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IValueSet_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IValueSet_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IValueSet_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IValueSet_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IValueSet_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IValueSet_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IValueSet_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IValueSet_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IValueSet_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IValueSet_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IValueSet_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IValueSet_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IValueSet_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IValueSet_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IValueSet_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IValueSet_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IValueSet_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IValueSet_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IValueSet_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IValueSet_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IValueSet_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IValueSet_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IValueSet_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IValueSet_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IValueSet_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IValueSet_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IValueSet_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IValueSet_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IValueSet_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IValueSet_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IValueSet_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IValueSet_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IValueSet_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IValueSet_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IValueSet_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IValueSet_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IValueSet_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IValueSet_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IValueSet_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IValueSet_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IValueSet_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IValueSet_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IValueSet_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IValueSet_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IValueSet_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IValueSet_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IValueSet_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IValueSet_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IValueSet_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IValueSet_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IValueSet_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IValueSet_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IValueSet_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IValueSet_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IValueSet_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IValueSet_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IValueSet_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IValueSet_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IValueSet_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IValueSet_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IValueSet_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IValueSet_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IValueSet_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IValueSet_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IValueSet_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IValueSet_INTERFACE_DEFINED__ */


#ifndef __IControlledSetting_INTERFACE_DEFINED__
#define __IControlledSetting_INTERFACE_DEFINED__

/* interface IControlledSetting */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IControlledSetting;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C73E-3BA4-11D7-BF56-000874CD1BAE")
    IControlledSetting : public IMetadataItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IControlledSettingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IControlledSetting * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IControlledSetting * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IControlledSetting * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IControlledSetting * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IControlledSetting * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IControlledSetting * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IControlledSetting * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IControlledSetting * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IControlledSetting * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IControlledSetting * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IControlledSetting * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IControlledSetting * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IControlledSetting * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IControlledSetting * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IControlledSetting * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IControlledSetting * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IControlledSetting * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IControlledSetting * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IControlledSetting * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IControlledSetting * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IControlledSetting * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IControlledSetting * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IControlledSetting * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IControlledSetting * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IControlledSetting * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IControlledSetting * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IControlledSetting * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IControlledSetting * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IControlledSetting * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IControlledSetting * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IControlledSetting * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IControlledSetting * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IControlledSetting * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IControlledSetting * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IControlledSetting * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IControlledSetting * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IControlledSetting * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IControlledSetting * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IControlledSetting * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IControlledSetting * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IControlledSetting * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IControlledSettingVtbl;

    interface IControlledSetting
    {
        CONST_VTBL struct IControlledSettingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IControlledSetting_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IControlledSetting_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IControlledSetting_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IControlledSetting_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IControlledSetting_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IControlledSetting_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IControlledSetting_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IControlledSetting_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IControlledSetting_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IControlledSetting_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IControlledSetting_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IControlledSetting_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IControlledSetting_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IControlledSetting_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IControlledSetting_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IControlledSetting_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IControlledSetting_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IControlledSetting_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IControlledSetting_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IControlledSetting_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IControlledSetting_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IControlledSetting_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IControlledSetting_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IControlledSetting_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IControlledSetting_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IControlledSetting_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IControlledSetting_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IControlledSetting_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IControlledSetting_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IControlledSetting_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IControlledSetting_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IControlledSetting_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IControlledSetting_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IControlledSetting_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IControlledSetting_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IControlledSetting_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IControlledSetting_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IControlledSetting_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IControlledSetting_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IControlledSetting_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IControlledSetting_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IControlledSetting_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IControlledSetting_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IControlledSetting_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IControlledSetting_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IControlledSetting_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IControlledSetting_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IControlledSetting_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IControlledSetting_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IControlledSetting_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IControlledSetting_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IControlledSetting_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IControlledSetting_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IControlledSetting_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IControlledSetting_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IControlledSetting_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IControlledSetting_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IControlledSetting_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IControlledSetting_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IControlledSetting_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IControlledSetting_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IControlledSetting_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IControlledSetting_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IControlledSetting_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IControlledSetting_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IControlledSetting_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IControlledSetting_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IControlledSetting_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IControlledSetting_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IControlledSetting_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IControlledSetting_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define IControlledSetting_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IControlledSetting_INTERFACE_DEFINED__ */


#ifndef __ISecurityDefinition_INTERFACE_DEFINED__
#define __ISecurityDefinition_INTERFACE_DEFINED__

/* interface ISecurityDefinition */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ISecurityDefinition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C741-3BA4-11D7-BF56-000874CD1BAE")
    ISecurityDefinition : public IMetadataItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ISecurityDefinitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISecurityDefinition * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISecurityDefinition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISecurityDefinition * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            ISecurityDefinition * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            ISecurityDefinition * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            ISecurityDefinition * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ISecurityDefinition * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            ISecurityDefinition * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            ISecurityDefinition * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            ISecurityDefinition * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            ISecurityDefinition * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ISecurityDefinition * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            ISecurityDefinition * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            ISecurityDefinition * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            ISecurityDefinition * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            ISecurityDefinition * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            ISecurityDefinition * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            ISecurityDefinition * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISecurityDefinition * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISecurityDefinition * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            ISecurityDefinition * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            ISecurityDefinition * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            ISecurityDefinition * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            ISecurityDefinition * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            ISecurityDefinition * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            ISecurityDefinition * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            ISecurityDefinition * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            ISecurityDefinition * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            ISecurityDefinition * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            ISecurityDefinition * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            ISecurityDefinition * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            ISecurityDefinition * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            ISecurityDefinition * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            ISecurityDefinition * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            ISecurityDefinition * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            ISecurityDefinition * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            ISecurityDefinition * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            ISecurityDefinition * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            ISecurityDefinition * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ISecurityDefinition * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } ISecurityDefinitionVtbl;

    interface ISecurityDefinition
    {
        CONST_VTBL struct ISecurityDefinitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISecurityDefinition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISecurityDefinition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISecurityDefinition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISecurityDefinition_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define ISecurityDefinition_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define ISecurityDefinition_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define ISecurityDefinition_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define ISecurityDefinition_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define ISecurityDefinition_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define ISecurityDefinition_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define ISecurityDefinition_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define ISecurityDefinition_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define ISecurityDefinition_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define ISecurityDefinition_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define ISecurityDefinition_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define ISecurityDefinition_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define ISecurityDefinition_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define ISecurityDefinition_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define ISecurityDefinition_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define ISecurityDefinition_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define ISecurityDefinition_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define ISecurityDefinition_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISecurityDefinition_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISecurityDefinition_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISecurityDefinition_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISecurityDefinition_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define ISecurityDefinition_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISecurityDefinition_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISecurityDefinition_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISecurityDefinition_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define ISecurityDefinition_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISecurityDefinition_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISecurityDefinition_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define ISecurityDefinition_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISecurityDefinition_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISecurityDefinition_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISecurityDefinition_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISecurityDefinition_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISecurityDefinition_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define ISecurityDefinition_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define ISecurityDefinition_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define ISecurityDefinition_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define ISecurityDefinition_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define ISecurityDefinition_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define ISecurityDefinition_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define ISecurityDefinition_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define ISecurityDefinition_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define ISecurityDefinition_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define ISecurityDefinition_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define ISecurityDefinition_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define ISecurityDefinition_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define ISecurityDefinition_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define ISecurityDefinition_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define ISecurityDefinition_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define ISecurityDefinition_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define ISecurityDefinition_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define ISecurityDefinition_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define ISecurityDefinition_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define ISecurityDefinition_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define ISecurityDefinition_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define ISecurityDefinition_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define ISecurityDefinition_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define ISecurityDefinition_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define ISecurityDefinition_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define ISecurityDefinition_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define ISecurityDefinition_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define ISecurityDefinition_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define ISecurityDefinition_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define ISecurityDefinition_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define ISecurityDefinition_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define ISecurityDefinition_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#define ISecurityDefinition_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISecurityDefinition_INTERFACE_DEFINED__ */


#ifndef __ITransactionsItem_INTERFACE_DEFINED__
#define __ITransactionsItem_INTERFACE_DEFINED__

/* interface ITransactionsItem */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_ITransactionsItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C73F-3BA4-11D7-BF56-000874CD1BAE")
    ITransactionsItem : public IBaseItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ITransactionsItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITransactionsItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITransactionsItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITransactionsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            ITransactionsItem * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            ITransactionsItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            ITransactionsItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            ITransactionsItem * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            ITransactionsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            ITransactionsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            ITransactionsItem * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            ITransactionsItem * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ITransactionsItem * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            ITransactionsItem * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            ITransactionsItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            ITransactionsItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            ITransactionsItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            ITransactionsItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            ITransactionsItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ITransactionsItem * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ITransactionsItem * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ITransactionsItem * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            ITransactionsItem * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            ITransactionsItem * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            ITransactionsItem * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            ITransactionsItem * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            ITransactionsItem * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            ITransactionsItem * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            ITransactionsItem * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            ITransactionsItem * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            ITransactionsItem * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            ITransactionsItem * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            ITransactionsItem * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            ITransactionsItem * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            ITransactionsItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            ITransactionsItem * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            ITransactionsItem * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            ITransactionsItem * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            ITransactionsItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            ITransactionsItem * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            ITransactionsItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        END_INTERFACE
    } ITransactionsItemVtbl;

    interface ITransactionsItem
    {
        CONST_VTBL struct ITransactionsItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITransactionsItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITransactionsItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITransactionsItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITransactionsItem_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define ITransactionsItem_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define ITransactionsItem_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define ITransactionsItem_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define ITransactionsItem_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define ITransactionsItem_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define ITransactionsItem_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define ITransactionsItem_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define ITransactionsItem_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define ITransactionsItem_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define ITransactionsItem_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define ITransactionsItem_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define ITransactionsItem_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define ITransactionsItem_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define ITransactionsItem_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define ITransactionsItem_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define ITransactionsItem_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define ITransactionsItem_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define ITransactionsItem_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ITransactionsItem_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ITransactionsItem_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ITransactionsItem_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ITransactionsItem_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define ITransactionsItem_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ITransactionsItem_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ITransactionsItem_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ITransactionsItem_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define ITransactionsItem_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ITransactionsItem_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ITransactionsItem_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define ITransactionsItem_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ITransactionsItem_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ITransactionsItem_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ITransactionsItem_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ITransactionsItem_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ITransactionsItem_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define ITransactionsItem_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define ITransactionsItem_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define ITransactionsItem_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define ITransactionsItem_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define ITransactionsItem_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define ITransactionsItem_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define ITransactionsItem_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define ITransactionsItem_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define ITransactionsItem_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define ITransactionsItem_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define ITransactionsItem_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define ITransactionsItem_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define ITransactionsItem_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define ITransactionsItem_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define ITransactionsItem_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define ITransactionsItem_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define ITransactionsItem_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define ITransactionsItem_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define ITransactionsItem_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define ITransactionsItem_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define ITransactionsItem_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define ITransactionsItem_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define ITransactionsItem_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define ITransactionsItem_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define ITransactionsItem_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define ITransactionsItem_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define ITransactionsItem_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define ITransactionsItem_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define ITransactionsItem_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define ITransactionsItem_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define ITransactionsItem_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define ITransactionsItem_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITransactionsItem_INTERFACE_DEFINED__ */


#ifndef __IChangeRecordItem_INTERFACE_DEFINED__
#define __IChangeRecordItem_INTERFACE_DEFINED__

/* interface IChangeRecordItem */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IChangeRecordItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C740-3BA4-11D7-BF56-000874CD1BAE")
    IChangeRecordItem : public IBaseItem
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IChangeRecordItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IChangeRecordItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IChangeRecordItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IChangeRecordItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IChangeRecordItem * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPath )( 
            IChangeRecordItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetFullPath )( 
            IChangeRecordItem * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IChangeRecordItem * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsReadOnly )( 
            IChangeRecordItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *IsDirty )( 
            IChangeRecordItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNodeType )( 
            IChangeRecordItem * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            IChangeRecordItem * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDisplayName )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *DisplayName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IChangeRecordItem * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Description);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IChangeRecordItem * This,
            /* [retval][out] */ IBaseItem **Parent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *HasChild )( 
            IChangeRecordItem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IChangeRecordItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IChangeRecordItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultValue )( 
            IChangeRecordItem * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultValue )( 
            IChangeRecordItem * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IChangeRecordItem * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IChangeRecordItem * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Children )( 
            IChangeRecordItem * This,
            /* [retval][out] */ IItemCollection **Children);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItem **Child);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Key,
            /* [string][in] */ const WCHAR *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Item1,
            /* [string][in] */ const WCHAR *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Attributes )( 
            IChangeRecordItem * This,
            /* [retval][out] */ IItemCollection **Attributes);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Name);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Path,
            /* [retval][out] */ IBaseItem **Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Path);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger )( 
            IChangeRecordItem * This,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger )( 
            IChangeRecordItem * This,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64 )( 
            IChangeRecordItem * This,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64 )( 
            IChangeRecordItem * This,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueString )( 
            IChangeRecordItem * This,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueString )( 
            IChangeRecordItem * This,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBoolean )( 
            IChangeRecordItem * This,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBoolean )( 
            IChangeRecordItem * This,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDouble )( 
            IChangeRecordItem * This,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDouble )( 
            IChangeRecordItem * This,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinary )( 
            IChangeRecordItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinary )( 
            IChangeRecordItem * This,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTime )( 
            IChangeRecordItem * This,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTime )( 
            IChangeRecordItem * This,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRaw )( 
            IChangeRecordItem * This,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRaw )( 
            IChangeRecordItem * This,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueIntegerByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ LONG *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueIntegerByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueInteger64ByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ __int64 *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueInteger64ByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ __int64 Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueStringByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BSTR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStringByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [string][in] */ const WCHAR *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBooleanByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ BOOL *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBooleanByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ BOOL Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueDoubleByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ double *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueDoubleByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ double Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueBinaryByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueBinaryByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFileTimeByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [retval][out] */ FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueFileTimeByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ const FILETIME *Value);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueRawByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [size_is][size_is][out] */ BYTE **Data,
            /* [retval][out] */ ULONG *DataSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueRawByOptions )( 
            IChangeRecordItem * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ LONG DataType,
            /* [size_is][in] */ const BYTE *Data,
            /* [in] */ ULONG DataSize);
        
        END_INTERFACE
    } IChangeRecordItemVtbl;

    interface IChangeRecordItem
    {
        CONST_VTBL struct IChangeRecordItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IChangeRecordItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IChangeRecordItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IChangeRecordItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IChangeRecordItem_GetName(This,Name)	\
    ( (This)->lpVtbl -> GetName(This,Name) ) 

#define IChangeRecordItem_SetName(This,Name)	\
    ( (This)->lpVtbl -> SetName(This,Name) ) 

#define IChangeRecordItem_GetPath(This,Path)	\
    ( (This)->lpVtbl -> GetPath(This,Path) ) 

#define IChangeRecordItem_GetFullPath(This,Path)	\
    ( (This)->lpVtbl -> GetFullPath(This,Path) ) 

#define IChangeRecordItem_GetType(This,Type)	\
    ( (This)->lpVtbl -> GetType(This,Type) ) 

#define IChangeRecordItem_IsReadOnly(This)	\
    ( (This)->lpVtbl -> IsReadOnly(This) ) 

#define IChangeRecordItem_IsDirty(This)	\
    ( (This)->lpVtbl -> IsDirty(This) ) 

#define IChangeRecordItem_GetNodeType(This,NodeType)	\
    ( (This)->lpVtbl -> GetNodeType(This,NodeType) ) 

#define IChangeRecordItem_GetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,DisplayName) ) 

#define IChangeRecordItem_SetDisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> SetDisplayName(This,DisplayName) ) 

#define IChangeRecordItem_GetDescription(This,Description)	\
    ( (This)->lpVtbl -> GetDescription(This,Description) ) 

#define IChangeRecordItem_SetDescription(This,Description)	\
    ( (This)->lpVtbl -> SetDescription(This,Description) ) 

#define IChangeRecordItem_GetParent(This,Parent)	\
    ( (This)->lpVtbl -> GetParent(This,Parent) ) 

#define IChangeRecordItem_HasChild(This)	\
    ( (This)->lpVtbl -> HasChild(This) ) 

#define IChangeRecordItem_GetValue(This,Value)	\
    ( (This)->lpVtbl -> GetValue(This,Value) ) 

#define IChangeRecordItem_SetValue(This,Value)	\
    ( (This)->lpVtbl -> SetValue(This,Value) ) 

#define IChangeRecordItem_GetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> GetDefaultValue(This,Value) ) 

#define IChangeRecordItem_SetDefaultValue(This,Value)	\
    ( (This)->lpVtbl -> SetDefaultValue(This,Value) ) 

#define IChangeRecordItem_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IChangeRecordItem_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IChangeRecordItem_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IChangeRecordItem_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IChangeRecordItem_Children(This,Children)	\
    ( (This)->lpVtbl -> Children(This,Children) ) 

#define IChangeRecordItem_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IChangeRecordItem_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IChangeRecordItem_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IChangeRecordItem_InsertChild(This,Key,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Key,Target,Position,Child) ) 

#define IChangeRecordItem_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IChangeRecordItem_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IChangeRecordItem_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> Attributes(This,Attributes) ) 

#define IChangeRecordItem_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IChangeRecordItem_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IChangeRecordItem_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IChangeRecordItem_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IChangeRecordItem_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IChangeRecordItem_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#define IChangeRecordItem_GetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger(This,Value) ) 

#define IChangeRecordItem_SetValueInteger(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger(This,Value) ) 

#define IChangeRecordItem_GetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64(This,Value) ) 

#define IChangeRecordItem_SetValueInteger64(This,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64(This,Value) ) 

#define IChangeRecordItem_GetValueString(This,Value)	\
    ( (This)->lpVtbl -> GetValueString(This,Value) ) 

#define IChangeRecordItem_SetValueString(This,Value)	\
    ( (This)->lpVtbl -> SetValueString(This,Value) ) 

#define IChangeRecordItem_GetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> GetValueBoolean(This,Value) ) 

#define IChangeRecordItem_SetValueBoolean(This,Value)	\
    ( (This)->lpVtbl -> SetValueBoolean(This,Value) ) 

#define IChangeRecordItem_GetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> GetValueDouble(This,Value) ) 

#define IChangeRecordItem_SetValueDouble(This,Value)	\
    ( (This)->lpVtbl -> SetValueDouble(This,Value) ) 

#define IChangeRecordItem_GetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinary(This,Data,DataSize) ) 

#define IChangeRecordItem_SetValueBinary(This,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinary(This,Data,DataSize) ) 

#define IChangeRecordItem_GetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> GetValueFileTime(This,Value) ) 

#define IChangeRecordItem_SetValueFileTime(This,Value)	\
    ( (This)->lpVtbl -> SetValueFileTime(This,Value) ) 

#define IChangeRecordItem_GetValueRaw(This,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRaw(This,Data,DataSize) ) 

#define IChangeRecordItem_SetValueRaw(This,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRaw(This,DataType,Data,DataSize) ) 

#define IChangeRecordItem_GetValueIntegerByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueIntegerByOptions(This,Options,Status,Value) ) 

#define IChangeRecordItem_SetValueIntegerByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueIntegerByOptions(This,Options,Value) ) 

#define IChangeRecordItem_GetValueInteger64ByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueInteger64ByOptions(This,Options,Status,Value) ) 

#define IChangeRecordItem_SetValueInteger64ByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueInteger64ByOptions(This,Options,Value) ) 

#define IChangeRecordItem_GetValueStringByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueStringByOptions(This,Options,Status,Value) ) 

#define IChangeRecordItem_SetValueStringByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueStringByOptions(This,Options,Value) ) 

#define IChangeRecordItem_GetValueBooleanByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueBooleanByOptions(This,Options,Status,Value) ) 

#define IChangeRecordItem_SetValueBooleanByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueBooleanByOptions(This,Options,Value) ) 

#define IChangeRecordItem_GetValueDoubleByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueDoubleByOptions(This,Options,Status,Value) ) 

#define IChangeRecordItem_SetValueDoubleByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueDoubleByOptions(This,Options,Value) ) 

#define IChangeRecordItem_GetValueBinaryByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueBinaryByOptions(This,Options,Status,Data,DataSize) ) 

#define IChangeRecordItem_SetValueBinaryByOptions(This,Options,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueBinaryByOptions(This,Options,Data,DataSize) ) 

#define IChangeRecordItem_GetValueFileTimeByOptions(This,Options,Status,Value)	\
    ( (This)->lpVtbl -> GetValueFileTimeByOptions(This,Options,Status,Value) ) 

#define IChangeRecordItem_SetValueFileTimeByOptions(This,Options,Value)	\
    ( (This)->lpVtbl -> SetValueFileTimeByOptions(This,Options,Value) ) 

#define IChangeRecordItem_GetValueRawByOptions(This,Options,Status,Data,DataSize)	\
    ( (This)->lpVtbl -> GetValueRawByOptions(This,Options,Status,Data,DataSize) ) 

#define IChangeRecordItem_SetValueRawByOptions(This,Options,DataType,Data,DataSize)	\
    ( (This)->lpVtbl -> SetValueRawByOptions(This,Options,DataType,Data,DataSize) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IChangeRecordItem_INTERFACE_DEFINED__ */


#ifndef __IItemSetEnumerator_INTERFACE_DEFINED__
#define __IItemSetEnumerator_INTERFACE_DEFINED__

/* interface IItemSetEnumerator */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IItemSetEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C736-3BA4-11D7-BF56-000874CD1BAE")
    IItemSetEnumerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Current( 
            /* [out] */ BSTR *pbstrXPath,
            /* [out] */ FILETIME *pftTimestamp,
            /* [out] */ BOOL *pfDeletedNode,
            /* [out] */ WcmValueStatus *piWcmValueStatus,
            /* [out] */ LONG *piValueType,
            /* [out] */ BSTR *pbstrValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MoveNext( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemSetEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemSetEnumerator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemSetEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemSetEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *Current )( 
            IItemSetEnumerator * This,
            /* [out] */ BSTR *pbstrXPath,
            /* [out] */ FILETIME *pftTimestamp,
            /* [out] */ BOOL *pfDeletedNode,
            /* [out] */ WcmValueStatus *piWcmValueStatus,
            /* [out] */ LONG *piValueType,
            /* [out] */ BSTR *pbstrValue);
        
        HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            IItemSetEnumerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IItemSetEnumerator * This);
        
        END_INTERFACE
    } IItemSetEnumeratorVtbl;

    interface IItemSetEnumerator
    {
        CONST_VTBL struct IItemSetEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemSetEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemSetEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemSetEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemSetEnumerator_Current(This,pbstrXPath,pftTimestamp,pfDeletedNode,piWcmValueStatus,piValueType,pbstrValue)	\
    ( (This)->lpVtbl -> Current(This,pbstrXPath,pftTimestamp,pfDeletedNode,piWcmValueStatus,piValueType,pbstrValue) ) 

#define IItemSetEnumerator_MoveNext(This)	\
    ( (This)->lpVtbl -> MoveNext(This) ) 

#define IItemSetEnumerator_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IItemSetEnumerator_Current_Proxy( 
    IItemSetEnumerator * This,
    /* [out] */ BSTR *pbstrXPath,
    /* [out] */ FILETIME *pftTimestamp,
    /* [out] */ BOOL *pfDeletedNode,
    /* [out] */ WcmValueStatus *piWcmValueStatus,
    /* [out] */ LONG *piValueType,
    /* [out] */ BSTR *pbstrValue);


void __RPC_STUB IItemSetEnumerator_Current_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IItemSetEnumerator_MoveNext_Proxy( 
    IItemSetEnumerator * This);


void __RPC_STUB IItemSetEnumerator_MoveNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IItemSetEnumerator_Reset_Proxy( 
    IItemSetEnumerator * This);


void __RPC_STUB IItemSetEnumerator_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemSetEnumerator_INTERFACE_DEFINED__ */


#ifndef __IItemFilter_INTERFACE_DEFINED__
#define __IItemFilter_INTERFACE_DEFINED__

/* interface IItemFilter */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IItemFilter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C735-3BA4-11D7-BF56-000874CD1BAE")
    IItemFilter : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE get_FilterType( 
            /* [retval][out] */ WcmFilterType *FilterType) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE put_FilterType( 
            /* [in] */ WcmFilterType FilterType) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [retval][out] */ BSTR *Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE put_Item( 
            /* [string][in] */ const WCHAR *Item) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ VARIANT Value) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE get_Options( 
            /* [retval][out] */ WcmProcessingOptions *Options) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE put_Options( 
            /* [in] */ WcmProcessingOptions Options) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemFilterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemFilter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemFilter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemFilter * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *get_FilterType )( 
            IItemFilter * This,
            /* [retval][out] */ WcmFilterType *FilterType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *put_FilterType )( 
            IItemFilter * This,
            /* [in] */ WcmFilterType FilterType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IItemFilter * This,
            /* [retval][out] */ BSTR *Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *put_Item )( 
            IItemFilter * This,
            /* [string][in] */ const WCHAR *Item);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IItemFilter * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IItemFilter * This,
            /* [in] */ VARIANT Value);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            IItemFilter * This,
            /* [retval][out] */ WcmProcessingOptions *Options);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *put_Options )( 
            IItemFilter * This,
            /* [in] */ WcmProcessingOptions Options);
        
        END_INTERFACE
    } IItemFilterVtbl;

    interface IItemFilter
    {
        CONST_VTBL struct IItemFilterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemFilter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemFilter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemFilter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemFilter_get_FilterType(This,FilterType)	\
    ( (This)->lpVtbl -> get_FilterType(This,FilterType) ) 

#define IItemFilter_put_FilterType(This,FilterType)	\
    ( (This)->lpVtbl -> put_FilterType(This,FilterType) ) 

#define IItemFilter_get_Item(This,Item)	\
    ( (This)->lpVtbl -> get_Item(This,Item) ) 

#define IItemFilter_put_Item(This,Item)	\
    ( (This)->lpVtbl -> put_Item(This,Item) ) 

#define IItemFilter_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IItemFilter_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IItemFilter_get_Options(This,Options)	\
    ( (This)->lpVtbl -> get_Options(This,Options) ) 

#define IItemFilter_put_Options(This,Options)	\
    ( (This)->lpVtbl -> put_Options(This,Options) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemFilter_get_FilterType_Proxy( 
    IItemFilter * This,
    /* [retval][out] */ WcmFilterType *FilterType);


void __RPC_STUB IItemFilter_get_FilterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemFilter_put_FilterType_Proxy( 
    IItemFilter * This,
    /* [in] */ WcmFilterType FilterType);


void __RPC_STUB IItemFilter_put_FilterType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemFilter_get_Item_Proxy( 
    IItemFilter * This,
    /* [retval][out] */ BSTR *Item);


void __RPC_STUB IItemFilter_get_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemFilter_put_Item_Proxy( 
    IItemFilter * This,
    /* [string][in] */ const WCHAR *Item);


void __RPC_STUB IItemFilter_put_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemFilter_get_Value_Proxy( 
    IItemFilter * This,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IItemFilter_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemFilter_put_Value_Proxy( 
    IItemFilter * This,
    /* [in] */ VARIANT Value);


void __RPC_STUB IItemFilter_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemFilter_get_Options_Proxy( 
    IItemFilter * This,
    /* [retval][out] */ WcmProcessingOptions *Options);


void __RPC_STUB IItemFilter_get_Options_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemFilter_put_Options_Proxy( 
    IItemFilter * This,
    /* [in] */ WcmProcessingOptions Options);


void __RPC_STUB IItemFilter_put_Options_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemFilter_INTERFACE_DEFINED__ */


#ifndef __INamespaceIdentityDisp_INTERFACE_DEFINED__
#define __INamespaceIdentityDisp_INTERFACE_DEFINED__

/* interface INamespaceIdentityDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_INamespaceIdentityDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852219-3BA4-11D7-BF56-000874CD1BAE")
    INamespaceIdentityDisp : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ const BSTR Name,
            /* [in] */ const BSTR Version,
            /* [in] */ const BSTR Language,
            /* [in] */ const BSTR Architecture,
            /* [in] */ const BSTR Token) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Uri( 
            /* [retval][out] */ BSTR *Uri) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Uri( 
            /* [in] */ const BSTR Uri) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ const BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *Version) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Version( 
            /* [in] */ const BSTR Version) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *Language) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Language( 
            /* [in] */ const BSTR Language) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProcessorArchitecture( 
            /* [retval][out] */ BSTR *Architecture) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ProcessorArchitecture( 
            /* [in] */ const BSTR Architecture) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_PublicKeyToken( 
            /* [retval][out] */ BSTR *Token) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_PublicKeyToken( 
            /* [in] */ const BSTR Token) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeploymentIdentity( 
            /* [retval][out] */ BSTR *DeploymentIdentity) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DeploymentIdentity( 
            /* [in] */ const BSTR DeploymentIdentity) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Context( 
            /* [retval][out] */ WcmNamespaceContext *Context) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Context( 
            /* [in] */ WcmNamespaceContext Context) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INamespaceIdentityDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INamespaceIdentityDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INamespaceIdentityDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INamespaceIdentityDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            INamespaceIdentityDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            INamespaceIdentityDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            INamespaceIdentityDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            INamespaceIdentityDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            INamespaceIdentityDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const BSTR Version,
            /* [in] */ const BSTR Language,
            /* [in] */ const BSTR Architecture,
            /* [in] */ const BSTR Token);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Uri )( 
            INamespaceIdentityDisp * This,
            /* [retval][out] */ BSTR *Uri);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Uri )( 
            INamespaceIdentityDisp * This,
            /* [in] */ const BSTR Uri);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            INamespaceIdentityDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            INamespaceIdentityDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            INamespaceIdentityDisp * This,
            /* [retval][out] */ BSTR *Version);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Version )( 
            INamespaceIdentityDisp * This,
            /* [in] */ const BSTR Version);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            INamespaceIdentityDisp * This,
            /* [retval][out] */ BSTR *Language);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Language )( 
            INamespaceIdentityDisp * This,
            /* [in] */ const BSTR Language);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProcessorArchitecture )( 
            INamespaceIdentityDisp * This,
            /* [retval][out] */ BSTR *Architecture);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProcessorArchitecture )( 
            INamespaceIdentityDisp * This,
            /* [in] */ const BSTR Architecture);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PublicKeyToken )( 
            INamespaceIdentityDisp * This,
            /* [retval][out] */ BSTR *Token);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PublicKeyToken )( 
            INamespaceIdentityDisp * This,
            /* [in] */ const BSTR Token);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentIdentity )( 
            INamespaceIdentityDisp * This,
            /* [retval][out] */ BSTR *DeploymentIdentity);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DeploymentIdentity )( 
            INamespaceIdentityDisp * This,
            /* [in] */ const BSTR DeploymentIdentity);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Context )( 
            INamespaceIdentityDisp * This,
            /* [retval][out] */ WcmNamespaceContext *Context);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Context )( 
            INamespaceIdentityDisp * This,
            /* [in] */ WcmNamespaceContext Context);
        
        END_INTERFACE
    } INamespaceIdentityDispVtbl;

    interface INamespaceIdentityDisp
    {
        CONST_VTBL struct INamespaceIdentityDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INamespaceIdentityDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INamespaceIdentityDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INamespaceIdentityDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INamespaceIdentityDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define INamespaceIdentityDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define INamespaceIdentityDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define INamespaceIdentityDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define INamespaceIdentityDisp_Initialize(This,Name,Version,Language,Architecture,Token)	\
    ( (This)->lpVtbl -> Initialize(This,Name,Version,Language,Architecture,Token) ) 

#define INamespaceIdentityDisp_get_Uri(This,Uri)	\
    ( (This)->lpVtbl -> get_Uri(This,Uri) ) 

#define INamespaceIdentityDisp_put_Uri(This,Uri)	\
    ( (This)->lpVtbl -> put_Uri(This,Uri) ) 

#define INamespaceIdentityDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define INamespaceIdentityDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define INamespaceIdentityDisp_get_Version(This,Version)	\
    ( (This)->lpVtbl -> get_Version(This,Version) ) 

#define INamespaceIdentityDisp_put_Version(This,Version)	\
    ( (This)->lpVtbl -> put_Version(This,Version) ) 

#define INamespaceIdentityDisp_get_Language(This,Language)	\
    ( (This)->lpVtbl -> get_Language(This,Language) ) 

#define INamespaceIdentityDisp_put_Language(This,Language)	\
    ( (This)->lpVtbl -> put_Language(This,Language) ) 

#define INamespaceIdentityDisp_get_ProcessorArchitecture(This,Architecture)	\
    ( (This)->lpVtbl -> get_ProcessorArchitecture(This,Architecture) ) 

#define INamespaceIdentityDisp_put_ProcessorArchitecture(This,Architecture)	\
    ( (This)->lpVtbl -> put_ProcessorArchitecture(This,Architecture) ) 

#define INamespaceIdentityDisp_get_PublicKeyToken(This,Token)	\
    ( (This)->lpVtbl -> get_PublicKeyToken(This,Token) ) 

#define INamespaceIdentityDisp_put_PublicKeyToken(This,Token)	\
    ( (This)->lpVtbl -> put_PublicKeyToken(This,Token) ) 

#define INamespaceIdentityDisp_get_DeploymentIdentity(This,DeploymentIdentity)	\
    ( (This)->lpVtbl -> get_DeploymentIdentity(This,DeploymentIdentity) ) 

#define INamespaceIdentityDisp_put_DeploymentIdentity(This,DeploymentIdentity)	\
    ( (This)->lpVtbl -> put_DeploymentIdentity(This,DeploymentIdentity) ) 

#define INamespaceIdentityDisp_get_Context(This,Context)	\
    ( (This)->lpVtbl -> get_Context(This,Context) ) 

#define INamespaceIdentityDisp_put_Context(This,Context)	\
    ( (This)->lpVtbl -> put_Context(This,Context) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_Initialize_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ const BSTR Name,
    /* [in] */ const BSTR Version,
    /* [in] */ const BSTR Language,
    /* [in] */ const BSTR Architecture,
    /* [in] */ const BSTR Token);


void __RPC_STUB INamespaceIdentityDisp_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_get_Uri_Proxy( 
    INamespaceIdentityDisp * This,
    /* [retval][out] */ BSTR *Uri);


void __RPC_STUB INamespaceIdentityDisp_get_Uri_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_put_Uri_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ const BSTR Uri);


void __RPC_STUB INamespaceIdentityDisp_put_Uri_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_get_Name_Proxy( 
    INamespaceIdentityDisp * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB INamespaceIdentityDisp_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_put_Name_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ const BSTR Name);


void __RPC_STUB INamespaceIdentityDisp_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_get_Version_Proxy( 
    INamespaceIdentityDisp * This,
    /* [retval][out] */ BSTR *Version);


void __RPC_STUB INamespaceIdentityDisp_get_Version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_put_Version_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ const BSTR Version);


void __RPC_STUB INamespaceIdentityDisp_put_Version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_get_Language_Proxy( 
    INamespaceIdentityDisp * This,
    /* [retval][out] */ BSTR *Language);


void __RPC_STUB INamespaceIdentityDisp_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_put_Language_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ const BSTR Language);


void __RPC_STUB INamespaceIdentityDisp_put_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_get_ProcessorArchitecture_Proxy( 
    INamespaceIdentityDisp * This,
    /* [retval][out] */ BSTR *Architecture);


void __RPC_STUB INamespaceIdentityDisp_get_ProcessorArchitecture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_put_ProcessorArchitecture_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ const BSTR Architecture);


void __RPC_STUB INamespaceIdentityDisp_put_ProcessorArchitecture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_get_PublicKeyToken_Proxy( 
    INamespaceIdentityDisp * This,
    /* [retval][out] */ BSTR *Token);


void __RPC_STUB INamespaceIdentityDisp_get_PublicKeyToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_put_PublicKeyToken_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ const BSTR Token);


void __RPC_STUB INamespaceIdentityDisp_put_PublicKeyToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_get_DeploymentIdentity_Proxy( 
    INamespaceIdentityDisp * This,
    /* [retval][out] */ BSTR *DeploymentIdentity);


void __RPC_STUB INamespaceIdentityDisp_get_DeploymentIdentity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_put_DeploymentIdentity_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ const BSTR DeploymentIdentity);


void __RPC_STUB INamespaceIdentityDisp_put_DeploymentIdentity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_get_Context_Proxy( 
    INamespaceIdentityDisp * This,
    /* [retval][out] */ WcmNamespaceContext *Context);


void __RPC_STUB INamespaceIdentityDisp_get_Context_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE INamespaceIdentityDisp_put_Context_Proxy( 
    INamespaceIdentityDisp * This,
    /* [in] */ WcmNamespaceContext Context);


void __RPC_STUB INamespaceIdentityDisp_put_Context_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INamespaceIdentityDisp_INTERFACE_DEFINED__ */


#ifndef __IItemEnumeratorDisp_INTERFACE_DEFINED__
#define __IItemEnumeratorDisp_INTERFACE_DEFINED__

/* interface IItemEnumeratorDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IItemEnumeratorDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852218-3BA4-11D7-BF56-000874CD1BAE")
    IItemEnumeratorDisp : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Current( 
            /* [retval][out] */ VARIANT *Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE MoveNext( 
            /* [retval][out] */ VARIANT_BOOL *HasNext) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemEnumeratorDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemEnumeratorDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemEnumeratorDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemEnumeratorDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IItemEnumeratorDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IItemEnumeratorDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IItemEnumeratorDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IItemEnumeratorDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Current )( 
            IItemEnumeratorDisp * This,
            /* [retval][out] */ VARIANT *Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            IItemEnumeratorDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasNext);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IItemEnumeratorDisp * This);
        
        END_INTERFACE
    } IItemEnumeratorDispVtbl;

    interface IItemEnumeratorDisp
    {
        CONST_VTBL struct IItemEnumeratorDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemEnumeratorDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemEnumeratorDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemEnumeratorDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemEnumeratorDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IItemEnumeratorDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IItemEnumeratorDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IItemEnumeratorDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IItemEnumeratorDisp_get_Current(This,Item)	\
    ( (This)->lpVtbl -> get_Current(This,Item) ) 

#define IItemEnumeratorDisp_MoveNext(This,HasNext)	\
    ( (This)->lpVtbl -> MoveNext(This,HasNext) ) 

#define IItemEnumeratorDisp_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IItemEnumeratorDisp_get_Current_Proxy( 
    IItemEnumeratorDisp * This,
    /* [retval][out] */ VARIANT *Item);


void __RPC_STUB IItemEnumeratorDisp_get_Current_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemEnumeratorDisp_MoveNext_Proxy( 
    IItemEnumeratorDisp * This,
    /* [retval][out] */ VARIANT_BOOL *HasNext);


void __RPC_STUB IItemEnumeratorDisp_MoveNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemEnumeratorDisp_Reset_Proxy( 
    IItemEnumeratorDisp * This);


void __RPC_STUB IItemEnumeratorDisp_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemEnumeratorDisp_INTERFACE_DEFINED__ */


#ifndef __IItemCollectionDisp_INTERFACE_DEFINED__
#define __IItemCollectionDisp_INTERFACE_DEFINED__

/* interface IItemCollectionDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IItemCollectionDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852217-3BA4-11D7-BF56-000874CD1BAE")
    IItemCollectionDisp : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsReadOnly( 
            /* [retval][out] */ VARIANT_BOOL *ReadOnly) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ LONG *Count) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ IBaseItemDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IBaseItemDisp *Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ IBaseItemDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Contains( 
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ VARIANT_BOOL *IsContained) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ const VARIANT *Key) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [retval][out] */ IItemEnumeratorDisp **Enumerator) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ const VARIANT *Key,
            /* [in] */ const VARIANT *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ const VARIANT *Key,
            /* [in] */ const VARIANT *Target,
            /* [in] */ BOOL Position) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Compare( 
            /* [in] */ const VARIANT *Item1,
            /* [in] */ const VARIANT *Item2,
            /* [retval][out] */ LONG *Position) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateWithKeys( 
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues,
            /* [retval][out] */ IBaseItemDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ContainsWithKeys( 
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveWithKeys( 
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetItemWithKeys( 
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues,
            /* [retval][out] */ IBaseItemDisp **Item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemCollectionDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemCollectionDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemCollectionDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemCollectionDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IItemCollectionDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IItemCollectionDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IItemCollectionDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IItemCollectionDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IItemCollectionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IItemCollectionDisp * This,
            /* [retval][out] */ LONG *Count);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IItemCollectionDisp * This,
            /* [in] */ IBaseItemDisp *Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Contains )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *Key,
            /* [retval][out] */ VARIANT_BOOL *IsContained);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *Key);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            IItemCollectionDisp * This,
            /* [retval][out] */ IItemEnumeratorDisp **Enumerator);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *Key,
            /* [in] */ const VARIANT *Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *Key,
            /* [in] */ const VARIANT *Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Compare )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *Item1,
            /* [in] */ const VARIANT *Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateWithKeys )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ContainsWithKeys )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveWithKeys )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemWithKeys )( 
            IItemCollectionDisp * This,
            /* [in] */ const VARIANT *baseName,
            /* [in] */ const VARIANT *keyNames,
            /* [in] */ const VARIANT *keyValues,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        END_INTERFACE
    } IItemCollectionDispVtbl;

    interface IItemCollectionDisp
    {
        CONST_VTBL struct IItemCollectionDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemCollectionDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemCollectionDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemCollectionDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemCollectionDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IItemCollectionDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IItemCollectionDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IItemCollectionDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IItemCollectionDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IItemCollectionDisp_get_Count(This,Count)	\
    ( (This)->lpVtbl -> get_Count(This,Count) ) 

#define IItemCollectionDisp_get_Item(This,Key,Item)	\
    ( (This)->lpVtbl -> get_Item(This,Key,Item) ) 

#define IItemCollectionDisp_Add(This,Item)	\
    ( (This)->lpVtbl -> Add(This,Item) ) 

#define IItemCollectionDisp_Create(This,Key,Item)	\
    ( (This)->lpVtbl -> Create(This,Key,Item) ) 

#define IItemCollectionDisp_Contains(This,Key,IsContained)	\
    ( (This)->lpVtbl -> Contains(This,Key,IsContained) ) 

#define IItemCollectionDisp_Remove(This,Key)	\
    ( (This)->lpVtbl -> Remove(This,Key) ) 

#define IItemCollectionDisp_GetEnumerator(This,Enumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,Enumerator) ) 

#define IItemCollectionDisp_Insert(This,Key,Target,Position,Item)	\
    ( (This)->lpVtbl -> Insert(This,Key,Target,Position,Item) ) 

#define IItemCollectionDisp_Move(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> Move(This,Key,Target,Position) ) 

#define IItemCollectionDisp_Compare(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> Compare(This,Item1,Item2,Position) ) 

#define IItemCollectionDisp_CreateWithKeys(This,baseName,keyNames,keyValues,Item)	\
    ( (This)->lpVtbl -> CreateWithKeys(This,baseName,keyNames,keyValues,Item) ) 

#define IItemCollectionDisp_ContainsWithKeys(This,baseName,keyNames,keyValues)	\
    ( (This)->lpVtbl -> ContainsWithKeys(This,baseName,keyNames,keyValues) ) 

#define IItemCollectionDisp_RemoveWithKeys(This,baseName,keyNames,keyValues)	\
    ( (This)->lpVtbl -> RemoveWithKeys(This,baseName,keyNames,keyValues) ) 

#define IItemCollectionDisp_GetItemWithKeys(This,baseName,keyNames,keyValues,Item)	\
    ( (This)->lpVtbl -> GetItemWithKeys(This,baseName,keyNames,keyValues,Item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_get_IsReadOnly_Proxy( 
    IItemCollectionDisp * This,
    /* [retval][out] */ VARIANT_BOOL *ReadOnly);


void __RPC_STUB IItemCollectionDisp_get_IsReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_get_Count_Proxy( 
    IItemCollectionDisp * This,
    /* [retval][out] */ LONG *Count);


void __RPC_STUB IItemCollectionDisp_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_get_Item_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *Key,
    /* [retval][out] */ IBaseItemDisp **Item);


void __RPC_STUB IItemCollectionDisp_get_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_Add_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ IBaseItemDisp *Item);


void __RPC_STUB IItemCollectionDisp_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_Create_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *Key,
    /* [retval][out] */ IBaseItemDisp **Item);


void __RPC_STUB IItemCollectionDisp_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_Contains_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *Key,
    /* [retval][out] */ VARIANT_BOOL *IsContained);


void __RPC_STUB IItemCollectionDisp_Contains_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_Remove_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *Key);


void __RPC_STUB IItemCollectionDisp_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_GetEnumerator_Proxy( 
    IItemCollectionDisp * This,
    /* [retval][out] */ IItemEnumeratorDisp **Enumerator);


void __RPC_STUB IItemCollectionDisp_GetEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_Insert_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *Key,
    /* [in] */ const VARIANT *Target,
    /* [in] */ BOOL Position,
    /* [retval][out] */ IBaseItemDisp **Item);


void __RPC_STUB IItemCollectionDisp_Insert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_Move_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *Key,
    /* [in] */ const VARIANT *Target,
    /* [in] */ BOOL Position);


void __RPC_STUB IItemCollectionDisp_Move_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_Compare_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *Item1,
    /* [in] */ const VARIANT *Item2,
    /* [retval][out] */ LONG *Position);


void __RPC_STUB IItemCollectionDisp_Compare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_CreateWithKeys_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *baseName,
    /* [in] */ const VARIANT *keyNames,
    /* [in] */ const VARIANT *keyValues,
    /* [retval][out] */ IBaseItemDisp **Item);


void __RPC_STUB IItemCollectionDisp_CreateWithKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_ContainsWithKeys_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *baseName,
    /* [in] */ const VARIANT *keyNames,
    /* [in] */ const VARIANT *keyValues);


void __RPC_STUB IItemCollectionDisp_ContainsWithKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_RemoveWithKeys_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *baseName,
    /* [in] */ const VARIANT *keyNames,
    /* [in] */ const VARIANT *keyValues);


void __RPC_STUB IItemCollectionDisp_RemoveWithKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IItemCollectionDisp_GetItemWithKeys_Proxy( 
    IItemCollectionDisp * This,
    /* [in] */ const VARIANT *baseName,
    /* [in] */ const VARIANT *keyNames,
    /* [in] */ const VARIANT *keyValues,
    /* [retval][out] */ IBaseItemDisp **Item);


void __RPC_STUB IItemCollectionDisp_GetItemWithKeys_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemCollectionDisp_INTERFACE_DEFINED__ */


#ifndef __ISettingsEngineDisp_INTERFACE_DEFINED__
#define __ISettingsEngineDisp_INTERFACE_DEFINED__

/* interface ISettingsEngineDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ISettingsEngineDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785221A-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsEngineDisp : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespaces( 
            /* [retval][out] */ IItemCollectionDisp **NamespaceCollection) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetNamespacesByOptions( 
            /* [in] */ WcmNamespaceEnumerationFlags Flags,
            /* [in] */ const BSTR UserSid,
            /* [retval][out] */ IItemCollectionDisp **NamespaceCollection) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetNamespace( 
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ WcmNamespaceMode Mode,
            /* [in] */ WcmNamespaceAccess Access,
            /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetNamespaceByOptions( 
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ WcmNamespaceMode Mode,
            /* [in] */ WcmNamespaceAccess Access,
            /* [in] */ const BSTR UserSid,
            /* [in] */ WcmNamespaceOption Option,
            /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetErrorDescription( 
            /* [in] */ LONG HResult,
            /* [retval][out] */ BSTR *Message) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateNamespaceIdentity( 
            /* [retval][out] */ INamespaceIdentityDisp **NamespaceID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsEngineDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsEngineDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsEngineDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsEngineDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISettingsEngineDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISettingsEngineDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISettingsEngineDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISettingsEngineDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespaces )( 
            ISettingsEngineDisp * This,
            /* [retval][out] */ IItemCollectionDisp **NamespaceCollection);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetNamespacesByOptions )( 
            ISettingsEngineDisp * This,
            /* [in] */ WcmNamespaceEnumerationFlags Flags,
            /* [in] */ const BSTR UserSid,
            /* [retval][out] */ IItemCollectionDisp **NamespaceCollection);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetNamespace )( 
            ISettingsEngineDisp * This,
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ WcmNamespaceMode Mode,
            /* [in] */ WcmNamespaceAccess Access,
            /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetNamespaceByOptions )( 
            ISettingsEngineDisp * This,
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ WcmNamespaceMode Mode,
            /* [in] */ WcmNamespaceAccess Access,
            /* [in] */ const BSTR UserSid,
            /* [in] */ WcmNamespaceOption Option,
            /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetErrorDescription )( 
            ISettingsEngineDisp * This,
            /* [in] */ LONG HResult,
            /* [retval][out] */ BSTR *Message);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateNamespaceIdentity )( 
            ISettingsEngineDisp * This,
            /* [retval][out] */ INamespaceIdentityDisp **NamespaceID);
        
        END_INTERFACE
    } ISettingsEngineDispVtbl;

    interface ISettingsEngineDisp
    {
        CONST_VTBL struct ISettingsEngineDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsEngineDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsEngineDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsEngineDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsEngineDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISettingsEngineDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISettingsEngineDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISettingsEngineDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISettingsEngineDisp_get_Namespaces(This,NamespaceCollection)	\
    ( (This)->lpVtbl -> get_Namespaces(This,NamespaceCollection) ) 

#define ISettingsEngineDisp_GetNamespacesByOptions(This,Flags,UserSid,NamespaceCollection)	\
    ( (This)->lpVtbl -> GetNamespacesByOptions(This,Flags,UserSid,NamespaceCollection) ) 

#define ISettingsEngineDisp_GetNamespace(This,NamespaceID,Mode,Access,NamespaceItem)	\
    ( (This)->lpVtbl -> GetNamespace(This,NamespaceID,Mode,Access,NamespaceItem) ) 

#define ISettingsEngineDisp_GetNamespaceByOptions(This,NamespaceID,Mode,Access,UserSid,Option,NamespaceItem)	\
    ( (This)->lpVtbl -> GetNamespaceByOptions(This,NamespaceID,Mode,Access,UserSid,Option,NamespaceItem) ) 

#define ISettingsEngineDisp_GetErrorDescription(This,HResult,Message)	\
    ( (This)->lpVtbl -> GetErrorDescription(This,HResult,Message) ) 

#define ISettingsEngineDisp_CreateNamespaceIdentity(This,NamespaceID)	\
    ( (This)->lpVtbl -> CreateNamespaceIdentity(This,NamespaceID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsEngineDisp_get_Namespaces_Proxy( 
    ISettingsEngineDisp * This,
    /* [retval][out] */ IItemCollectionDisp **NamespaceCollection);


void __RPC_STUB ISettingsEngineDisp_get_Namespaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsEngineDisp_GetNamespacesByOptions_Proxy( 
    ISettingsEngineDisp * This,
    /* [in] */ WcmNamespaceEnumerationFlags Flags,
    /* [in] */ const BSTR UserSid,
    /* [retval][out] */ IItemCollectionDisp **NamespaceCollection);


void __RPC_STUB ISettingsEngineDisp_GetNamespacesByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsEngineDisp_GetNamespace_Proxy( 
    ISettingsEngineDisp * This,
    /* [in] */ INamespaceIdentityDisp *NamespaceID,
    /* [in] */ WcmNamespaceMode Mode,
    /* [in] */ WcmNamespaceAccess Access,
    /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem);


void __RPC_STUB ISettingsEngineDisp_GetNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsEngineDisp_GetNamespaceByOptions_Proxy( 
    ISettingsEngineDisp * This,
    /* [in] */ INamespaceIdentityDisp *NamespaceID,
    /* [in] */ WcmNamespaceMode Mode,
    /* [in] */ WcmNamespaceAccess Access,
    /* [in] */ const BSTR UserSid,
    /* [in] */ WcmNamespaceOption Option,
    /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem);


void __RPC_STUB ISettingsEngineDisp_GetNamespaceByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsEngineDisp_GetErrorDescription_Proxy( 
    ISettingsEngineDisp * This,
    /* [in] */ LONG HResult,
    /* [retval][out] */ BSTR *Message);


void __RPC_STUB ISettingsEngineDisp_GetErrorDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsEngineDisp_CreateNamespaceIdentity_Proxy( 
    ISettingsEngineDisp * This,
    /* [retval][out] */ INamespaceIdentityDisp **NamespaceID);


void __RPC_STUB ISettingsEngineDisp_CreateNamespaceIdentity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsEngineDisp_INTERFACE_DEFINED__ */


#ifndef __IAdvancedSettingsEngineDisp_INTERFACE_DEFINED__
#define __IAdvancedSettingsEngineDisp_INTERFACE_DEFINED__

/* interface IAdvancedSettingsEngineDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IAdvancedSettingsEngineDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6D67F677-3BA4-11D7-BF56-000874CD1BAE")
    IAdvancedSettingsEngineDisp : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RegisterUser( 
            /* [in] */ const BSTR UserSid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UnregisterUser( 
            /* [in] */ const BSTR UserSid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateNamespace( 
            /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateNamespaceByOptions( 
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ const BSTR UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ WcmNamespaceOption Option,
            /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RegisterNamespaceFromStream( 
            /* [in] */ WcmInstallMode Mode,
            /* [in] */ IStream *Stream,
            /* [in] */ WcmNamespaceContext InstallContext,
            /* [in] */ const BSTR UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ INamespaceIdentityDisp *OldVersion,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RegisterNamespaceFromFile( 
            /* [in] */ WcmInstallMode Mode,
            /* [in] */ const BSTR Manifest,
            /* [in] */ WcmNamespaceContext InstallContext,
            /* [in] */ const BSTR UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ INamespaceIdentityDisp *OldVersion,
            /* [retval][out] */ VARIANT *ppRresult) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UnregisterNamespace( 
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ const BSTR UserSid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UninstallNamespace( 
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ const BSTR UserSid) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Import( 
            /* [in] */ ISettingsNamespaceDisp *Namespace,
            /* [in] */ DWORD Option,
            /* [in] */ IStream *Stream,
            /* [retval][out] */ VARIANT *Results) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Export( 
            /* [in] */ ISettingsNamespaceDisp *Namespace,
            /* [in] */ DWORD Option,
            /* [in] */ IStream *Stream) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ImportItem( 
            /* [in] */ IStream *Stream,
            /* [in] */ ISettingsNamespaceDisp *Namespace,
            /* [out] */ IBaseItemDisp **NewItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ExportItem( 
            /* [in] */ IBaseItemDisp *Item,
            /* [in] */ IStream *Stream) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE LegacySynchronize( 
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ const BSTR UserSid,
            /* [in] */ WcmSynchronizeOption Option,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAdvancedSettingsEngineDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAdvancedSettingsEngineDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAdvancedSettingsEngineDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IAdvancedSettingsEngineDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RegisterUser )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ const BSTR UserSid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UnregisterUser )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ const BSTR UserSid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateNamespace )( 
            IAdvancedSettingsEngineDisp * This,
            /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateNamespaceByOptions )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ const BSTR UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ WcmNamespaceOption Option,
            /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RegisterNamespaceFromStream )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ WcmInstallMode Mode,
            /* [in] */ IStream *Stream,
            /* [in] */ WcmNamespaceContext InstallContext,
            /* [in] */ const BSTR UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ INamespaceIdentityDisp *OldVersion,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RegisterNamespaceFromFile )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ WcmInstallMode Mode,
            /* [in] */ const BSTR Manifest,
            /* [in] */ WcmNamespaceContext InstallContext,
            /* [in] */ const BSTR UserSid,
            /* [in] */ BOOL Overwrite,
            /* [in] */ INamespaceIdentityDisp *OldVersion,
            /* [retval][out] */ VARIANT *ppRresult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UnregisterNamespace )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ const BSTR UserSid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UninstallNamespace )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ const BSTR UserSid);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Import )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ ISettingsNamespaceDisp *Namespace,
            /* [in] */ DWORD Option,
            /* [in] */ IStream *Stream,
            /* [retval][out] */ VARIANT *Results);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Export )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ ISettingsNamespaceDisp *Namespace,
            /* [in] */ DWORD Option,
            /* [in] */ IStream *Stream);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ImportItem )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ IStream *Stream,
            /* [in] */ ISettingsNamespaceDisp *Namespace,
            /* [out] */ IBaseItemDisp **NewItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportItem )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ IBaseItemDisp *Item,
            /* [in] */ IStream *Stream);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *LegacySynchronize )( 
            IAdvancedSettingsEngineDisp * This,
            /* [in] */ INamespaceIdentityDisp *NamespaceID,
            /* [in] */ const BSTR UserSid,
            /* [in] */ WcmSynchronizeOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IAdvancedSettingsEngineDispVtbl;

    interface IAdvancedSettingsEngineDisp
    {
        CONST_VTBL struct IAdvancedSettingsEngineDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAdvancedSettingsEngineDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAdvancedSettingsEngineDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAdvancedSettingsEngineDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAdvancedSettingsEngineDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAdvancedSettingsEngineDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAdvancedSettingsEngineDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAdvancedSettingsEngineDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAdvancedSettingsEngineDisp_RegisterUser(This,UserSid)	\
    ( (This)->lpVtbl -> RegisterUser(This,UserSid) ) 

#define IAdvancedSettingsEngineDisp_UnregisterUser(This,UserSid)	\
    ( (This)->lpVtbl -> UnregisterUser(This,UserSid) ) 

#define IAdvancedSettingsEngineDisp_CreateNamespace(This,NamespaceItem)	\
    ( (This)->lpVtbl -> CreateNamespace(This,NamespaceItem) ) 

#define IAdvancedSettingsEngineDisp_CreateNamespaceByOptions(This,NamespaceID,UserSid,Overwrite,Option,NamespaceItem)	\
    ( (This)->lpVtbl -> CreateNamespaceByOptions(This,NamespaceID,UserSid,Overwrite,Option,NamespaceItem) ) 

#define IAdvancedSettingsEngineDisp_RegisterNamespaceFromStream(This,Mode,Stream,InstallContext,UserSid,Overwrite,OldVersion,ppResult)	\
    ( (This)->lpVtbl -> RegisterNamespaceFromStream(This,Mode,Stream,InstallContext,UserSid,Overwrite,OldVersion,ppResult) ) 

#define IAdvancedSettingsEngineDisp_RegisterNamespaceFromFile(This,Mode,Manifest,InstallContext,UserSid,Overwrite,OldVersion,ppRresult)	\
    ( (This)->lpVtbl -> RegisterNamespaceFromFile(This,Mode,Manifest,InstallContext,UserSid,Overwrite,OldVersion,ppRresult) ) 

#define IAdvancedSettingsEngineDisp_UnregisterNamespace(This,NamespaceID,UserSid)	\
    ( (This)->lpVtbl -> UnregisterNamespace(This,NamespaceID,UserSid) ) 

#define IAdvancedSettingsEngineDisp_UninstallNamespace(This,NamespaceID,UserSid)	\
    ( (This)->lpVtbl -> UninstallNamespace(This,NamespaceID,UserSid) ) 

#define IAdvancedSettingsEngineDisp_Import(This,Namespace,Option,Stream,Results)	\
    ( (This)->lpVtbl -> Import(This,Namespace,Option,Stream,Results) ) 

#define IAdvancedSettingsEngineDisp_Export(This,Namespace,Option,Stream)	\
    ( (This)->lpVtbl -> Export(This,Namespace,Option,Stream) ) 

#define IAdvancedSettingsEngineDisp_ImportItem(This,Stream,Namespace,NewItem)	\
    ( (This)->lpVtbl -> ImportItem(This,Stream,Namespace,NewItem) ) 

#define IAdvancedSettingsEngineDisp_ExportItem(This,Item,Stream)	\
    ( (This)->lpVtbl -> ExportItem(This,Item,Stream) ) 

#define IAdvancedSettingsEngineDisp_LegacySynchronize(This,NamespaceID,UserSid,Option,ppResult)	\
    ( (This)->lpVtbl -> LegacySynchronize(This,NamespaceID,UserSid,Option,ppResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_RegisterUser_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ const BSTR UserSid);


void __RPC_STUB IAdvancedSettingsEngineDisp_RegisterUser_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_UnregisterUser_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ const BSTR UserSid);


void __RPC_STUB IAdvancedSettingsEngineDisp_UnregisterUser_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_CreateNamespace_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem);


void __RPC_STUB IAdvancedSettingsEngineDisp_CreateNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_CreateNamespaceByOptions_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ INamespaceIdentityDisp *NamespaceID,
    /* [in] */ const BSTR UserSid,
    /* [in] */ BOOL Overwrite,
    /* [in] */ WcmNamespaceOption Option,
    /* [retval][out] */ ISettingsNamespaceDisp **NamespaceItem);


void __RPC_STUB IAdvancedSettingsEngineDisp_CreateNamespaceByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_RegisterNamespaceFromStream_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ WcmInstallMode Mode,
    /* [in] */ IStream *Stream,
    /* [in] */ WcmNamespaceContext InstallContext,
    /* [in] */ const BSTR UserSid,
    /* [in] */ BOOL Overwrite,
    /* [in] */ INamespaceIdentityDisp *OldVersion,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB IAdvancedSettingsEngineDisp_RegisterNamespaceFromStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_RegisterNamespaceFromFile_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ WcmInstallMode Mode,
    /* [in] */ const BSTR Manifest,
    /* [in] */ WcmNamespaceContext InstallContext,
    /* [in] */ const BSTR UserSid,
    /* [in] */ BOOL Overwrite,
    /* [in] */ INamespaceIdentityDisp *OldVersion,
    /* [retval][out] */ VARIANT *ppRresult);


void __RPC_STUB IAdvancedSettingsEngineDisp_RegisterNamespaceFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_UnregisterNamespace_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ INamespaceIdentityDisp *NamespaceID,
    /* [in] */ const BSTR UserSid);


void __RPC_STUB IAdvancedSettingsEngineDisp_UnregisterNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_UninstallNamespace_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ INamespaceIdentityDisp *NamespaceID,
    /* [in] */ const BSTR UserSid);


void __RPC_STUB IAdvancedSettingsEngineDisp_UninstallNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_Import_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ ISettingsNamespaceDisp *Namespace,
    /* [in] */ DWORD Option,
    /* [in] */ IStream *Stream,
    /* [retval][out] */ VARIANT *Results);


void __RPC_STUB IAdvancedSettingsEngineDisp_Import_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_Export_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ ISettingsNamespaceDisp *Namespace,
    /* [in] */ DWORD Option,
    /* [in] */ IStream *Stream);


void __RPC_STUB IAdvancedSettingsEngineDisp_Export_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_ImportItem_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ IStream *Stream,
    /* [in] */ ISettingsNamespaceDisp *Namespace,
    /* [out] */ IBaseItemDisp **NewItem);


void __RPC_STUB IAdvancedSettingsEngineDisp_ImportItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_ExportItem_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ IBaseItemDisp *Item,
    /* [in] */ IStream *Stream);


void __RPC_STUB IAdvancedSettingsEngineDisp_ExportItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IAdvancedSettingsEngineDisp_LegacySynchronize_Proxy( 
    IAdvancedSettingsEngineDisp * This,
    /* [in] */ INamespaceIdentityDisp *NamespaceID,
    /* [in] */ const BSTR UserSid,
    /* [in] */ WcmSynchronizeOption Option,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB IAdvancedSettingsEngineDisp_LegacySynchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAdvancedSettingsEngineDisp_INTERFACE_DEFINED__ */


#ifndef __IBaseItemDisp_INTERFACE_DEFINED__
#define __IBaseItemDisp_INTERFACE_DEFINED__

/* interface IBaseItemDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IBaseItemDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785221D-3BA4-11D7-BF56-000874CD1BAE")
    IBaseItemDisp : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ const BSTR Name) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullPath( 
            /* [retval][out] */ BSTR *Path) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ LONG *Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsReadOnly( 
            /* [retval][out] */ VARIANT_BOOL *ReadOnly) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDirty( 
            /* [retval][out] */ VARIANT_BOOL *Dirty) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_NodeType( 
            /* [retval][out] */ WcmNodeType *NodeType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
            /* [retval][out] */ BSTR *DisplayName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayName( 
            /* [string][in] */ const BSTR DisplayName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *Description) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [string][in] */ const BSTR Description) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IBaseItemDisp **Parent) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasChild( 
            /* [retval][out] */ VARIANT_BOOL *HasChild) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ const VARIANT *Value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultValue( 
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultValue( 
            /* [in] */ const VARIANT *Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetValueByOptions( 
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetValueByOptions( 
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteValue( 
            /* [in] */ FILETIME Timestamp) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reset( 
            /* [in] */ WcmResetOption Option) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ IItemCollectionDisp **Children) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddChild( 
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetChild( 
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveChild( 
            /* [string][in] */ const BSTR Name) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE InsertChild( 
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE MoveChild( 
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CompareChildOrder( 
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ IItemCollectionDisp **Attributes) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetAttribute( 
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAttribute( 
            /* [in] */ const BSTR Name) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetItemByPath( 
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItemByPath( 
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItemByPath( 
            /* [in] */ const BSTR Path) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBaseItemDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBaseItemDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBaseItemDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBaseItemDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IBaseItemDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IBaseItemDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IBaseItemDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IBaseItemDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IBaseItemDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IBaseItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IBaseItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IBaseItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IBaseItemDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IBaseItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IBaseItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IBaseItemDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IBaseItemDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IBaseItemDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IBaseItemDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IBaseItemDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IBaseItemDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IBaseItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IBaseItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IBaseItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IBaseItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IBaseItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IBaseItemDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IBaseItemDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IBaseItemDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IBaseItemDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IBaseItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IBaseItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IBaseItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IBaseItemDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IBaseItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IBaseItemDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IBaseItemDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IBaseItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IBaseItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IBaseItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IBaseItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IBaseItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IBaseItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IBaseItemDisp * This,
            /* [in] */ const BSTR Path);
        
        END_INTERFACE
    } IBaseItemDispVtbl;

    interface IBaseItemDisp
    {
        CONST_VTBL struct IBaseItemDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBaseItemDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IBaseItemDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IBaseItemDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IBaseItemDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IBaseItemDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IBaseItemDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IBaseItemDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IBaseItemDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IBaseItemDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IBaseItemDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IBaseItemDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IBaseItemDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IBaseItemDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IBaseItemDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IBaseItemDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IBaseItemDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IBaseItemDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IBaseItemDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IBaseItemDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IBaseItemDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IBaseItemDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IBaseItemDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IBaseItemDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IBaseItemDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IBaseItemDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IBaseItemDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IBaseItemDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IBaseItemDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IBaseItemDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IBaseItemDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IBaseItemDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IBaseItemDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IBaseItemDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IBaseItemDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IBaseItemDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IBaseItemDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IBaseItemDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IBaseItemDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IBaseItemDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IBaseItemDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IBaseItemDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IBaseItemDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IBaseItemDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_Name_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB IBaseItemDisp_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_put_Name_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const BSTR Name);


void __RPC_STUB IBaseItemDisp_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_Path_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ BSTR *Path);


void __RPC_STUB IBaseItemDisp_get_Path_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_FullPath_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ BSTR *Path);


void __RPC_STUB IBaseItemDisp_get_FullPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_Type_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ LONG *Type);


void __RPC_STUB IBaseItemDisp_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_IsReadOnly_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ VARIANT_BOOL *ReadOnly);


void __RPC_STUB IBaseItemDisp_get_IsReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_IsDirty_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ VARIANT_BOOL *Dirty);


void __RPC_STUB IBaseItemDisp_get_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_NodeType_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ WcmNodeType *NodeType);


void __RPC_STUB IBaseItemDisp_get_NodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_DisplayName_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ BSTR *DisplayName);


void __RPC_STUB IBaseItemDisp_get_DisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_put_DisplayName_Proxy( 
    IBaseItemDisp * This,
    /* [string][in] */ const BSTR DisplayName);


void __RPC_STUB IBaseItemDisp_put_DisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_Description_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ BSTR *Description);


void __RPC_STUB IBaseItemDisp_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_put_Description_Proxy( 
    IBaseItemDisp * This,
    /* [string][in] */ const BSTR Description);


void __RPC_STUB IBaseItemDisp_put_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_Parent_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ IBaseItemDisp **Parent);


void __RPC_STUB IBaseItemDisp_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_HasChild_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ VARIANT_BOOL *HasChild);


void __RPC_STUB IBaseItemDisp_get_HasChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_Value_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IBaseItemDisp_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_put_Value_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const VARIANT *Value);


void __RPC_STUB IBaseItemDisp_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_DefaultValue_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IBaseItemDisp_get_DefaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_put_DefaultValue_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const VARIANT *Value);


void __RPC_STUB IBaseItemDisp_put_DefaultValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_GetValueByOptions_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ WcmProcessingOptions Options,
    /* [out] */ WcmValueStatus *Status,
    /* [out] */ FILETIME *Timestamp,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IBaseItemDisp_GetValueByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_SetValueByOptions_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const VARIANT *Value,
    /* [in] */ WcmProcessingOptions Options,
    /* [in] */ FILETIME Timestamp);


void __RPC_STUB IBaseItemDisp_SetValueByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_DeleteValue_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ FILETIME Timestamp);


void __RPC_STUB IBaseItemDisp_DeleteValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_Reset_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ WcmResetOption Option);


void __RPC_STUB IBaseItemDisp_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_Children_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Children);


void __RPC_STUB IBaseItemDisp_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_AddChild_Proxy( 
    IBaseItemDisp * This,
    /* [string][in] */ const BSTR Name,
    /* [retval][out] */ IBaseItemDisp **Child);


void __RPC_STUB IBaseItemDisp_AddChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_GetChild_Proxy( 
    IBaseItemDisp * This,
    /* [string][in] */ const BSTR Name,
    /* [retval][out] */ IBaseItemDisp **Child);


void __RPC_STUB IBaseItemDisp_GetChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_RemoveChild_Proxy( 
    IBaseItemDisp * This,
    /* [string][in] */ const BSTR Name);


void __RPC_STUB IBaseItemDisp_RemoveChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_InsertChild_Proxy( 
    IBaseItemDisp * This,
    /* [string][in] */ const BSTR Name,
    /* [string][in] */ const BSTR Target,
    /* [in] */ BOOL Position,
    /* [retval][out] */ IBaseItemDisp **Child);


void __RPC_STUB IBaseItemDisp_InsertChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_MoveChild_Proxy( 
    IBaseItemDisp * This,
    /* [string][in] */ const BSTR Key,
    /* [string][in] */ const BSTR Target,
    /* [in] */ BOOL Position);


void __RPC_STUB IBaseItemDisp_MoveChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_CompareChildOrder_Proxy( 
    IBaseItemDisp * This,
    /* [string][in] */ const BSTR Item1,
    /* [string][in] */ const BSTR Item2,
    /* [retval][out] */ LONG *Position);


void __RPC_STUB IBaseItemDisp_CompareChildOrder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_get_Attributes_Proxy( 
    IBaseItemDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Attributes);


void __RPC_STUB IBaseItemDisp_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_AddAttribute_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const BSTR Name,
    /* [in] */ const VARIANT *Value);


void __RPC_STUB IBaseItemDisp_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_GetAttribute_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const BSTR Name,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB IBaseItemDisp_GetAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_RemoveAttribute_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const BSTR Name);


void __RPC_STUB IBaseItemDisp_RemoveAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_GetItemByPath_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const BSTR Path,
    /* [retval][out] */ IBaseItemDisp **Item);


void __RPC_STUB IBaseItemDisp_GetItemByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_CreateItemByPath_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const BSTR Path,
    /* [retval][out] */ IBaseItemDisp **Item);


void __RPC_STUB IBaseItemDisp_CreateItemByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IBaseItemDisp_RemoveItemByPath_Proxy( 
    IBaseItemDisp * This,
    /* [in] */ const BSTR Path);


void __RPC_STUB IBaseItemDisp_RemoveItemByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBaseItemDisp_INTERFACE_DEFINED__ */


#ifndef __ISettingsNamespaceDisp_INTERFACE_DEFINED__
#define __ISettingsNamespaceDisp_INTERFACE_DEFINED__

/* interface ISettingsNamespaceDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ISettingsNamespaceDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852222-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsNamespaceDisp : public IBaseItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Identity( 
            /* [retval][out] */ INamespaceIdentityDisp **Identity) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Identity( 
            /* [in] */ INamespaceIdentityDisp *Identity) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Settings( 
            /* [retval][out] */ IItemCollectionDisp **Settings) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Metadata( 
            /* [retval][out] */ IMetadataDisp **Metadata) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Transactions( 
            /* [retval][out] */ IItemCollectionDisp **Transactions) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [in] */ const BSTR Message) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SaveByOptions( 
            /* [in] */ WcmSaveOption Option,
            /* [in] */ const VARIANT *Value,
            /* [retval][out] */ ISettingsResult **ppResult) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reload( 
            /* [in] */ WcmReloadOption Option) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetXmlNamespaceUri( 
            /* [in] */ const BSTR NamespacePrefix,
            /* [retval][out] */ BSTR *NamespaceUri) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetXmlNamespacePrefix( 
            /* [in] */ const BSTR NamespaceUri,
            /* [retval][out] */ BSTR *NamespacePrefix) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Validate( 
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetSettingByPath( 
            /* [in] */ const BSTR Path,
            /* [retval][out] */ ISettingsItemDisp **Setting) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateSettingByPath( 
            /* [in] */ const BSTR Path,
            /* [retval][out] */ ISettingsItemDisp **Setting) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveSettingByPath( 
            /* [in] */ const BSTR Path) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetSettingValue( 
            /* [string][in] */ const BSTR Path,
            /* [retval][out] */ VARIANT *Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetSettingValue( 
            /* [string][in] */ const BSTR Path,
            /* [in] */ const VARIANT *Value) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EvaluateValues( 
            /* [in] */ VARIANT *settings,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsNamespaceDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsNamespaceDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsNamespaceDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISettingsNamespaceDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ INamespaceIdentityDisp **Identity);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Identity )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ INamespaceIdentityDisp *Identity);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Settings )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Settings);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Metadata )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ IMetadataDisp **Metadata);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Transactions )( 
            ISettingsNamespaceDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Transactions);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Message);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SaveByOptions )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ WcmSaveOption Option,
            /* [in] */ const VARIANT *Value,
            /* [retval][out] */ ISettingsResult **ppResult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ WcmReloadOption Option);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXmlNamespaceUri )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR NamespacePrefix,
            /* [retval][out] */ BSTR *NamespaceUri);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetXmlNamespacePrefix )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR NamespaceUri,
            /* [retval][out] */ BSTR *NamespacePrefix);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetSettingByPath )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ ISettingsItemDisp **Setting);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateSettingByPath )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ ISettingsItemDisp **Setting);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveSettingByPath )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetSettingValue )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Path,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetSettingValue )( 
            ISettingsNamespaceDisp * This,
            /* [string][in] */ const BSTR Path,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EvaluateValues )( 
            ISettingsNamespaceDisp * This,
            /* [in] */ VARIANT *settings,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } ISettingsNamespaceDispVtbl;

    interface ISettingsNamespaceDisp
    {
        CONST_VTBL struct ISettingsNamespaceDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsNamespaceDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsNamespaceDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsNamespaceDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsNamespaceDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISettingsNamespaceDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISettingsNamespaceDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISettingsNamespaceDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISettingsNamespaceDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ISettingsNamespaceDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ISettingsNamespaceDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define ISettingsNamespaceDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define ISettingsNamespaceDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ISettingsNamespaceDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define ISettingsNamespaceDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define ISettingsNamespaceDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define ISettingsNamespaceDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define ISettingsNamespaceDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define ISettingsNamespaceDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define ISettingsNamespaceDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define ISettingsNamespaceDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ISettingsNamespaceDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define ISettingsNamespaceDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define ISettingsNamespaceDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define ISettingsNamespaceDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define ISettingsNamespaceDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define ISettingsNamespaceDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISettingsNamespaceDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISettingsNamespaceDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISettingsNamespaceDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISettingsNamespaceDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define ISettingsNamespaceDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISettingsNamespaceDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISettingsNamespaceDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISettingsNamespaceDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define ISettingsNamespaceDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISettingsNamespaceDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISettingsNamespaceDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define ISettingsNamespaceDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISettingsNamespaceDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISettingsNamespaceDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISettingsNamespaceDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISettingsNamespaceDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISettingsNamespaceDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define ISettingsNamespaceDisp_get_Identity(This,Identity)	\
    ( (This)->lpVtbl -> get_Identity(This,Identity) ) 

#define ISettingsNamespaceDisp_put_Identity(This,Identity)	\
    ( (This)->lpVtbl -> put_Identity(This,Identity) ) 

#define ISettingsNamespaceDisp_get_Settings(This,Settings)	\
    ( (This)->lpVtbl -> get_Settings(This,Settings) ) 

#define ISettingsNamespaceDisp_get_Metadata(This,Metadata)	\
    ( (This)->lpVtbl -> get_Metadata(This,Metadata) ) 

#define ISettingsNamespaceDisp_get_Transactions(This,Transactions)	\
    ( (This)->lpVtbl -> get_Transactions(This,Transactions) ) 

#define ISettingsNamespaceDisp_Save(This,Message)	\
    ( (This)->lpVtbl -> Save(This,Message) ) 

#define ISettingsNamespaceDisp_SaveByOptions(This,Option,Value,ppResult)	\
    ( (This)->lpVtbl -> SaveByOptions(This,Option,Value,ppResult) ) 

#define ISettingsNamespaceDisp_Reload(This,Option)	\
    ( (This)->lpVtbl -> Reload(This,Option) ) 

#define ISettingsNamespaceDisp_GetXmlNamespaceUri(This,NamespacePrefix,NamespaceUri)	\
    ( (This)->lpVtbl -> GetXmlNamespaceUri(This,NamespacePrefix,NamespaceUri) ) 

#define ISettingsNamespaceDisp_GetXmlNamespacePrefix(This,NamespaceUri,NamespacePrefix)	\
    ( (This)->lpVtbl -> GetXmlNamespacePrefix(This,NamespaceUri,NamespacePrefix) ) 

#define ISettingsNamespaceDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 

#define ISettingsNamespaceDisp_GetSettingByPath(This,Path,Setting)	\
    ( (This)->lpVtbl -> GetSettingByPath(This,Path,Setting) ) 

#define ISettingsNamespaceDisp_CreateSettingByPath(This,Path,Setting)	\
    ( (This)->lpVtbl -> CreateSettingByPath(This,Path,Setting) ) 

#define ISettingsNamespaceDisp_RemoveSettingByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveSettingByPath(This,Path) ) 

#define ISettingsNamespaceDisp_GetSettingValue(This,Path,Value)	\
    ( (This)->lpVtbl -> GetSettingValue(This,Path,Value) ) 

#define ISettingsNamespaceDisp_SetSettingValue(This,Path,Value)	\
    ( (This)->lpVtbl -> SetSettingValue(This,Path,Value) ) 

#define ISettingsNamespaceDisp_EvaluateValues(This,settings,ppResult)	\
    ( (This)->lpVtbl -> EvaluateValues(This,settings,ppResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_get_Identity_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [retval][out] */ INamespaceIdentityDisp **Identity);


void __RPC_STUB ISettingsNamespaceDisp_get_Identity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_put_Identity_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ INamespaceIdentityDisp *Identity);


void __RPC_STUB ISettingsNamespaceDisp_put_Identity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_get_Settings_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Settings);


void __RPC_STUB ISettingsNamespaceDisp_get_Settings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_get_Metadata_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [retval][out] */ IMetadataDisp **Metadata);


void __RPC_STUB ISettingsNamespaceDisp_get_Metadata_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_get_Transactions_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Transactions);


void __RPC_STUB ISettingsNamespaceDisp_get_Transactions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_Save_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ const BSTR Message);


void __RPC_STUB ISettingsNamespaceDisp_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_SaveByOptions_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ WcmSaveOption Option,
    /* [in] */ const VARIANT *Value,
    /* [retval][out] */ ISettingsResult **ppResult);


void __RPC_STUB ISettingsNamespaceDisp_SaveByOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_Reload_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ WcmReloadOption Option);


void __RPC_STUB ISettingsNamespaceDisp_Reload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_GetXmlNamespaceUri_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ const BSTR NamespacePrefix,
    /* [retval][out] */ BSTR *NamespaceUri);


void __RPC_STUB ISettingsNamespaceDisp_GetXmlNamespaceUri_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_GetXmlNamespacePrefix_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ const BSTR NamespaceUri,
    /* [retval][out] */ BSTR *NamespacePrefix);


void __RPC_STUB ISettingsNamespaceDisp_GetXmlNamespacePrefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_Validate_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ WcmValidateOption Option,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB ISettingsNamespaceDisp_Validate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_GetSettingByPath_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ const BSTR Path,
    /* [retval][out] */ ISettingsItemDisp **Setting);


void __RPC_STUB ISettingsNamespaceDisp_GetSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_CreateSettingByPath_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ const BSTR Path,
    /* [retval][out] */ ISettingsItemDisp **Setting);


void __RPC_STUB ISettingsNamespaceDisp_CreateSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_RemoveSettingByPath_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ const BSTR Path);


void __RPC_STUB ISettingsNamespaceDisp_RemoveSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_GetSettingValue_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [string][in] */ const BSTR Path,
    /* [retval][out] */ VARIANT *Value);


void __RPC_STUB ISettingsNamespaceDisp_GetSettingValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_SetSettingValue_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [string][in] */ const BSTR Path,
    /* [in] */ const VARIANT *Value);


void __RPC_STUB ISettingsNamespaceDisp_SetSettingValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsNamespaceDisp_EvaluateValues_Proxy( 
    ISettingsNamespaceDisp * This,
    /* [in] */ VARIANT *settings,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB ISettingsNamespaceDisp_EvaluateValues_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsNamespaceDisp_INTERFACE_DEFINED__ */


#ifndef __ISettingsItemDisp_INTERFACE_DEFINED__
#define __ISettingsItemDisp_INTERFACE_DEFINED__

/* interface ISettingsItemDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ISettingsItemDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852220-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsItemDisp : public IBaseItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TypeDefinition( 
            /* [retval][out] */ IMetadataItemDisp **Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDynamic( 
            /* [retval][out] */ VARIANT_BOOL *Dynamic) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Assertions( 
            /* [retval][out] */ IItemCollectionDisp **ppAssertions) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ResetToDefault( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetAllowedValues( 
            /* [retval][out] */ ISettingsAllowedValue **AllowedValues) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetSettingByPath( 
            /* [in] */ const BSTR Path,
            /* [retval][out] */ ISettingsItemDisp **Setting) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateSettingByPath( 
            /* [in] */ const BSTR Path,
            /* [retval][out] */ ISettingsItemDisp **Setting) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveSettingByPath( 
            /* [in] */ const BSTR Path) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsItemDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsItemDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsItemDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsItemDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISettingsItemDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISettingsItemDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISettingsItemDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISettingsItemDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            ISettingsItemDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ISettingsItemDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ISettingsItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            ISettingsItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISettingsItemDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISettingsItemDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISettingsItemDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISettingsItemDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISettingsItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISettingsItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISettingsItemDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISettingsItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISettingsItemDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISettingsItemDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TypeDefinition )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ IMetadataItemDisp **Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDynamic )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dynamic);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Assertions )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **ppAssertions);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetToDefault )( 
            ISettingsItemDisp * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAllowedValues )( 
            ISettingsItemDisp * This,
            /* [retval][out] */ ISettingsAllowedValue **AllowedValues);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetSettingByPath )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ ISettingsItemDisp **Setting);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateSettingByPath )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ ISettingsItemDisp **Setting);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveSettingByPath )( 
            ISettingsItemDisp * This,
            /* [in] */ const BSTR Path);
        
        END_INTERFACE
    } ISettingsItemDispVtbl;

    interface ISettingsItemDisp
    {
        CONST_VTBL struct ISettingsItemDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsItemDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsItemDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsItemDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsItemDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISettingsItemDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISettingsItemDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISettingsItemDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISettingsItemDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ISettingsItemDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ISettingsItemDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define ISettingsItemDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define ISettingsItemDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ISettingsItemDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define ISettingsItemDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define ISettingsItemDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define ISettingsItemDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define ISettingsItemDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define ISettingsItemDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define ISettingsItemDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define ISettingsItemDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ISettingsItemDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define ISettingsItemDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define ISettingsItemDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define ISettingsItemDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define ISettingsItemDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define ISettingsItemDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISettingsItemDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISettingsItemDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISettingsItemDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISettingsItemDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define ISettingsItemDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISettingsItemDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISettingsItemDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISettingsItemDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define ISettingsItemDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISettingsItemDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISettingsItemDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define ISettingsItemDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISettingsItemDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISettingsItemDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISettingsItemDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISettingsItemDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISettingsItemDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define ISettingsItemDisp_get_TypeDefinition(This,Type)	\
    ( (This)->lpVtbl -> get_TypeDefinition(This,Type) ) 

#define ISettingsItemDisp_get_IsDynamic(This,Dynamic)	\
    ( (This)->lpVtbl -> get_IsDynamic(This,Dynamic) ) 

#define ISettingsItemDisp_get_Assertions(This,ppAssertions)	\
    ( (This)->lpVtbl -> get_Assertions(This,ppAssertions) ) 

#define ISettingsItemDisp_ResetToDefault(This)	\
    ( (This)->lpVtbl -> ResetToDefault(This) ) 

#define ISettingsItemDisp_GetAllowedValues(This,AllowedValues)	\
    ( (This)->lpVtbl -> GetAllowedValues(This,AllowedValues) ) 

#define ISettingsItemDisp_GetSettingByPath(This,Path,Setting)	\
    ( (This)->lpVtbl -> GetSettingByPath(This,Path,Setting) ) 

#define ISettingsItemDisp_CreateSettingByPath(This,Path,Setting)	\
    ( (This)->lpVtbl -> CreateSettingByPath(This,Path,Setting) ) 

#define ISettingsItemDisp_RemoveSettingByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveSettingByPath(This,Path) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsItemDisp_get_TypeDefinition_Proxy( 
    ISettingsItemDisp * This,
    /* [retval][out] */ IMetadataItemDisp **Type);


void __RPC_STUB ISettingsItemDisp_get_TypeDefinition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsItemDisp_get_IsDynamic_Proxy( 
    ISettingsItemDisp * This,
    /* [retval][out] */ VARIANT_BOOL *Dynamic);


void __RPC_STUB ISettingsItemDisp_get_IsDynamic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsItemDisp_get_Assertions_Proxy( 
    ISettingsItemDisp * This,
    /* [retval][out] */ IItemCollectionDisp **ppAssertions);


void __RPC_STUB ISettingsItemDisp_get_Assertions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsItemDisp_ResetToDefault_Proxy( 
    ISettingsItemDisp * This);


void __RPC_STUB ISettingsItemDisp_ResetToDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsItemDisp_GetAllowedValues_Proxy( 
    ISettingsItemDisp * This,
    /* [retval][out] */ ISettingsAllowedValue **AllowedValues);


void __RPC_STUB ISettingsItemDisp_GetAllowedValues_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsItemDisp_GetSettingByPath_Proxy( 
    ISettingsItemDisp * This,
    /* [in] */ const BSTR Path,
    /* [retval][out] */ ISettingsItemDisp **Setting);


void __RPC_STUB ISettingsItemDisp_GetSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsItemDisp_CreateSettingByPath_Proxy( 
    ISettingsItemDisp * This,
    /* [in] */ const BSTR Path,
    /* [retval][out] */ ISettingsItemDisp **Setting);


void __RPC_STUB ISettingsItemDisp_CreateSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISettingsItemDisp_RemoveSettingByPath_Proxy( 
    ISettingsItemDisp * This,
    /* [in] */ const BSTR Path);


void __RPC_STUB ISettingsItemDisp_RemoveSettingByPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsItemDisp_INTERFACE_DEFINED__ */


#ifndef __ISettingsAttributeDisp_INTERFACE_DEFINED__
#define __ISettingsAttributeDisp_INTERFACE_DEFINED__

/* interface ISettingsAttributeDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ISettingsAttributeDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785222F-3BA4-11D7-BF56-000874CD1BAE")
    ISettingsAttributeDisp : public IBaseItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsInherited( 
            /* [retval][out] */ VARIANT_BOOL *ReadOnly) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AttributeType( 
            /* [retval][out] */ WcmAttributeType *AttributeType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISettingsAttributeDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISettingsAttributeDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISettingsAttributeDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISettingsAttributeDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISettingsAttributeDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISettingsAttributeDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISettingsAttributeDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISettingsAttributeDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            ISettingsAttributeDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ISettingsAttributeDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISettingsAttributeDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISettingsAttributeDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISettingsAttributeDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISettingsAttributeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISettingsAttributeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISettingsAttributeDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISettingsAttributeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISettingsAttributeDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISettingsAttributeDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISettingsAttributeDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInherited )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AttributeType )( 
            ISettingsAttributeDisp * This,
            /* [retval][out] */ WcmAttributeType *AttributeType);
        
        END_INTERFACE
    } ISettingsAttributeDispVtbl;

    interface ISettingsAttributeDisp
    {
        CONST_VTBL struct ISettingsAttributeDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISettingsAttributeDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISettingsAttributeDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISettingsAttributeDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISettingsAttributeDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISettingsAttributeDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISettingsAttributeDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISettingsAttributeDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISettingsAttributeDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ISettingsAttributeDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ISettingsAttributeDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define ISettingsAttributeDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define ISettingsAttributeDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ISettingsAttributeDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define ISettingsAttributeDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define ISettingsAttributeDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define ISettingsAttributeDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define ISettingsAttributeDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define ISettingsAttributeDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define ISettingsAttributeDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define ISettingsAttributeDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ISettingsAttributeDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define ISettingsAttributeDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define ISettingsAttributeDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define ISettingsAttributeDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define ISettingsAttributeDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define ISettingsAttributeDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISettingsAttributeDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISettingsAttributeDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISettingsAttributeDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISettingsAttributeDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define ISettingsAttributeDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISettingsAttributeDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISettingsAttributeDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISettingsAttributeDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define ISettingsAttributeDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISettingsAttributeDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISettingsAttributeDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define ISettingsAttributeDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISettingsAttributeDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISettingsAttributeDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISettingsAttributeDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISettingsAttributeDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISettingsAttributeDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define ISettingsAttributeDisp_get_IsInherited(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsInherited(This,ReadOnly) ) 

#define ISettingsAttributeDisp_get_AttributeType(This,AttributeType)	\
    ( (This)->lpVtbl -> get_AttributeType(This,AttributeType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsAttributeDisp_get_IsInherited_Proxy( 
    ISettingsAttributeDisp * This,
    /* [retval][out] */ VARIANT_BOOL *ReadOnly);


void __RPC_STUB ISettingsAttributeDisp_get_IsInherited_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISettingsAttributeDisp_get_AttributeType_Proxy( 
    ISettingsAttributeDisp * This,
    /* [retval][out] */ WcmAttributeType *AttributeType);


void __RPC_STUB ISettingsAttributeDisp_get_AttributeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISettingsAttributeDisp_INTERFACE_DEFINED__ */


#ifndef __IMetadataItemDisp_INTERFACE_DEFINED__
#define __IMetadataItemDisp_INTERFACE_DEFINED__

/* interface IMetadataItemDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IMetadataItemDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852221-3BA4-11D7-BF56-000874CD1BAE")
    IMetadataItemDisp : public IBaseItemDisp
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Validate( 
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMetadataItemDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMetadataItemDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMetadataItemDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMetadataItemDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMetadataItemDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMetadataItemDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMetadataItemDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMetadataItemDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IMetadataItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IMetadataItemDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IMetadataItemDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IMetadataItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IMetadataItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IMetadataItemDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IMetadataItemDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IMetadataItemDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IMetadataItemDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IMetadataItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IMetadataItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IMetadataItemDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IMetadataItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IMetadataItemDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IMetadataItemDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IMetadataItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IMetadataItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IMetadataItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IMetadataItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IMetadataItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IMetadataItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IMetadataItemDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IMetadataItemDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IMetadataItemDispVtbl;

    interface IMetadataItemDisp
    {
        CONST_VTBL struct IMetadataItemDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMetadataItemDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMetadataItemDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMetadataItemDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMetadataItemDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMetadataItemDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMetadataItemDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMetadataItemDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMetadataItemDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMetadataItemDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IMetadataItemDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IMetadataItemDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IMetadataItemDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IMetadataItemDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IMetadataItemDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IMetadataItemDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IMetadataItemDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IMetadataItemDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IMetadataItemDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IMetadataItemDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IMetadataItemDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IMetadataItemDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IMetadataItemDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IMetadataItemDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IMetadataItemDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IMetadataItemDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IMetadataItemDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IMetadataItemDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IMetadataItemDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IMetadataItemDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IMetadataItemDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IMetadataItemDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IMetadataItemDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IMetadataItemDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IMetadataItemDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IMetadataItemDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IMetadataItemDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IMetadataItemDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IMetadataItemDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IMetadataItemDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IMetadataItemDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IMetadataItemDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IMetadataItemDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IMetadataItemDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IMetadataItemDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IMetadataItemDisp_Validate_Proxy( 
    IMetadataItemDisp * This,
    /* [in] */ WcmValidateOption Option,
    /* [retval][out] */ VARIANT *ppResult);


void __RPC_STUB IMetadataItemDisp_Validate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMetadataItemDisp_INTERFACE_DEFINED__ */


#ifndef __IMetadataDisp_INTERFACE_DEFINED__
#define __IMetadataDisp_INTERFACE_DEFINED__

/* interface IMetadataDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IMetadataDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852223-3BA4-11D7-BF56-000874CD1BAE")
    IMetadataDisp : public IBaseItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ComplexTypes( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SimpleTypes( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Elements( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomHandlers( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Substitutions( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Expressions( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Assertions( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_RefactoredSettings( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SecurityDefinitions( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Variables( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IsAssertionExpressionValid( 
            /* [in] */ const BSTR expression,
            /* [retval][out] */ ISettingsResult **ppIResult) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateAssertion( 
            /* [in] */ BSTR name,
            /* [in] */ WcmAssertionType assertionType,
            /* [in] */ BSTR expression,
            /* [in] */ BSTR satValues,
            /* [in] */ BOOL bPending,
            /* [retval][out] */ IAssertionDisp **newAssertion) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AreAssertionsInConflict( 
            /* [in] */ const BSTR assertExpression1,
            /* [in] */ const BSTR assertExpression2,
            /* [retval][out] */ ISettingsResult **pResult) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE MergeAssertions( 
            /* [in] */ const BSTR assertExpression1,
            /* [in] */ const BSTR assertExpression2,
            /* [retval][out] */ BSTR *newAssertExpression) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMetadataDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMetadataDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMetadataDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMetadataDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMetadataDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMetadataDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMetadataDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMetadataDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMetadataDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IMetadataDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IMetadataDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IMetadataDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IMetadataDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IMetadataDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IMetadataDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IMetadataDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IMetadataDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IMetadataDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IMetadataDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IMetadataDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IMetadataDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IMetadataDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IMetadataDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IMetadataDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IMetadataDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IMetadataDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IMetadataDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IMetadataDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IMetadataDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IMetadataDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IMetadataDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IMetadataDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IMetadataDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IMetadataDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IMetadataDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ComplexTypes )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SimpleTypes )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Elements )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomHandlers )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Substitutions )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Expressions )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Assertions )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RefactoredSettings )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SecurityDefinitions )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Variables )( 
            IMetadataDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *IsAssertionExpressionValid )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR expression,
            /* [retval][out] */ ISettingsResult **ppIResult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateAssertion )( 
            IMetadataDisp * This,
            /* [in] */ BSTR name,
            /* [in] */ WcmAssertionType assertionType,
            /* [in] */ BSTR expression,
            /* [in] */ BSTR satValues,
            /* [in] */ BOOL bPending,
            /* [retval][out] */ IAssertionDisp **newAssertion);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AreAssertionsInConflict )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR assertExpression1,
            /* [in] */ const BSTR assertExpression2,
            /* [retval][out] */ ISettingsResult **pResult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MergeAssertions )( 
            IMetadataDisp * This,
            /* [in] */ const BSTR assertExpression1,
            /* [in] */ const BSTR assertExpression2,
            /* [retval][out] */ BSTR *newAssertExpression);
        
        END_INTERFACE
    } IMetadataDispVtbl;

    interface IMetadataDisp
    {
        CONST_VTBL struct IMetadataDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMetadataDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMetadataDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMetadataDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMetadataDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMetadataDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMetadataDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMetadataDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMetadataDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMetadataDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IMetadataDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IMetadataDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IMetadataDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IMetadataDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IMetadataDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IMetadataDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IMetadataDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IMetadataDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IMetadataDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IMetadataDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IMetadataDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IMetadataDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IMetadataDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IMetadataDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IMetadataDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IMetadataDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IMetadataDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IMetadataDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IMetadataDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IMetadataDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IMetadataDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IMetadataDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IMetadataDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IMetadataDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IMetadataDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IMetadataDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IMetadataDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IMetadataDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IMetadataDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IMetadataDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IMetadataDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IMetadataDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IMetadataDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IMetadataDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IMetadataDisp_get_ComplexTypes(This,Collection)	\
    ( (This)->lpVtbl -> get_ComplexTypes(This,Collection) ) 

#define IMetadataDisp_get_SimpleTypes(This,Collection)	\
    ( (This)->lpVtbl -> get_SimpleTypes(This,Collection) ) 

#define IMetadataDisp_get_Elements(This,Collection)	\
    ( (This)->lpVtbl -> get_Elements(This,Collection) ) 

#define IMetadataDisp_get_CustomHandlers(This,Collection)	\
    ( (This)->lpVtbl -> get_CustomHandlers(This,Collection) ) 

#define IMetadataDisp_get_Substitutions(This,Collection)	\
    ( (This)->lpVtbl -> get_Substitutions(This,Collection) ) 

#define IMetadataDisp_get_Expressions(This,Collection)	\
    ( (This)->lpVtbl -> get_Expressions(This,Collection) ) 

#define IMetadataDisp_get_Assertions(This,Collection)	\
    ( (This)->lpVtbl -> get_Assertions(This,Collection) ) 

#define IMetadataDisp_get_RefactoredSettings(This,Collection)	\
    ( (This)->lpVtbl -> get_RefactoredSettings(This,Collection) ) 

#define IMetadataDisp_get_SecurityDefinitions(This,Collection)	\
    ( (This)->lpVtbl -> get_SecurityDefinitions(This,Collection) ) 

#define IMetadataDisp_get_Variables(This,Collection)	\
    ( (This)->lpVtbl -> get_Variables(This,Collection) ) 

#define IMetadataDisp_IsAssertionExpressionValid(This,expression,ppIResult)	\
    ( (This)->lpVtbl -> IsAssertionExpressionValid(This,expression,ppIResult) ) 

#define IMetadataDisp_CreateAssertion(This,name,assertionType,expression,satValues,bPending,newAssertion)	\
    ( (This)->lpVtbl -> CreateAssertion(This,name,assertionType,expression,satValues,bPending,newAssertion) ) 

#define IMetadataDisp_AreAssertionsInConflict(This,assertExpression1,assertExpression2,pResult)	\
    ( (This)->lpVtbl -> AreAssertionsInConflict(This,assertExpression1,assertExpression2,pResult) ) 

#define IMetadataDisp_MergeAssertions(This,assertExpression1,assertExpression2,newAssertExpression)	\
    ( (This)->lpVtbl -> MergeAssertions(This,assertExpression1,assertExpression2,newAssertExpression) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_ComplexTypes_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_ComplexTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_SimpleTypes_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_SimpleTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_Elements_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_Elements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_CustomHandlers_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_CustomHandlers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_Substitutions_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_Substitutions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_Expressions_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_Expressions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_Assertions_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_Assertions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_RefactoredSettings_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_RefactoredSettings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_SecurityDefinitions_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_SecurityDefinitions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_get_Variables_Proxy( 
    IMetadataDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB IMetadataDisp_get_Variables_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_IsAssertionExpressionValid_Proxy( 
    IMetadataDisp * This,
    /* [in] */ const BSTR expression,
    /* [retval][out] */ ISettingsResult **ppIResult);


void __RPC_STUB IMetadataDisp_IsAssertionExpressionValid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_CreateAssertion_Proxy( 
    IMetadataDisp * This,
    /* [in] */ BSTR name,
    /* [in] */ WcmAssertionType assertionType,
    /* [in] */ BSTR expression,
    /* [in] */ BSTR satValues,
    /* [in] */ BOOL bPending,
    /* [retval][out] */ IAssertionDisp **newAssertion);


void __RPC_STUB IMetadataDisp_CreateAssertion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_AreAssertionsInConflict_Proxy( 
    IMetadataDisp * This,
    /* [in] */ const BSTR assertExpression1,
    /* [in] */ const BSTR assertExpression2,
    /* [retval][out] */ ISettingsResult **pResult);


void __RPC_STUB IMetadataDisp_AreAssertionsInConflict_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IMetadataDisp_MergeAssertions_Proxy( 
    IMetadataDisp * This,
    /* [in] */ const BSTR assertExpression1,
    /* [in] */ const BSTR assertExpression2,
    /* [retval][out] */ BSTR *newAssertExpression);


void __RPC_STUB IMetadataDisp_MergeAssertions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMetadataDisp_INTERFACE_DEFINED__ */


#ifndef __IAssertionDisp_INTERFACE_DEFINED__
#define __IAssertionDisp_INTERFACE_DEFINED__

/* interface IAssertionDisp */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IAssertionDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852232-3BA4-11D7-BF56-000874CD1BAE")
    IAssertionDisp : public IMetadataItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Expression( 
            /* [retval][out] */ BSTR *expression) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Expression( 
            /* [in] */ const BSTR newExpression) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsPending( 
            /* [retval][out] */ BOOL *bResult) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsPending( 
            /* [in] */ BOOL bSetting) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_FailedAction( 
            /* [retval][out] */ BSTR *action) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_FailedAction( 
            /* [in] */ const BSTR action) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SilencedAction( 
            /* [retval][out] */ BSTR *action) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SilencedAction( 
            /* [in] */ const BSTR newAction) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Source( 
            /* [retval][out] */ BSTR *source) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Source( 
            /* [in] */ const BSTR source) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Category( 
            /* [retval][out] */ BSTR *category) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Category( 
            /* [in] */ const BSTR category) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_AssertionType( 
            /* [retval][out] */ WcmAssertionType *at) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExplicitSilenceState( 
            /* [retval][out] */ BOOL *bIsSilenced) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExplicitSilenceState( 
            /* [in] */ BOOL isSilence) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImplicitSilenceState( 
            /* [retval][out] */ BOOL *isSilenced) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SettingNames( 
            /* [retval][out] */ BSTR *names) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Users( 
            /* [retval][out] */ BSTR *users) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Users( 
            /* [in] */ const BSTR users) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SilenceLinks( 
            /* [retval][out] */ BSTR *slink) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SilenceLinks( 
            /* [in] */ const BSTR slink) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackwardSilenceLinks( 
            /* [retval][out] */ BSTR *backlink) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackwardSilenceLinks( 
            /* [in] */ const BSTR backLink) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HelpUrl( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HelpUrl( 
            /* [in] */ const BSTR value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Silencer( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SilenceCause( 
            /* [retval][out] */ WcmSilenceCause *value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SatisfyValueExpression( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SatisfyValueExpression( 
            /* [in] */ const BSTR value) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_MasterSwitch( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_MasterSwitch( 
            /* [in] */ const BSTR value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAssertionDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAssertionDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAssertionDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAssertionDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IAssertionDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IAssertionDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IAssertionDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAssertionDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IAssertionDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IAssertionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IAssertionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IAssertionDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IAssertionDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IAssertionDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IAssertionDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IAssertionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IAssertionDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IAssertionDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IAssertionDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IAssertionDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IAssertionDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IAssertionDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IAssertionDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IAssertionDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IAssertionDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IAssertionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IAssertionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IAssertionDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IAssertionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IAssertionDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IAssertionDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IAssertionDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IAssertionDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Expression )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *expression);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Expression )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR newExpression);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPending )( 
            IAssertionDisp * This,
            /* [retval][out] */ BOOL *bResult);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsPending )( 
            IAssertionDisp * This,
            /* [in] */ BOOL bSetting);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FailedAction )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *action);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FailedAction )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR action);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SilencedAction )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *action);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SilencedAction )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR newAction);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *source);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR source);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *category);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Category )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR category);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AssertionType )( 
            IAssertionDisp * This,
            /* [retval][out] */ WcmAssertionType *at);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExplicitSilenceState )( 
            IAssertionDisp * This,
            /* [retval][out] */ BOOL *bIsSilenced);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExplicitSilenceState )( 
            IAssertionDisp * This,
            /* [in] */ BOOL isSilence);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImplicitSilenceState )( 
            IAssertionDisp * This,
            /* [retval][out] */ BOOL *isSilenced);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SettingNames )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *names);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Users )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *users);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Users )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR users);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SilenceLinks )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *slink);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SilenceLinks )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR slink);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackwardSilenceLinks )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *backlink);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackwardSilenceLinks )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR backLink);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HelpUrl )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HelpUrl )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Silencer )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SilenceCause )( 
            IAssertionDisp * This,
            /* [retval][out] */ WcmSilenceCause *value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SatisfyValueExpression )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SatisfyValueExpression )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MasterSwitch )( 
            IAssertionDisp * This,
            /* [retval][out] */ BSTR *value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MasterSwitch )( 
            IAssertionDisp * This,
            /* [in] */ const BSTR value);
        
        END_INTERFACE
    } IAssertionDispVtbl;

    interface IAssertionDisp
    {
        CONST_VTBL struct IAssertionDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAssertionDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAssertionDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAssertionDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAssertionDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAssertionDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAssertionDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAssertionDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAssertionDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IAssertionDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IAssertionDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IAssertionDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IAssertionDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IAssertionDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IAssertionDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IAssertionDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IAssertionDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IAssertionDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IAssertionDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IAssertionDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IAssertionDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IAssertionDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IAssertionDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IAssertionDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IAssertionDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IAssertionDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IAssertionDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IAssertionDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IAssertionDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IAssertionDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IAssertionDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IAssertionDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IAssertionDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IAssertionDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IAssertionDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IAssertionDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IAssertionDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IAssertionDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IAssertionDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IAssertionDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IAssertionDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IAssertionDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IAssertionDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IAssertionDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IAssertionDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IAssertionDisp_get_Expression(This,expression)	\
    ( (This)->lpVtbl -> get_Expression(This,expression) ) 

#define IAssertionDisp_put_Expression(This,newExpression)	\
    ( (This)->lpVtbl -> put_Expression(This,newExpression) ) 

#define IAssertionDisp_get_IsPending(This,bResult)	\
    ( (This)->lpVtbl -> get_IsPending(This,bResult) ) 

#define IAssertionDisp_put_IsPending(This,bSetting)	\
    ( (This)->lpVtbl -> put_IsPending(This,bSetting) ) 

#define IAssertionDisp_get_FailedAction(This,action)	\
    ( (This)->lpVtbl -> get_FailedAction(This,action) ) 

#define IAssertionDisp_put_FailedAction(This,action)	\
    ( (This)->lpVtbl -> put_FailedAction(This,action) ) 

#define IAssertionDisp_get_SilencedAction(This,action)	\
    ( (This)->lpVtbl -> get_SilencedAction(This,action) ) 

#define IAssertionDisp_put_SilencedAction(This,newAction)	\
    ( (This)->lpVtbl -> put_SilencedAction(This,newAction) ) 

#define IAssertionDisp_get_Source(This,source)	\
    ( (This)->lpVtbl -> get_Source(This,source) ) 

#define IAssertionDisp_put_Source(This,source)	\
    ( (This)->lpVtbl -> put_Source(This,source) ) 

#define IAssertionDisp_get_Category(This,category)	\
    ( (This)->lpVtbl -> get_Category(This,category) ) 

#define IAssertionDisp_put_Category(This,category)	\
    ( (This)->lpVtbl -> put_Category(This,category) ) 

#define IAssertionDisp_get_AssertionType(This,at)	\
    ( (This)->lpVtbl -> get_AssertionType(This,at) ) 

#define IAssertionDisp_get_ExplicitSilenceState(This,bIsSilenced)	\
    ( (This)->lpVtbl -> get_ExplicitSilenceState(This,bIsSilenced) ) 

#define IAssertionDisp_put_ExplicitSilenceState(This,isSilence)	\
    ( (This)->lpVtbl -> put_ExplicitSilenceState(This,isSilence) ) 

#define IAssertionDisp_get_ImplicitSilenceState(This,isSilenced)	\
    ( (This)->lpVtbl -> get_ImplicitSilenceState(This,isSilenced) ) 

#define IAssertionDisp_get_SettingNames(This,names)	\
    ( (This)->lpVtbl -> get_SettingNames(This,names) ) 

#define IAssertionDisp_get_Users(This,users)	\
    ( (This)->lpVtbl -> get_Users(This,users) ) 

#define IAssertionDisp_put_Users(This,users)	\
    ( (This)->lpVtbl -> put_Users(This,users) ) 

#define IAssertionDisp_get_SilenceLinks(This,slink)	\
    ( (This)->lpVtbl -> get_SilenceLinks(This,slink) ) 

#define IAssertionDisp_put_SilenceLinks(This,slink)	\
    ( (This)->lpVtbl -> put_SilenceLinks(This,slink) ) 

#define IAssertionDisp_get_BackwardSilenceLinks(This,backlink)	\
    ( (This)->lpVtbl -> get_BackwardSilenceLinks(This,backlink) ) 

#define IAssertionDisp_put_BackwardSilenceLinks(This,backLink)	\
    ( (This)->lpVtbl -> put_BackwardSilenceLinks(This,backLink) ) 

#define IAssertionDisp_get_HelpUrl(This,value)	\
    ( (This)->lpVtbl -> get_HelpUrl(This,value) ) 

#define IAssertionDisp_put_HelpUrl(This,value)	\
    ( (This)->lpVtbl -> put_HelpUrl(This,value) ) 

#define IAssertionDisp_get_Silencer(This,value)	\
    ( (This)->lpVtbl -> get_Silencer(This,value) ) 

#define IAssertionDisp_get_SilenceCause(This,value)	\
    ( (This)->lpVtbl -> get_SilenceCause(This,value) ) 

#define IAssertionDisp_get_SatisfyValueExpression(This,value)	\
    ( (This)->lpVtbl -> get_SatisfyValueExpression(This,value) ) 

#define IAssertionDisp_put_SatisfyValueExpression(This,value)	\
    ( (This)->lpVtbl -> put_SatisfyValueExpression(This,value) ) 

#define IAssertionDisp_get_MasterSwitch(This,value)	\
    ( (This)->lpVtbl -> get_MasterSwitch(This,value) ) 

#define IAssertionDisp_put_MasterSwitch(This,value)	\
    ( (This)->lpVtbl -> put_MasterSwitch(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_Expression_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *expression);


void __RPC_STUB IAssertionDisp_get_Expression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_Expression_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR newExpression);


void __RPC_STUB IAssertionDisp_put_Expression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_IsPending_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BOOL *bResult);


void __RPC_STUB IAssertionDisp_get_IsPending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_IsPending_Proxy( 
    IAssertionDisp * This,
    /* [in] */ BOOL bSetting);


void __RPC_STUB IAssertionDisp_put_IsPending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_FailedAction_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *action);


void __RPC_STUB IAssertionDisp_get_FailedAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_FailedAction_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR action);


void __RPC_STUB IAssertionDisp_put_FailedAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_SilencedAction_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *action);


void __RPC_STUB IAssertionDisp_get_SilencedAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_SilencedAction_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR newAction);


void __RPC_STUB IAssertionDisp_put_SilencedAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_Source_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *source);


void __RPC_STUB IAssertionDisp_get_Source_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_Source_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR source);


void __RPC_STUB IAssertionDisp_put_Source_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_Category_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *category);


void __RPC_STUB IAssertionDisp_get_Category_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_Category_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR category);


void __RPC_STUB IAssertionDisp_put_Category_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_AssertionType_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ WcmAssertionType *at);


void __RPC_STUB IAssertionDisp_get_AssertionType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_ExplicitSilenceState_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BOOL *bIsSilenced);


void __RPC_STUB IAssertionDisp_get_ExplicitSilenceState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_ExplicitSilenceState_Proxy( 
    IAssertionDisp * This,
    /* [in] */ BOOL isSilence);


void __RPC_STUB IAssertionDisp_put_ExplicitSilenceState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_ImplicitSilenceState_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BOOL *isSilenced);


void __RPC_STUB IAssertionDisp_get_ImplicitSilenceState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_SettingNames_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *names);


void __RPC_STUB IAssertionDisp_get_SettingNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_Users_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *users);


void __RPC_STUB IAssertionDisp_get_Users_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_Users_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR users);


void __RPC_STUB IAssertionDisp_put_Users_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_SilenceLinks_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *slink);


void __RPC_STUB IAssertionDisp_get_SilenceLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_SilenceLinks_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR slink);


void __RPC_STUB IAssertionDisp_put_SilenceLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_BackwardSilenceLinks_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *backlink);


void __RPC_STUB IAssertionDisp_get_BackwardSilenceLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_BackwardSilenceLinks_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR backLink);


void __RPC_STUB IAssertionDisp_put_BackwardSilenceLinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_HelpUrl_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *value);


void __RPC_STUB IAssertionDisp_get_HelpUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_HelpUrl_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR value);


void __RPC_STUB IAssertionDisp_put_HelpUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_Silencer_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *value);


void __RPC_STUB IAssertionDisp_get_Silencer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_SilenceCause_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ WcmSilenceCause *value);


void __RPC_STUB IAssertionDisp_get_SilenceCause_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_SatisfyValueExpression_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *value);


void __RPC_STUB IAssertionDisp_get_SatisfyValueExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_SatisfyValueExpression_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR value);


void __RPC_STUB IAssertionDisp_put_SatisfyValueExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_get_MasterSwitch_Proxy( 
    IAssertionDisp * This,
    /* [retval][out] */ BSTR *value);


void __RPC_STUB IAssertionDisp_get_MasterSwitch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IAssertionDisp_put_MasterSwitch_Proxy( 
    IAssertionDisp * This,
    /* [in] */ const BSTR value);


void __RPC_STUB IAssertionDisp_put_MasterSwitch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAssertionDisp_INTERFACE_DEFINED__ */


#ifndef __IComplexTypeDisp_INTERFACE_DEFINED__
#define __IComplexTypeDisp_INTERFACE_DEFINED__

/* interface IComplexTypeDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IComplexTypeDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852225-3BA4-11D7-BF56-000874CD1BAE")
    IComplexTypeDisp : public IMetadataItemDisp
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddMemberElement( 
            /* [in] */ const BSTR Name,
            /* [in] */ const BSTR Type,
            /* [in] */ const VARIANT *DefaultValue,
            /* [retval][out] */ IMemberElementDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetMemberElement( 
            /* [in] */ const BSTR Name,
            /* [retval][out] */ IMemberElementDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveMemberElement( 
            /* [in] */ const BSTR Name) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddMemberAttribute( 
            /* [in] */ const BSTR Name,
            /* [in] */ const BSTR Type,
            /* [in] */ const VARIANT *DefaultValue,
            /* [retval][out] */ IMemberAttributeDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetMemberAttribute( 
            /* [in] */ const BSTR Name,
            /* [retval][out] */ IMemberAttributeDisp **Item) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveMemberAttribute( 
            /* [in] */ const BSTR Name) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IComplexTypeDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IComplexTypeDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IComplexTypeDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IComplexTypeDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IComplexTypeDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IComplexTypeDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IComplexTypeDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IComplexTypeDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IComplexTypeDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IComplexTypeDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IComplexTypeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IComplexTypeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IComplexTypeDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IComplexTypeDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IComplexTypeDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IComplexTypeDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IComplexTypeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IComplexTypeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IComplexTypeDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IComplexTypeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IComplexTypeDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IComplexTypeDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IComplexTypeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IComplexTypeDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMemberElement )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const BSTR Type,
            /* [in] */ const VARIANT *DefaultValue,
            /* [retval][out] */ IMemberElementDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetMemberElement )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ IMemberElementDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMemberElement )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddMemberAttribute )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const BSTR Type,
            /* [in] */ const VARIANT *DefaultValue,
            /* [retval][out] */ IMemberAttributeDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetMemberAttribute )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ IMemberAttributeDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMemberAttribute )( 
            IComplexTypeDisp * This,
            /* [in] */ const BSTR Name);
        
        END_INTERFACE
    } IComplexTypeDispVtbl;

    interface IComplexTypeDisp
    {
        CONST_VTBL struct IComplexTypeDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IComplexTypeDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IComplexTypeDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IComplexTypeDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IComplexTypeDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IComplexTypeDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IComplexTypeDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IComplexTypeDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IComplexTypeDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IComplexTypeDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IComplexTypeDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IComplexTypeDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IComplexTypeDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IComplexTypeDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IComplexTypeDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IComplexTypeDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IComplexTypeDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IComplexTypeDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IComplexTypeDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IComplexTypeDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IComplexTypeDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IComplexTypeDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IComplexTypeDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IComplexTypeDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IComplexTypeDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IComplexTypeDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IComplexTypeDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IComplexTypeDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IComplexTypeDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IComplexTypeDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IComplexTypeDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IComplexTypeDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IComplexTypeDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IComplexTypeDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IComplexTypeDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IComplexTypeDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IComplexTypeDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IComplexTypeDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IComplexTypeDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IComplexTypeDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IComplexTypeDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IComplexTypeDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IComplexTypeDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IComplexTypeDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IComplexTypeDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IComplexTypeDisp_AddMemberElement(This,Name,Type,DefaultValue,Item)	\
    ( (This)->lpVtbl -> AddMemberElement(This,Name,Type,DefaultValue,Item) ) 

#define IComplexTypeDisp_GetMemberElement(This,Name,Item)	\
    ( (This)->lpVtbl -> GetMemberElement(This,Name,Item) ) 

#define IComplexTypeDisp_RemoveMemberElement(This,Name)	\
    ( (This)->lpVtbl -> RemoveMemberElement(This,Name) ) 

#define IComplexTypeDisp_AddMemberAttribute(This,Name,Type,DefaultValue,Item)	\
    ( (This)->lpVtbl -> AddMemberAttribute(This,Name,Type,DefaultValue,Item) ) 

#define IComplexTypeDisp_GetMemberAttribute(This,Name,Item)	\
    ( (This)->lpVtbl -> GetMemberAttribute(This,Name,Item) ) 

#define IComplexTypeDisp_RemoveMemberAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveMemberAttribute(This,Name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IComplexTypeDisp_AddMemberElement_Proxy( 
    IComplexTypeDisp * This,
    /* [in] */ const BSTR Name,
    /* [in] */ const BSTR Type,
    /* [in] */ const VARIANT *DefaultValue,
    /* [retval][out] */ IMemberElementDisp **Item);


void __RPC_STUB IComplexTypeDisp_AddMemberElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IComplexTypeDisp_GetMemberElement_Proxy( 
    IComplexTypeDisp * This,
    /* [in] */ const BSTR Name,
    /* [retval][out] */ IMemberElementDisp **Item);


void __RPC_STUB IComplexTypeDisp_GetMemberElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IComplexTypeDisp_RemoveMemberElement_Proxy( 
    IComplexTypeDisp * This,
    /* [in] */ const BSTR Name);


void __RPC_STUB IComplexTypeDisp_RemoveMemberElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IComplexTypeDisp_AddMemberAttribute_Proxy( 
    IComplexTypeDisp * This,
    /* [in] */ const BSTR Name,
    /* [in] */ const BSTR Type,
    /* [in] */ const VARIANT *DefaultValue,
    /* [retval][out] */ IMemberAttributeDisp **Item);


void __RPC_STUB IComplexTypeDisp_AddMemberAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IComplexTypeDisp_GetMemberAttribute_Proxy( 
    IComplexTypeDisp * This,
    /* [in] */ const BSTR Name,
    /* [retval][out] */ IMemberAttributeDisp **Item);


void __RPC_STUB IComplexTypeDisp_GetMemberAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IComplexTypeDisp_RemoveMemberAttribute_Proxy( 
    IComplexTypeDisp * This,
    /* [in] */ const BSTR Name);


void __RPC_STUB IComplexTypeDisp_RemoveMemberAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IComplexTypeDisp_INTERFACE_DEFINED__ */


#ifndef __ISimpleTypeDisp_INTERFACE_DEFINED__
#define __ISimpleTypeDisp_INTERFACE_DEFINED__

/* interface ISimpleTypeDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ISimpleTypeDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852226-3BA4-11D7-BF56-000874CD1BAE")
    ISimpleTypeDisp : public IMetadataItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XsdType( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XsdType( 
            /* [in] */ const BSTR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArrayType( 
            /* [retval][out] */ BOOL *pfArrayType) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArrayType( 
            /* [in] */ BOOL fArrayType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Restrictions( 
            /* [retval][out] */ IItemCollectionDisp **Collection) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISimpleTypeDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISimpleTypeDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISimpleTypeDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISimpleTypeDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISimpleTypeDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISimpleTypeDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISimpleTypeDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISimpleTypeDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ISimpleTypeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            ISimpleTypeDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ISimpleTypeDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ISimpleTypeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            ISimpleTypeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISimpleTypeDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISimpleTypeDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISimpleTypeDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISimpleTypeDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISimpleTypeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISimpleTypeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISimpleTypeDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISimpleTypeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISimpleTypeDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISimpleTypeDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISimpleTypeDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISimpleTypeDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISimpleTypeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISimpleTypeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISimpleTypeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISimpleTypeDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ISimpleTypeDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XsdType )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XsdType )( 
            ISimpleTypeDisp * This,
            /* [in] */ const BSTR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArrayType )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ BOOL *pfArrayType);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArrayType )( 
            ISimpleTypeDisp * This,
            /* [in] */ BOOL fArrayType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Restrictions )( 
            ISimpleTypeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Collection);
        
        END_INTERFACE
    } ISimpleTypeDispVtbl;

    interface ISimpleTypeDisp
    {
        CONST_VTBL struct ISimpleTypeDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISimpleTypeDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISimpleTypeDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISimpleTypeDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISimpleTypeDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISimpleTypeDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISimpleTypeDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISimpleTypeDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISimpleTypeDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ISimpleTypeDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ISimpleTypeDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define ISimpleTypeDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define ISimpleTypeDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ISimpleTypeDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define ISimpleTypeDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define ISimpleTypeDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define ISimpleTypeDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define ISimpleTypeDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define ISimpleTypeDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define ISimpleTypeDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define ISimpleTypeDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ISimpleTypeDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define ISimpleTypeDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define ISimpleTypeDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define ISimpleTypeDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define ISimpleTypeDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define ISimpleTypeDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISimpleTypeDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISimpleTypeDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISimpleTypeDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISimpleTypeDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define ISimpleTypeDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISimpleTypeDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISimpleTypeDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISimpleTypeDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define ISimpleTypeDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISimpleTypeDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISimpleTypeDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define ISimpleTypeDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISimpleTypeDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISimpleTypeDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISimpleTypeDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISimpleTypeDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISimpleTypeDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define ISimpleTypeDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define ISimpleTypeDisp_get_XsdType(This,Type)	\
    ( (This)->lpVtbl -> get_XsdType(This,Type) ) 

#define ISimpleTypeDisp_put_XsdType(This,Type)	\
    ( (This)->lpVtbl -> put_XsdType(This,Type) ) 

#define ISimpleTypeDisp_get_ArrayType(This,pfArrayType)	\
    ( (This)->lpVtbl -> get_ArrayType(This,pfArrayType) ) 

#define ISimpleTypeDisp_put_ArrayType(This,fArrayType)	\
    ( (This)->lpVtbl -> put_ArrayType(This,fArrayType) ) 

#define ISimpleTypeDisp_get_Restrictions(This,Collection)	\
    ( (This)->lpVtbl -> get_Restrictions(This,Collection) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISimpleTypeDisp_get_XsdType_Proxy( 
    ISimpleTypeDisp * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB ISimpleTypeDisp_get_XsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISimpleTypeDisp_put_XsdType_Proxy( 
    ISimpleTypeDisp * This,
    /* [in] */ const BSTR Type);


void __RPC_STUB ISimpleTypeDisp_put_XsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISimpleTypeDisp_get_ArrayType_Proxy( 
    ISimpleTypeDisp * This,
    /* [retval][out] */ BOOL *pfArrayType);


void __RPC_STUB ISimpleTypeDisp_get_ArrayType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ISimpleTypeDisp_put_ArrayType_Proxy( 
    ISimpleTypeDisp * This,
    /* [in] */ BOOL fArrayType);


void __RPC_STUB ISimpleTypeDisp_put_ArrayType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ISimpleTypeDisp_get_Restrictions_Proxy( 
    ISimpleTypeDisp * This,
    /* [retval][out] */ IItemCollectionDisp **Collection);


void __RPC_STUB ISimpleTypeDisp_get_Restrictions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISimpleTypeDisp_INTERFACE_DEFINED__ */


#ifndef __ICustomHandlerDisp_INTERFACE_DEFINED__
#define __ICustomHandlerDisp_INTERFACE_DEFINED__

/* interface ICustomHandlerDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ICustomHandlerDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852227-3BA4-11D7-BF56-000874CD1BAE")
    ICustomHandlerDisp : public IMetadataItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_HandlerType( 
            /* [retval][out] */ BSTR *HandlerType) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_HandlerType( 
            /* [in] */ const BSTR HandlerType) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_Source( 
            /* [retval][out] */ BSTR *Source) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Source( 
            /* [in] */ const BSTR Source) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICustomHandlerDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICustomHandlerDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICustomHandlerDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICustomHandlerDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ICustomHandlerDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ICustomHandlerDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ICustomHandlerDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ICustomHandlerDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            ICustomHandlerDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ICustomHandlerDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ICustomHandlerDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            ICustomHandlerDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ICustomHandlerDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ICustomHandlerDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ICustomHandlerDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ICustomHandlerDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ICustomHandlerDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ICustomHandlerDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ICustomHandlerDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ICustomHandlerDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ICustomHandlerDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ICustomHandlerDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ICustomHandlerDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HandlerType )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ BSTR *HandlerType);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HandlerType )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR HandlerType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Source )( 
            ICustomHandlerDisp * This,
            /* [retval][out] */ BSTR *Source);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Source )( 
            ICustomHandlerDisp * This,
            /* [in] */ const BSTR Source);
        
        END_INTERFACE
    } ICustomHandlerDispVtbl;

    interface ICustomHandlerDisp
    {
        CONST_VTBL struct ICustomHandlerDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICustomHandlerDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICustomHandlerDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICustomHandlerDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICustomHandlerDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ICustomHandlerDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ICustomHandlerDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ICustomHandlerDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ICustomHandlerDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ICustomHandlerDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ICustomHandlerDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define ICustomHandlerDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define ICustomHandlerDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ICustomHandlerDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define ICustomHandlerDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define ICustomHandlerDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define ICustomHandlerDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define ICustomHandlerDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define ICustomHandlerDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define ICustomHandlerDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define ICustomHandlerDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ICustomHandlerDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define ICustomHandlerDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define ICustomHandlerDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define ICustomHandlerDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define ICustomHandlerDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define ICustomHandlerDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ICustomHandlerDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ICustomHandlerDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ICustomHandlerDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ICustomHandlerDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define ICustomHandlerDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ICustomHandlerDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ICustomHandlerDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ICustomHandlerDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define ICustomHandlerDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ICustomHandlerDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ICustomHandlerDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define ICustomHandlerDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ICustomHandlerDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ICustomHandlerDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ICustomHandlerDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ICustomHandlerDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ICustomHandlerDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define ICustomHandlerDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define ICustomHandlerDisp_get_HandlerType(This,HandlerType)	\
    ( (This)->lpVtbl -> get_HandlerType(This,HandlerType) ) 

#define ICustomHandlerDisp_put_HandlerType(This,HandlerType)	\
    ( (This)->lpVtbl -> put_HandlerType(This,HandlerType) ) 

#define ICustomHandlerDisp_get_Source(This,Source)	\
    ( (This)->lpVtbl -> get_Source(This,Source) ) 

#define ICustomHandlerDisp_put_Source(This,Source)	\
    ( (This)->lpVtbl -> put_Source(This,Source) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ICustomHandlerDisp_get_HandlerType_Proxy( 
    ICustomHandlerDisp * This,
    /* [retval][out] */ BSTR *HandlerType);


void __RPC_STUB ICustomHandlerDisp_get_HandlerType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ICustomHandlerDisp_put_HandlerType_Proxy( 
    ICustomHandlerDisp * This,
    /* [in] */ const BSTR HandlerType);


void __RPC_STUB ICustomHandlerDisp_put_HandlerType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE ICustomHandlerDisp_get_Source_Proxy( 
    ICustomHandlerDisp * This,
    /* [retval][out] */ BSTR *Source);


void __RPC_STUB ICustomHandlerDisp_get_Source_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE ICustomHandlerDisp_put_Source_Proxy( 
    ICustomHandlerDisp * This,
    /* [in] */ const BSTR Source);


void __RPC_STUB ICustomHandlerDisp_put_Source_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICustomHandlerDisp_INTERFACE_DEFINED__ */


#ifndef __IElementDisp_INTERFACE_DEFINED__
#define __IElementDisp_INTERFACE_DEFINED__

/* interface IElementDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IElementDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852228-3BA4-11D7-BF56-000874CD1BAE")
    IElementDisp : public IMetadataItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XsdType( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XsdType( 
            /* [in] */ const BSTR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TypeDefinition( 
            /* [retval][out] */ IMetadataItemDisp **Type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IElementDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IElementDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IElementDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IElementDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IElementDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IElementDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IElementDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IElementDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IElementDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IElementDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IElementDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IElementDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IElementDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IElementDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IElementDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IElementDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IElementDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IElementDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IElementDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IElementDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IElementDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IElementDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IElementDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IElementDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IElementDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IElementDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IElementDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IElementDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IElementDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IElementDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IElementDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IElementDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IElementDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IElementDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IElementDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IElementDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IElementDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IElementDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IElementDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IElementDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IElementDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IElementDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IElementDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IElementDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IElementDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XsdType )( 
            IElementDisp * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XsdType )( 
            IElementDisp * This,
            /* [in] */ const BSTR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TypeDefinition )( 
            IElementDisp * This,
            /* [retval][out] */ IMetadataItemDisp **Type);
        
        END_INTERFACE
    } IElementDispVtbl;

    interface IElementDisp
    {
        CONST_VTBL struct IElementDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IElementDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IElementDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IElementDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IElementDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IElementDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IElementDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IElementDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IElementDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IElementDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IElementDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IElementDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IElementDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IElementDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IElementDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IElementDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IElementDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IElementDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IElementDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IElementDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IElementDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IElementDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IElementDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IElementDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IElementDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IElementDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IElementDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IElementDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IElementDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IElementDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IElementDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IElementDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IElementDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IElementDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IElementDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IElementDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IElementDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IElementDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IElementDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IElementDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IElementDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IElementDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IElementDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IElementDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IElementDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IElementDisp_get_XsdType(This,Type)	\
    ( (This)->lpVtbl -> get_XsdType(This,Type) ) 

#define IElementDisp_put_XsdType(This,Type)	\
    ( (This)->lpVtbl -> put_XsdType(This,Type) ) 

#define IElementDisp_get_TypeDefinition(This,Type)	\
    ( (This)->lpVtbl -> get_TypeDefinition(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IElementDisp_get_XsdType_Proxy( 
    IElementDisp * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB IElementDisp_get_XsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IElementDisp_put_XsdType_Proxy( 
    IElementDisp * This,
    /* [in] */ const BSTR Type);


void __RPC_STUB IElementDisp_put_XsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IElementDisp_get_TypeDefinition_Proxy( 
    IElementDisp * This,
    /* [retval][out] */ IMetadataItemDisp **Type);


void __RPC_STUB IElementDisp_get_TypeDefinition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IElementDisp_INTERFACE_DEFINED__ */


#ifndef __IVariableDisp_INTERFACE_DEFINED__
#define __IVariableDisp_INTERFACE_DEFINED__

/* interface IVariableDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IVariableDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785223C-3BA4-11D7-BF56-000874CD1BAE")
    IVariableDisp : public IMetadataItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IVariableDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVariableDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVariableDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVariableDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVariableDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVariableDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVariableDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVariableDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IVariableDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IVariableDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IVariableDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IVariableDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IVariableDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IVariableDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IVariableDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IVariableDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IVariableDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IVariableDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IVariableDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IVariableDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IVariableDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IVariableDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IVariableDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IVariableDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IVariableDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IVariableDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IVariableDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IVariableDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IVariableDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IVariableDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IVariableDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IVariableDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IVariableDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IVariableDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IVariableDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IVariableDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IVariableDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IVariableDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IVariableDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IVariableDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IVariableDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IVariableDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IVariableDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IVariableDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IVariableDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IVariableDispVtbl;

    interface IVariableDisp
    {
        CONST_VTBL struct IVariableDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVariableDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IVariableDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IVariableDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IVariableDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IVariableDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IVariableDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IVariableDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IVariableDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IVariableDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IVariableDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IVariableDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IVariableDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IVariableDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IVariableDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IVariableDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IVariableDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IVariableDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IVariableDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IVariableDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IVariableDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IVariableDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IVariableDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IVariableDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IVariableDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IVariableDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IVariableDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IVariableDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IVariableDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IVariableDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IVariableDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IVariableDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IVariableDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IVariableDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IVariableDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IVariableDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IVariableDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IVariableDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IVariableDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IVariableDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IVariableDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IVariableDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IVariableDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IVariableDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IVariableDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IVariableDisp_INTERFACE_DEFINED__ */


#ifndef __IVariableNodeDisp_INTERFACE_DEFINED__
#define __IVariableNodeDisp_INTERFACE_DEFINED__

/* interface IVariableNodeDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IVariableNodeDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785223D-3BA4-11D7-BF56-000874CD1BAE")
    IVariableNodeDisp : public IMetadataItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IVariableNodeDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVariableNodeDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVariableNodeDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVariableNodeDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVariableNodeDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVariableNodeDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVariableNodeDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVariableNodeDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IVariableNodeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IVariableNodeDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IVariableNodeDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IVariableNodeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IVariableNodeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IVariableNodeDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IVariableNodeDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IVariableNodeDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IVariableNodeDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IVariableNodeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IVariableNodeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IVariableNodeDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IVariableNodeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IVariableNodeDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IVariableNodeDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IVariableNodeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IVariableNodeDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IVariableNodeDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IVariableNodeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IVariableNodeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IVariableNodeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IVariableNodeDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IVariableNodeDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IVariableNodeDispVtbl;

    interface IVariableNodeDisp
    {
        CONST_VTBL struct IVariableNodeDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVariableNodeDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IVariableNodeDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IVariableNodeDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IVariableNodeDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IVariableNodeDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IVariableNodeDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IVariableNodeDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IVariableNodeDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IVariableNodeDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IVariableNodeDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IVariableNodeDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IVariableNodeDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IVariableNodeDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IVariableNodeDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IVariableNodeDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IVariableNodeDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IVariableNodeDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IVariableNodeDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IVariableNodeDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IVariableNodeDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IVariableNodeDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IVariableNodeDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IVariableNodeDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IVariableNodeDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IVariableNodeDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IVariableNodeDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IVariableNodeDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IVariableNodeDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IVariableNodeDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IVariableNodeDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IVariableNodeDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IVariableNodeDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IVariableNodeDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IVariableNodeDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IVariableNodeDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IVariableNodeDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IVariableNodeDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IVariableNodeDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IVariableNodeDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IVariableNodeDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IVariableNodeDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IVariableNodeDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IVariableNodeDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IVariableNodeDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IVariableNodeDisp_INTERFACE_DEFINED__ */


#ifndef __ISubstitutionDisp_INTERFACE_DEFINED__
#define __ISubstitutionDisp_INTERFACE_DEFINED__

/* interface ISubstitutionDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ISubstitutionDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852229-3BA4-11D7-BF56-000874CD1BAE")
    ISubstitutionDisp : public IMetadataItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ISubstitutionDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISubstitutionDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISubstitutionDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISubstitutionDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISubstitutionDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISubstitutionDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISubstitutionDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISubstitutionDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ISubstitutionDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            ISubstitutionDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ISubstitutionDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ISubstitutionDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            ISubstitutionDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISubstitutionDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISubstitutionDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISubstitutionDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISubstitutionDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISubstitutionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISubstitutionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISubstitutionDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISubstitutionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISubstitutionDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISubstitutionDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            ISubstitutionDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISubstitutionDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISubstitutionDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISubstitutionDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISubstitutionDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISubstitutionDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISubstitutionDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ISubstitutionDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } ISubstitutionDispVtbl;

    interface ISubstitutionDisp
    {
        CONST_VTBL struct ISubstitutionDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISubstitutionDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISubstitutionDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISubstitutionDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISubstitutionDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISubstitutionDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISubstitutionDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISubstitutionDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISubstitutionDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ISubstitutionDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ISubstitutionDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define ISubstitutionDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define ISubstitutionDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ISubstitutionDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define ISubstitutionDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define ISubstitutionDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define ISubstitutionDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define ISubstitutionDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define ISubstitutionDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define ISubstitutionDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define ISubstitutionDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ISubstitutionDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define ISubstitutionDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define ISubstitutionDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define ISubstitutionDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define ISubstitutionDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define ISubstitutionDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISubstitutionDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISubstitutionDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISubstitutionDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISubstitutionDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define ISubstitutionDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISubstitutionDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISubstitutionDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISubstitutionDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define ISubstitutionDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISubstitutionDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISubstitutionDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define ISubstitutionDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISubstitutionDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISubstitutionDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISubstitutionDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISubstitutionDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISubstitutionDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define ISubstitutionDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISubstitutionDisp_INTERFACE_DEFINED__ */


#ifndef __IExpressionDisp_INTERFACE_DEFINED__
#define __IExpressionDisp_INTERFACE_DEFINED__

/* interface IExpressionDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IExpressionDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785222C-3BA4-11D7-BF56-000874CD1BAE")
    IExpressionDisp : public IMetadataItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IExpressionDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExpressionDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExpressionDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExpressionDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExpressionDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExpressionDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExpressionDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExpressionDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IExpressionDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IExpressionDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IExpressionDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IExpressionDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IExpressionDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IExpressionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IExpressionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IExpressionDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IExpressionDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IExpressionDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IExpressionDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IExpressionDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IExpressionDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IExpressionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IExpressionDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IExpressionDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IExpressionDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IExpressionDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IExpressionDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IExpressionDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IExpressionDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IExpressionDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IExpressionDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IExpressionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IExpressionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IExpressionDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IExpressionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IExpressionDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IExpressionDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IExpressionDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IExpressionDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IExpressionDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IExpressionDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IExpressionDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IExpressionDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IExpressionDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IExpressionDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IExpressionDispVtbl;

    interface IExpressionDisp
    {
        CONST_VTBL struct IExpressionDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExpressionDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IExpressionDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IExpressionDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IExpressionDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IExpressionDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IExpressionDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IExpressionDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IExpressionDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IExpressionDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IExpressionDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IExpressionDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IExpressionDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IExpressionDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IExpressionDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IExpressionDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IExpressionDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IExpressionDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IExpressionDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IExpressionDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IExpressionDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IExpressionDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IExpressionDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IExpressionDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IExpressionDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IExpressionDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IExpressionDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IExpressionDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IExpressionDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IExpressionDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IExpressionDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IExpressionDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IExpressionDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IExpressionDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IExpressionDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IExpressionDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IExpressionDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IExpressionDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IExpressionDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IExpressionDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IExpressionDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IExpressionDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IExpressionDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IExpressionDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IExpressionDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IExpressionDisp_INTERFACE_DEFINED__ */


#ifndef __IMemberElementDisp_INTERFACE_DEFINED__
#define __IMemberElementDisp_INTERFACE_DEFINED__

/* interface IMemberElementDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IMemberElementDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785222A-3BA4-11D7-BF56-000874CD1BAE")
    IMemberElementDisp : public IMetadataItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XsdType( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XsdType( 
            /* [in] */ const BSTR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TypeDefinition( 
            /* [retval][out] */ IMetadataItemDisp **Type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMemberElementDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMemberElementDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMemberElementDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMemberElementDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMemberElementDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMemberElementDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMemberElementDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMemberElementDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMemberElementDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IMemberElementDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IMemberElementDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IMemberElementDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IMemberElementDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IMemberElementDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IMemberElementDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IMemberElementDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IMemberElementDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IMemberElementDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IMemberElementDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IMemberElementDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IMemberElementDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IMemberElementDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IMemberElementDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IMemberElementDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IMemberElementDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IMemberElementDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IMemberElementDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IMemberElementDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IMemberElementDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IMemberElementDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IMemberElementDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IMemberElementDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IMemberElementDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IMemberElementDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IMemberElementDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IMemberElementDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IMemberElementDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IMemberElementDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IMemberElementDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IMemberElementDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IMemberElementDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IMemberElementDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IMemberElementDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IMemberElementDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IMemberElementDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XsdType )( 
            IMemberElementDisp * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XsdType )( 
            IMemberElementDisp * This,
            /* [in] */ const BSTR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TypeDefinition )( 
            IMemberElementDisp * This,
            /* [retval][out] */ IMetadataItemDisp **Type);
        
        END_INTERFACE
    } IMemberElementDispVtbl;

    interface IMemberElementDisp
    {
        CONST_VTBL struct IMemberElementDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMemberElementDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMemberElementDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMemberElementDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMemberElementDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMemberElementDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMemberElementDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMemberElementDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMemberElementDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMemberElementDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IMemberElementDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IMemberElementDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IMemberElementDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IMemberElementDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IMemberElementDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IMemberElementDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IMemberElementDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IMemberElementDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IMemberElementDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IMemberElementDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IMemberElementDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IMemberElementDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IMemberElementDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IMemberElementDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IMemberElementDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IMemberElementDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IMemberElementDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IMemberElementDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IMemberElementDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IMemberElementDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IMemberElementDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IMemberElementDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IMemberElementDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IMemberElementDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IMemberElementDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IMemberElementDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IMemberElementDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IMemberElementDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IMemberElementDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IMemberElementDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IMemberElementDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IMemberElementDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IMemberElementDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IMemberElementDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IMemberElementDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IMemberElementDisp_get_XsdType(This,Type)	\
    ( (This)->lpVtbl -> get_XsdType(This,Type) ) 

#define IMemberElementDisp_put_XsdType(This,Type)	\
    ( (This)->lpVtbl -> put_XsdType(This,Type) ) 

#define IMemberElementDisp_get_TypeDefinition(This,Type)	\
    ( (This)->lpVtbl -> get_TypeDefinition(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMemberElementDisp_get_XsdType_Proxy( 
    IMemberElementDisp * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB IMemberElementDisp_get_XsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IMemberElementDisp_put_XsdType_Proxy( 
    IMemberElementDisp * This,
    /* [in] */ const BSTR Type);


void __RPC_STUB IMemberElementDisp_put_XsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMemberElementDisp_get_TypeDefinition_Proxy( 
    IMemberElementDisp * This,
    /* [retval][out] */ IMetadataItemDisp **Type);


void __RPC_STUB IMemberElementDisp_get_TypeDefinition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMemberElementDisp_INTERFACE_DEFINED__ */


#ifndef __IMemberAttributeDisp_INTERFACE_DEFINED__
#define __IMemberAttributeDisp_INTERFACE_DEFINED__

/* interface IMemberAttributeDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IMemberAttributeDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785222B-3BA4-11D7-BF56-000874CD1BAE")
    IMemberAttributeDisp : public IMetadataItemDisp
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_XsdType( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_XsdType( 
            /* [in] */ const BSTR Type) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_TypeDefinition( 
            /* [retval][out] */ IMetadataItemDisp **Type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMemberAttributeDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IMemberAttributeDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IMemberAttributeDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IMemberAttributeDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IMemberAttributeDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IMemberAttributeDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IMemberAttributeDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMemberAttributeDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IMemberAttributeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IMemberAttributeDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IMemberAttributeDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IMemberAttributeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IMemberAttributeDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IMemberAttributeDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IMemberAttributeDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IMemberAttributeDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IMemberAttributeDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IMemberAttributeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IMemberAttributeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IMemberAttributeDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IMemberAttributeDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IMemberAttributeDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IMemberAttributeDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IMemberAttributeDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IMemberAttributeDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IMemberAttributeDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IMemberAttributeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IMemberAttributeDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IMemberAttributeDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IMemberAttributeDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XsdType )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XsdType )( 
            IMemberAttributeDisp * This,
            /* [in] */ const BSTR Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TypeDefinition )( 
            IMemberAttributeDisp * This,
            /* [retval][out] */ IMetadataItemDisp **Type);
        
        END_INTERFACE
    } IMemberAttributeDispVtbl;

    interface IMemberAttributeDisp
    {
        CONST_VTBL struct IMemberAttributeDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMemberAttributeDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMemberAttributeDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMemberAttributeDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMemberAttributeDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMemberAttributeDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMemberAttributeDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMemberAttributeDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMemberAttributeDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IMemberAttributeDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IMemberAttributeDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IMemberAttributeDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IMemberAttributeDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IMemberAttributeDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IMemberAttributeDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IMemberAttributeDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IMemberAttributeDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IMemberAttributeDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IMemberAttributeDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IMemberAttributeDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IMemberAttributeDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IMemberAttributeDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IMemberAttributeDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IMemberAttributeDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IMemberAttributeDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IMemberAttributeDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IMemberAttributeDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IMemberAttributeDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IMemberAttributeDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IMemberAttributeDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IMemberAttributeDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IMemberAttributeDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IMemberAttributeDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IMemberAttributeDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IMemberAttributeDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IMemberAttributeDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IMemberAttributeDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IMemberAttributeDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IMemberAttributeDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IMemberAttributeDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IMemberAttributeDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IMemberAttributeDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IMemberAttributeDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IMemberAttributeDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IMemberAttributeDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#define IMemberAttributeDisp_get_XsdType(This,Type)	\
    ( (This)->lpVtbl -> get_XsdType(This,Type) ) 

#define IMemberAttributeDisp_put_XsdType(This,Type)	\
    ( (This)->lpVtbl -> put_XsdType(This,Type) ) 

#define IMemberAttributeDisp_get_TypeDefinition(This,Type)	\
    ( (This)->lpVtbl -> get_TypeDefinition(This,Type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMemberAttributeDisp_get_XsdType_Proxy( 
    IMemberAttributeDisp * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB IMemberAttributeDisp_get_XsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE IMemberAttributeDisp_put_XsdType_Proxy( 
    IMemberAttributeDisp * This,
    /* [in] */ const BSTR Type);


void __RPC_STUB IMemberAttributeDisp_put_XsdType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE IMemberAttributeDisp_get_TypeDefinition_Proxy( 
    IMemberAttributeDisp * This,
    /* [retval][out] */ IMetadataItemDisp **Type);


void __RPC_STUB IMemberAttributeDisp_get_TypeDefinition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMemberAttributeDisp_INTERFACE_DEFINED__ */


#ifndef __IRefactoredSettingDisp_INTERFACE_DEFINED__
#define __IRefactoredSettingDisp_INTERFACE_DEFINED__

/* interface IRefactoredSettingDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IRefactoredSettingDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852236-3BA4-11D7-BF56-000874CD1BAE")
    IRefactoredSettingDisp : public IMetadataItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IRefactoredSettingDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRefactoredSettingDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRefactoredSettingDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRefactoredSettingDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRefactoredSettingDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRefactoredSettingDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRefactoredSettingDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRefactoredSettingDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IRefactoredSettingDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IRefactoredSettingDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IRefactoredSettingDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IRefactoredSettingDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IRefactoredSettingDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IRefactoredSettingDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IRefactoredSettingDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IRefactoredSettingDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IRefactoredSettingDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IRefactoredSettingDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IRefactoredSettingDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IRefactoredSettingDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IRefactoredSettingDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IRefactoredSettingDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IRefactoredSettingDispVtbl;

    interface IRefactoredSettingDisp
    {
        CONST_VTBL struct IRefactoredSettingDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRefactoredSettingDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRefactoredSettingDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRefactoredSettingDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRefactoredSettingDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRefactoredSettingDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRefactoredSettingDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRefactoredSettingDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRefactoredSettingDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IRefactoredSettingDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IRefactoredSettingDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IRefactoredSettingDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IRefactoredSettingDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IRefactoredSettingDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IRefactoredSettingDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IRefactoredSettingDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IRefactoredSettingDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IRefactoredSettingDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IRefactoredSettingDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IRefactoredSettingDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IRefactoredSettingDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IRefactoredSettingDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IRefactoredSettingDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IRefactoredSettingDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IRefactoredSettingDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IRefactoredSettingDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IRefactoredSettingDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IRefactoredSettingDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IRefactoredSettingDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IRefactoredSettingDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IRefactoredSettingDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IRefactoredSettingDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IRefactoredSettingDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IRefactoredSettingDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IRefactoredSettingDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IRefactoredSettingDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IRefactoredSettingDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IRefactoredSettingDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IRefactoredSettingDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IRefactoredSettingDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IRefactoredSettingDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IRefactoredSettingDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IRefactoredSettingDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IRefactoredSettingDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IRefactoredSettingDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRefactoredSettingDisp_INTERFACE_DEFINED__ */


#ifndef __IValueSetDisp_INTERFACE_DEFINED__
#define __IValueSetDisp_INTERFACE_DEFINED__

/* interface IValueSetDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IValueSetDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852237-3BA4-11D7-BF56-000874CD1BAE")
    IValueSetDisp : public IMetadataItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IValueSetDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IValueSetDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IValueSetDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IValueSetDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IValueSetDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IValueSetDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IValueSetDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IValueSetDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IValueSetDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IValueSetDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IValueSetDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IValueSetDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IValueSetDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IValueSetDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IValueSetDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IValueSetDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IValueSetDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IValueSetDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IValueSetDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IValueSetDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IValueSetDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IValueSetDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IValueSetDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IValueSetDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IValueSetDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IValueSetDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IValueSetDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IValueSetDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IValueSetDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IValueSetDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IValueSetDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IValueSetDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IValueSetDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IValueSetDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IValueSetDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IValueSetDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IValueSetDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IValueSetDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IValueSetDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IValueSetDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IValueSetDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IValueSetDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IValueSetDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IValueSetDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IValueSetDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IValueSetDispVtbl;

    interface IValueSetDisp
    {
        CONST_VTBL struct IValueSetDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IValueSetDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IValueSetDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IValueSetDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IValueSetDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IValueSetDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IValueSetDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IValueSetDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IValueSetDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IValueSetDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IValueSetDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IValueSetDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IValueSetDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IValueSetDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IValueSetDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IValueSetDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IValueSetDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IValueSetDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IValueSetDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IValueSetDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IValueSetDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IValueSetDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IValueSetDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IValueSetDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IValueSetDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IValueSetDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IValueSetDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IValueSetDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IValueSetDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IValueSetDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IValueSetDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IValueSetDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IValueSetDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IValueSetDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IValueSetDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IValueSetDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IValueSetDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IValueSetDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IValueSetDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IValueSetDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IValueSetDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IValueSetDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IValueSetDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IValueSetDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IValueSetDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IValueSetDisp_INTERFACE_DEFINED__ */


#ifndef __IControlledSettingDisp_INTERFACE_DEFINED__
#define __IControlledSettingDisp_INTERFACE_DEFINED__

/* interface IControlledSettingDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IControlledSettingDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852238-3BA4-11D7-BF56-000874CD1BAE")
    IControlledSettingDisp : public IMetadataItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IControlledSettingDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IControlledSettingDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IControlledSettingDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IControlledSettingDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IControlledSettingDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IControlledSettingDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IControlledSettingDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IControlledSettingDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IControlledSettingDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IControlledSettingDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IControlledSettingDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IControlledSettingDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IControlledSettingDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IControlledSettingDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IControlledSettingDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IControlledSettingDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IControlledSettingDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IControlledSettingDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IControlledSettingDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IControlledSettingDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IControlledSettingDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IControlledSettingDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IControlledSettingDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IControlledSettingDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IControlledSettingDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IControlledSettingDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IControlledSettingDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IControlledSettingDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IControlledSettingDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IControlledSettingDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IControlledSettingDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } IControlledSettingDispVtbl;

    interface IControlledSettingDisp
    {
        CONST_VTBL struct IControlledSettingDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IControlledSettingDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IControlledSettingDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IControlledSettingDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IControlledSettingDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IControlledSettingDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IControlledSettingDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IControlledSettingDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IControlledSettingDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IControlledSettingDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IControlledSettingDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IControlledSettingDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IControlledSettingDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IControlledSettingDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IControlledSettingDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IControlledSettingDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IControlledSettingDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IControlledSettingDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IControlledSettingDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IControlledSettingDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IControlledSettingDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IControlledSettingDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IControlledSettingDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IControlledSettingDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IControlledSettingDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IControlledSettingDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IControlledSettingDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IControlledSettingDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IControlledSettingDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IControlledSettingDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IControlledSettingDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IControlledSettingDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IControlledSettingDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IControlledSettingDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IControlledSettingDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IControlledSettingDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IControlledSettingDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IControlledSettingDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IControlledSettingDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IControlledSettingDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IControlledSettingDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IControlledSettingDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IControlledSettingDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IControlledSettingDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define IControlledSettingDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IControlledSettingDisp_INTERFACE_DEFINED__ */


#ifndef __ITransactionsItemDisp_INTERFACE_DEFINED__
#define __ITransactionsItemDisp_INTERFACE_DEFINED__

/* interface ITransactionsItemDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ITransactionsItemDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7852239-3BA4-11D7-BF56-000874CD1BAE")
    ITransactionsItemDisp : public IBaseItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ITransactionsItemDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITransactionsItemDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITransactionsItemDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITransactionsItemDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ITransactionsItemDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ITransactionsItemDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ITransactionsItemDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ITransactionsItemDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ITransactionsItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            ITransactionsItemDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ITransactionsItemDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ITransactionsItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            ITransactionsItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ITransactionsItemDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ITransactionsItemDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ITransactionsItemDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ITransactionsItemDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ITransactionsItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ITransactionsItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ITransactionsItemDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ITransactionsItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ITransactionsItemDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ITransactionsItemDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            ITransactionsItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ITransactionsItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ITransactionsItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ITransactionsItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ITransactionsItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ITransactionsItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ITransactionsItemDisp * This,
            /* [in] */ const BSTR Path);
        
        END_INTERFACE
    } ITransactionsItemDispVtbl;

    interface ITransactionsItemDisp
    {
        CONST_VTBL struct ITransactionsItemDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITransactionsItemDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITransactionsItemDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITransactionsItemDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITransactionsItemDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ITransactionsItemDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ITransactionsItemDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ITransactionsItemDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ITransactionsItemDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ITransactionsItemDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ITransactionsItemDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define ITransactionsItemDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define ITransactionsItemDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ITransactionsItemDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define ITransactionsItemDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define ITransactionsItemDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define ITransactionsItemDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define ITransactionsItemDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define ITransactionsItemDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define ITransactionsItemDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define ITransactionsItemDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ITransactionsItemDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define ITransactionsItemDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define ITransactionsItemDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define ITransactionsItemDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define ITransactionsItemDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define ITransactionsItemDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ITransactionsItemDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ITransactionsItemDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ITransactionsItemDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ITransactionsItemDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define ITransactionsItemDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ITransactionsItemDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ITransactionsItemDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ITransactionsItemDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define ITransactionsItemDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ITransactionsItemDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ITransactionsItemDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define ITransactionsItemDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ITransactionsItemDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ITransactionsItemDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ITransactionsItemDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ITransactionsItemDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ITransactionsItemDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITransactionsItemDisp_INTERFACE_DEFINED__ */


#ifndef __IChangeRecordItemDisp_INTERFACE_DEFINED__
#define __IChangeRecordItemDisp_INTERFACE_DEFINED__

/* interface IChangeRecordItemDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_IChangeRecordItemDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785223A-3BA4-11D7-BF56-000874CD1BAE")
    IChangeRecordItemDisp : public IBaseItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IChangeRecordItemDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IChangeRecordItemDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IChangeRecordItemDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IChangeRecordItemDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IChangeRecordItemDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IChangeRecordItemDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IChangeRecordItemDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IChangeRecordItemDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            IChangeRecordItemDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IChangeRecordItemDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            IChangeRecordItemDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            IChangeRecordItemDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IChangeRecordItemDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            IChangeRecordItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            IChangeRecordItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            IChangeRecordItemDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            IChangeRecordItemDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            IChangeRecordItemDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            IChangeRecordItemDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            IChangeRecordItemDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            IChangeRecordItemDisp * This,
            /* [in] */ const BSTR Path);
        
        END_INTERFACE
    } IChangeRecordItemDispVtbl;

    interface IChangeRecordItemDisp
    {
        CONST_VTBL struct IChangeRecordItemDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IChangeRecordItemDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IChangeRecordItemDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IChangeRecordItemDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IChangeRecordItemDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IChangeRecordItemDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IChangeRecordItemDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IChangeRecordItemDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IChangeRecordItemDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define IChangeRecordItemDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define IChangeRecordItemDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define IChangeRecordItemDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define IChangeRecordItemDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define IChangeRecordItemDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define IChangeRecordItemDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define IChangeRecordItemDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define IChangeRecordItemDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define IChangeRecordItemDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define IChangeRecordItemDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define IChangeRecordItemDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define IChangeRecordItemDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define IChangeRecordItemDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define IChangeRecordItemDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define IChangeRecordItemDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define IChangeRecordItemDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define IChangeRecordItemDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define IChangeRecordItemDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define IChangeRecordItemDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define IChangeRecordItemDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define IChangeRecordItemDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define IChangeRecordItemDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define IChangeRecordItemDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define IChangeRecordItemDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define IChangeRecordItemDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define IChangeRecordItemDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define IChangeRecordItemDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define IChangeRecordItemDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define IChangeRecordItemDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define IChangeRecordItemDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define IChangeRecordItemDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define IChangeRecordItemDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define IChangeRecordItemDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define IChangeRecordItemDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define IChangeRecordItemDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IChangeRecordItemDisp_INTERFACE_DEFINED__ */


#ifndef __ISecurityDefinitionDisp_INTERFACE_DEFINED__
#define __ISecurityDefinitionDisp_INTERFACE_DEFINED__

/* interface ISecurityDefinitionDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_ISecurityDefinitionDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785223B-3BA4-11D7-BF56-000874CD1BAE")
    ISecurityDefinitionDisp : public IMetadataItemDisp
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ISecurityDefinitionDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISecurityDefinitionDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISecurityDefinitionDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISecurityDefinitionDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ BSTR *Path);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ LONG *Type);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *ReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *Dirty);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ WcmNodeType *NodeType);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ BSTR *DisplayName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayName )( 
            ISecurityDefinitionDisp * This,
            /* [string][in] */ const BSTR DisplayName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ BSTR *Description);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            ISecurityDefinitionDisp * This,
            /* [string][in] */ const BSTR Description);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ IBaseItemDisp **Parent);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChild )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ VARIANT_BOOL *HasChild);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultValue )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultValue )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValueByOptions )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ WcmProcessingOptions Options,
            /* [out] */ WcmValueStatus *Status,
            /* [out] */ FILETIME *Timestamp,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValueByOptions )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const VARIANT *Value,
            /* [in] */ WcmProcessingOptions Options,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteValue )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ FILETIME Timestamp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ WcmResetOption Option);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Children);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddChild )( 
            ISecurityDefinitionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetChild )( 
            ISecurityDefinitionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            ISecurityDefinitionDisp * This,
            /* [string][in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertChild )( 
            ISecurityDefinitionDisp * This,
            /* [string][in] */ const BSTR Name,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position,
            /* [retval][out] */ IBaseItemDisp **Child);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *MoveChild )( 
            ISecurityDefinitionDisp * This,
            /* [string][in] */ const BSTR Key,
            /* [string][in] */ const BSTR Target,
            /* [in] */ BOOL Position);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CompareChildOrder )( 
            ISecurityDefinitionDisp * This,
            /* [string][in] */ const BSTR Item1,
            /* [string][in] */ const BSTR Item2,
            /* [retval][out] */ LONG *Position);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            ISecurityDefinitionDisp * This,
            /* [retval][out] */ IItemCollectionDisp **Attributes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const BSTR Name,
            /* [in] */ const VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const BSTR Name,
            /* [retval][out] */ VARIANT *Value);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const BSTR Name);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetItemByPath )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItemByPath )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const BSTR Path,
            /* [retval][out] */ IBaseItemDisp **Item);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItemByPath )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ const BSTR Path);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            ISecurityDefinitionDisp * This,
            /* [in] */ WcmValidateOption Option,
            /* [retval][out] */ VARIANT *ppResult);
        
        END_INTERFACE
    } ISecurityDefinitionDispVtbl;

    interface ISecurityDefinitionDisp
    {
        CONST_VTBL struct ISecurityDefinitionDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISecurityDefinitionDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISecurityDefinitionDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISecurityDefinitionDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISecurityDefinitionDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISecurityDefinitionDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISecurityDefinitionDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISecurityDefinitionDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISecurityDefinitionDisp_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define ISecurityDefinitionDisp_put_Name(This,Name)	\
    ( (This)->lpVtbl -> put_Name(This,Name) ) 

#define ISecurityDefinitionDisp_get_Path(This,Path)	\
    ( (This)->lpVtbl -> get_Path(This,Path) ) 

#define ISecurityDefinitionDisp_get_FullPath(This,Path)	\
    ( (This)->lpVtbl -> get_FullPath(This,Path) ) 

#define ISecurityDefinitionDisp_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define ISecurityDefinitionDisp_get_IsReadOnly(This,ReadOnly)	\
    ( (This)->lpVtbl -> get_IsReadOnly(This,ReadOnly) ) 

#define ISecurityDefinitionDisp_get_IsDirty(This,Dirty)	\
    ( (This)->lpVtbl -> get_IsDirty(This,Dirty) ) 

#define ISecurityDefinitionDisp_get_NodeType(This,NodeType)	\
    ( (This)->lpVtbl -> get_NodeType(This,NodeType) ) 

#define ISecurityDefinitionDisp_get_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> get_DisplayName(This,DisplayName) ) 

#define ISecurityDefinitionDisp_put_DisplayName(This,DisplayName)	\
    ( (This)->lpVtbl -> put_DisplayName(This,DisplayName) ) 

#define ISecurityDefinitionDisp_get_Description(This,Description)	\
    ( (This)->lpVtbl -> get_Description(This,Description) ) 

#define ISecurityDefinitionDisp_put_Description(This,Description)	\
    ( (This)->lpVtbl -> put_Description(This,Description) ) 

#define ISecurityDefinitionDisp_get_Parent(This,Parent)	\
    ( (This)->lpVtbl -> get_Parent(This,Parent) ) 

#define ISecurityDefinitionDisp_get_HasChild(This,HasChild)	\
    ( (This)->lpVtbl -> get_HasChild(This,HasChild) ) 

#define ISecurityDefinitionDisp_get_Value(This,Value)	\
    ( (This)->lpVtbl -> get_Value(This,Value) ) 

#define ISecurityDefinitionDisp_put_Value(This,Value)	\
    ( (This)->lpVtbl -> put_Value(This,Value) ) 

#define ISecurityDefinitionDisp_get_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> get_DefaultValue(This,Value) ) 

#define ISecurityDefinitionDisp_put_DefaultValue(This,Value)	\
    ( (This)->lpVtbl -> put_DefaultValue(This,Value) ) 

#define ISecurityDefinitionDisp_GetValueByOptions(This,Options,Status,Timestamp,Value)	\
    ( (This)->lpVtbl -> GetValueByOptions(This,Options,Status,Timestamp,Value) ) 

#define ISecurityDefinitionDisp_SetValueByOptions(This,Value,Options,Timestamp)	\
    ( (This)->lpVtbl -> SetValueByOptions(This,Value,Options,Timestamp) ) 

#define ISecurityDefinitionDisp_DeleteValue(This,Timestamp)	\
    ( (This)->lpVtbl -> DeleteValue(This,Timestamp) ) 

#define ISecurityDefinitionDisp_Reset(This,Option)	\
    ( (This)->lpVtbl -> Reset(This,Option) ) 

#define ISecurityDefinitionDisp_get_Children(This,Children)	\
    ( (This)->lpVtbl -> get_Children(This,Children) ) 

#define ISecurityDefinitionDisp_AddChild(This,Name,Child)	\
    ( (This)->lpVtbl -> AddChild(This,Name,Child) ) 

#define ISecurityDefinitionDisp_GetChild(This,Name,Child)	\
    ( (This)->lpVtbl -> GetChild(This,Name,Child) ) 

#define ISecurityDefinitionDisp_RemoveChild(This,Name)	\
    ( (This)->lpVtbl -> RemoveChild(This,Name) ) 

#define ISecurityDefinitionDisp_InsertChild(This,Name,Target,Position,Child)	\
    ( (This)->lpVtbl -> InsertChild(This,Name,Target,Position,Child) ) 

#define ISecurityDefinitionDisp_MoveChild(This,Key,Target,Position)	\
    ( (This)->lpVtbl -> MoveChild(This,Key,Target,Position) ) 

#define ISecurityDefinitionDisp_CompareChildOrder(This,Item1,Item2,Position)	\
    ( (This)->lpVtbl -> CompareChildOrder(This,Item1,Item2,Position) ) 

#define ISecurityDefinitionDisp_get_Attributes(This,Attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,Attributes) ) 

#define ISecurityDefinitionDisp_AddAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> AddAttribute(This,Name,Value) ) 

#define ISecurityDefinitionDisp_GetAttribute(This,Name,Value)	\
    ( (This)->lpVtbl -> GetAttribute(This,Name,Value) ) 

#define ISecurityDefinitionDisp_RemoveAttribute(This,Name)	\
    ( (This)->lpVtbl -> RemoveAttribute(This,Name) ) 

#define ISecurityDefinitionDisp_GetItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> GetItemByPath(This,Path,Item) ) 

#define ISecurityDefinitionDisp_CreateItemByPath(This,Path,Item)	\
    ( (This)->lpVtbl -> CreateItemByPath(This,Path,Item) ) 

#define ISecurityDefinitionDisp_RemoveItemByPath(This,Path)	\
    ( (This)->lpVtbl -> RemoveItemByPath(This,Path) ) 


#define ISecurityDefinitionDisp_Validate(This,Option,ppResult)	\
    ( (This)->lpVtbl -> Validate(This,Option,ppResult) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISecurityDefinitionDisp_INTERFACE_DEFINED__ */


#ifndef __IItemNotify_INTERFACE_DEFINED__
#define __IItemNotify_INTERFACE_DEFINED__

/* interface IItemNotify */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IItemNotify;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C738-3BA4-11D7-BF56-000874CD1BAE")
    IItemNotify : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE NamespaceChanged( 
            /* [in] */ IItemChangeEnumerator *ChangeEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemNotify * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemNotify * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *NamespaceChanged )( 
            IItemNotify * This,
            /* [in] */ IItemChangeEnumerator *ChangeEnum);
        
        END_INTERFACE
    } IItemNotifyVtbl;

    interface IItemNotify
    {
        CONST_VTBL struct IItemNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemNotify_NamespaceChanged(This,ChangeEnum)	\
    ( (This)->lpVtbl -> NamespaceChanged(This,ChangeEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemNotify_NamespaceChanged_Proxy( 
    IItemNotify * This,
    /* [in] */ IItemChangeEnumerator *ChangeEnum);


void __RPC_STUB IItemNotify_NamespaceChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemNotify_INTERFACE_DEFINED__ */


#ifndef __IItemChangeEnumerator_INTERFACE_DEFINED__
#define __IItemChangeEnumerator_INTERFACE_DEFINED__

/* interface IItemChangeEnumerator */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IItemChangeEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C739-3BA4-11D7-BF56-000874CD1BAE")
    IItemChangeEnumerator : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Current( 
            /* [retval][out] */ IItemChange **Change) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE MoveNext( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemChangeEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemChangeEnumerator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemChangeEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemChangeEnumerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Current )( 
            IItemChangeEnumerator * This,
            /* [retval][out] */ IItemChange **Change);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            IItemChangeEnumerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IItemChangeEnumerator * This);
        
        END_INTERFACE
    } IItemChangeEnumeratorVtbl;

    interface IItemChangeEnumerator
    {
        CONST_VTBL struct IItemChangeEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemChangeEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemChangeEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemChangeEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemChangeEnumerator_Current(This,Change)	\
    ( (This)->lpVtbl -> Current(This,Change) ) 

#define IItemChangeEnumerator_MoveNext(This)	\
    ( (This)->lpVtbl -> MoveNext(This) ) 

#define IItemChangeEnumerator_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemChangeEnumerator_Current_Proxy( 
    IItemChangeEnumerator * This,
    /* [retval][out] */ IItemChange **Change);


void __RPC_STUB IItemChangeEnumerator_Current_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemChangeEnumerator_MoveNext_Proxy( 
    IItemChangeEnumerator * This);


void __RPC_STUB IItemChangeEnumerator_MoveNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemChangeEnumerator_Reset_Proxy( 
    IItemChangeEnumerator * This);


void __RPC_STUB IItemChangeEnumerator_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemChangeEnumerator_INTERFACE_DEFINED__ */


#ifndef __IItemChange_INTERFACE_DEFINED__
#define __IItemChange_INTERFACE_DEFINED__

/* interface IItemChange */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_IItemChange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C73A-3BA4-11D7-BF56-000874CD1BAE")
    IItemChange : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetSetting( 
            /* [out] */ BSTR *Setting,
            /* [out] */ VARIANT *Value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IItemChangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IItemChange * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IItemChange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IItemChange * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetSetting )( 
            IItemChange * This,
            /* [out] */ BSTR *Setting,
            /* [out] */ VARIANT *Value);
        
        END_INTERFACE
    } IItemChangeVtbl;

    interface IItemChange
    {
        CONST_VTBL struct IItemChangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IItemChange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IItemChange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IItemChange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IItemChange_GetSetting(This,Setting,Value)	\
    ( (This)->lpVtbl -> GetSetting(This,Setting,Value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IItemChange_GetSetting_Proxy( 
    IItemChange * This,
    /* [out] */ BSTR *Setting,
    /* [out] */ VARIANT *Value);


void __RPC_STUB IItemChange_GetSetting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IItemChange_INTERFACE_DEFINED__ */


#ifndef __INamespaceGroupEnumerator_INTERFACE_DEFINED__
#define __INamespaceGroupEnumerator_INTERFACE_DEFINED__

/* interface INamespaceGroupEnumerator */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_INamespaceGroupEnumerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C744-3BA4-11D7-BF56-000874CD1BAE")
    INamespaceGroupEnumerator : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Current( 
            /* [retval][out] */ ISettingsNamespace **Namespace) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE MoveNext( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INamespaceGroupEnumeratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INamespaceGroupEnumerator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INamespaceGroupEnumerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INamespaceGroupEnumerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Current )( 
            INamespaceGroupEnumerator * This,
            /* [retval][out] */ ISettingsNamespace **Namespace);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
            INamespaceGroupEnumerator * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            INamespaceGroupEnumerator * This);
        
        END_INTERFACE
    } INamespaceGroupEnumeratorVtbl;

    interface INamespaceGroupEnumerator
    {
        CONST_VTBL struct INamespaceGroupEnumeratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INamespaceGroupEnumerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INamespaceGroupEnumerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INamespaceGroupEnumerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INamespaceGroupEnumerator_Current(This,Namespace)	\
    ( (This)->lpVtbl -> Current(This,Namespace) ) 

#define INamespaceGroupEnumerator_MoveNext(This)	\
    ( (This)->lpVtbl -> MoveNext(This) ) 

#define INamespaceGroupEnumerator_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroupEnumerator_Current_Proxy( 
    INamespaceGroupEnumerator * This,
    /* [retval][out] */ ISettingsNamespace **Namespace);


void __RPC_STUB INamespaceGroupEnumerator_Current_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroupEnumerator_MoveNext_Proxy( 
    INamespaceGroupEnumerator * This);


void __RPC_STUB INamespaceGroupEnumerator_MoveNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroupEnumerator_Reset_Proxy( 
    INamespaceGroupEnumerator * This);


void __RPC_STUB INamespaceGroupEnumerator_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INamespaceGroupEnumerator_INTERFACE_DEFINED__ */


#ifndef __INamespaceGroup_INTERFACE_DEFINED__
#define __INamespaceGroup_INTERFACE_DEFINED__

/* interface INamespaceGroup */
/* [helpstring][uuid][unique][nonextensible][object] */ 


EXTERN_C const IID IID_INamespaceGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9524C71C-3BA4-11D7-BF56-000874CD1BAE")
    INamespaceGroup : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AddNamespace( 
            /* [in] */ ISettingsNamespace *Namespace) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNamespace( 
            /* [in] */ INamespaceIdentity *Identity,
            /* [out] */ ISettingsNamespace **Namespace) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Count( 
            /* [out] */ LONG *Count) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [string][in] */ const WCHAR *Message) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetEnumerator( 
            /* [out] */ INamespaceGroupEnumerator **Enumerator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INamespaceGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INamespaceGroup * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INamespaceGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INamespaceGroup * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            INamespaceGroup * This,
            /* [in] */ ISettingsNamespace *Namespace);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNamespace )( 
            INamespaceGroup * This,
            /* [in] */ INamespaceIdentity *Identity,
            /* [out] */ ISettingsNamespace **Namespace);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            INamespaceGroup * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Count )( 
            INamespaceGroup * This,
            /* [out] */ LONG *Count);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            INamespaceGroup * This,
            /* [string][in] */ const WCHAR *Message);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
            INamespaceGroup * This,
            /* [out] */ INamespaceGroupEnumerator **Enumerator);
        
        END_INTERFACE
    } INamespaceGroupVtbl;

    interface INamespaceGroup
    {
        CONST_VTBL struct INamespaceGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INamespaceGroup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INamespaceGroup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INamespaceGroup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INamespaceGroup_AddNamespace(This,Namespace)	\
    ( (This)->lpVtbl -> AddNamespace(This,Namespace) ) 

#define INamespaceGroup_GetNamespace(This,Identity,Namespace)	\
    ( (This)->lpVtbl -> GetNamespace(This,Identity,Namespace) ) 

#define INamespaceGroup_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define INamespaceGroup_Count(This,Count)	\
    ( (This)->lpVtbl -> Count(This,Count) ) 

#define INamespaceGroup_Save(This,Message)	\
    ( (This)->lpVtbl -> Save(This,Message) ) 

#define INamespaceGroup_GetEnumerator(This,Enumerator)	\
    ( (This)->lpVtbl -> GetEnumerator(This,Enumerator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroup_AddNamespace_Proxy( 
    INamespaceGroup * This,
    /* [in] */ ISettingsNamespace *Namespace);


void __RPC_STUB INamespaceGroup_AddNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroup_GetNamespace_Proxy( 
    INamespaceGroup * This,
    /* [in] */ INamespaceIdentity *Identity,
    /* [out] */ ISettingsNamespace **Namespace);


void __RPC_STUB INamespaceGroup_GetNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroup_Clear_Proxy( 
    INamespaceGroup * This);


void __RPC_STUB INamespaceGroup_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroup_Count_Proxy( 
    INamespaceGroup * This,
    /* [out] */ LONG *Count);


void __RPC_STUB INamespaceGroup_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroup_Save_Proxy( 
    INamespaceGroup * This,
    /* [string][in] */ const WCHAR *Message);


void __RPC_STUB INamespaceGroup_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE INamespaceGroup_GetEnumerator_Proxy( 
    INamespaceGroup * This,
    /* [out] */ INamespaceGroupEnumerator **Enumerator);


void __RPC_STUB INamespaceGroup_GetEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INamespaceGroup_INTERFACE_DEFINED__ */


#ifndef __INamespaceGroupDisp_INTERFACE_DEFINED__
#define __INamespaceGroupDisp_INTERFACE_DEFINED__

/* interface INamespaceGroupDisp */
/* [helpstring][uuid][unique][nonextensible][oleautomation][object] */ 


EXTERN_C const IID IID_INamespaceGroupDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B785221C-3BA4-11D7-BF56-000874CD1BAE")
    INamespaceGroupDisp : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNamespace( 
            /* [in] */ ISettingsNamespace *Namespace) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_GetNamespace( 
            /* [in] */ INamespaceIdentity *Identity,
            /* [retval][out] */ ISettingsNamespace **Namespace) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Count( 
            /* [retval][out] */ LONG *Count) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [string][in] */ const WCHAR *Message) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INamespaceGroupDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INamespaceGroupDisp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INamespaceGroupDisp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INamespaceGroupDisp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            INamespaceGroupDisp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            INamespaceGroupDisp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            INamespaceGroupDisp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            INamespaceGroupDisp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            INamespaceGroupDisp * This,
            /* [in] */ ISettingsNamespace *Namespace);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GetNamespace )( 
            INamespaceGroupDisp * This,
            /* [in] */ INamespaceIdentity *Identity,
            /* [retval][out] */ ISettingsNamespace **Namespace);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            INamespaceGroupDisp * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Count )( 
            INamespaceGroupDisp * This,
            /* [retval][out] */ LONG *Count);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            INamespaceGroupDisp * This,
            /* [string][in] */ const WCHAR *Message);
        
        END_INTERFACE
    } INamespaceGroupDispVtbl;

    interface INamespaceGroupDisp
    {
        CONST_VTBL struct INamespaceGroupDispVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INamespaceGroupDisp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INamespaceGroupDisp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INamespaceGroupDisp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INamespaceGroupDisp_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define INamespaceGroupDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define INamespaceGroupDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define INamespaceGroupDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define INamespaceGroupDisp_AddNamespace(This,Namespace)	\
    ( (This)->lpVtbl -> AddNamespace(This,Namespace) ) 

#define INamespaceGroupDisp_get_GetNamespace(This,Identity,Namespace)	\
    ( (This)->lpVtbl -> get_GetNamespace(This,Identity,Namespace) ) 

#define INamespaceGroupDisp_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define INamespaceGroupDisp_Count(This,Count)	\
    ( (This)->lpVtbl -> Count(This,Count) ) 

#define INamespaceGroupDisp_Save(This,Message)	\
    ( (This)->lpVtbl -> Save(This,Message) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE INamespaceGroupDisp_AddNamespace_Proxy( 
    INamespaceGroupDisp * This,
    /* [in] */ ISettingsNamespace *Namespace);


void __RPC_STUB INamespaceGroupDisp_AddNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE INamespaceGroupDisp_get_GetNamespace_Proxy( 
    INamespaceGroupDisp * This,
    /* [in] */ INamespaceIdentity *Identity,
    /* [retval][out] */ ISettingsNamespace **Namespace);


void __RPC_STUB INamespaceGroupDisp_get_GetNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE INamespaceGroupDisp_Clear_Proxy( 
    INamespaceGroupDisp * This);


void __RPC_STUB INamespaceGroupDisp_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE INamespaceGroupDisp_Count_Proxy( 
    INamespaceGroupDisp * This,
    /* [retval][out] */ LONG *Count);


void __RPC_STUB INamespaceGroupDisp_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE INamespaceGroupDisp_Save_Proxy( 
    INamespaceGroupDisp * This,
    /* [string][in] */ const WCHAR *Message);


void __RPC_STUB INamespaceGroupDisp_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INamespaceGroupDisp_INTERFACE_DEFINED__ */



#ifndef __Wcm_LIBRARY_DEFINED__
#define __Wcm_LIBRARY_DEFINED__

/* library Wcm */
/* [version][lcid][helpstring][helpfile][uuid] */ 


EXTERN_C const IID LIBID_Wcm;

EXTERN_C const CLSID CLSID_SettingsEngine;

#ifdef __cplusplus

class DECLSPEC_UUID("9524C712-3BA4-11D7-BF56-000874CD1BAE")
SettingsEngine;
#endif

EXTERN_C const CLSID CLSID_AdvancedSettingsEngine;

#ifdef __cplusplus

class DECLSPEC_UUID("AE578BC1-3BA4-11D7-BF56-000874CD1BAE")
AdvancedSettingsEngine;
#endif

EXTERN_C const CLSID CLSID_SettingsEngineDisp;

#ifdef __cplusplus

class DECLSPEC_UUID("B7852212-3BA4-11D7-BF56-000874CD1BAE")
SettingsEngineDisp;
#endif

EXTERN_C const CLSID CLSID_AdvancedSettingsEngineDisp;

#ifdef __cplusplus

class DECLSPEC_UUID("6D67F674-3BA4-11D7-BF56-000874CD1BAE")
AdvancedSettingsEngineDisp;
#endif
#endif /* __Wcm_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


