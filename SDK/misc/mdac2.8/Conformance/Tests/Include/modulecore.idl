//-----------------------------------------------------------------------------
// Microsoft Local Test Manager (LTM)
// Copyright (C) 1997 - 1999 By Microsoft Corporation.
//	  
// @doc
//												  
// @module ModuleCore.idl
//
//-----------------------------------------------------------------------------------


////////////////////////////////////////////////////////////////////////
// Imports
//
////////////////////////////////////////////////////////////////////////
import "unknwn.idl";


////////////////////////////////////////////////////////////////////////
// VARIATION_STATUS
//
////////////////////////////////////////////////////////////////////////
typedef enum tagVARIATION_STATUS
{
	eVariationStatusFailed = 0,
	eVariationStatusPassed,
	eVariationStatusNotRun,
	eVariationStatusNonExistent,
	eVariationStatusUnknown,
	eVariationStatusTimedOut,
	eVariationStatusConformanceWarning,
	eVariationStatusException,
	eVariationStatusAborted
} VARIATION_STATUS;

////////////////////////////////////////////////////////////////////////
// ERRORLEVEL
//
////////////////////////////////////////////////////////////////////////
typedef enum tagERRORLEVEL
{
	HR_STRICT, 
	HR_OPTIONAL, 
	HR_SUCCEED, 
	HR_FAIL,
	HR_WARNING
} ERRORLEVEL;


////////////////////////////////////////////////////////////////////////
// IError
//
////////////////////////////////////////////////////////////////////////
[
	object, 
	uuid(A0C3FEC1-8FBB-11d0-98CE-444553540000), 
	oleautomation,
	helpstring("Error interface for tracking test errors and for sending text to the LTM Window")
]
interface IError : IUnknown
{
	// These two methods get/set the ErrorLevel property. This property affects the
	// behavior of the 'Validate' method. The enum values have the following 
	// effects on that method:
	//	HR_STRICT:	The 'hrActual' parameter MUST match the 'hrExpected' parameter,
	//				or else the error count in incremented.
	//  HR_SUCCEED: The 'hrActual' MUST be a success code, or else the error count
	//				is incremented.
	//	HR_FAIL:	The 'hrActual' MUST be an error code, or else the error count
	//				is incremented.
	//	HR_OPTIONAL:The error count will not be incremented, regardless of the
	//				parameters passed in to 'Validate.'
	// 
	HRESULT GetErrorLevel		([out, retval] ERRORLEVEL *pErrorLevel);
	HRESULT SetErrorLevel		([in] ERRORLEVEL ErrorLevel);

	// 'GetActualHr' returns the HRESULT recorded from the last call to 'Validate'.
	//
	HRESULT GetActualHr			([out, retval] LONG *phrActual);

	// 'Validate' compares the two HRESULT values passed in and, depending on
	// the current ErrorLevel, possibly increment the error count and output
	// an error message to the LTM window. In the cases where validation fails,
	// the pfResult parameter will be returned as FALSE -- otherwise TRUE.
	// When an error message is output to LTM, the file name and line numbers
	// are recorded there as well.
	//
	HRESULT Validate			([in] LONG hrActual, 
								 [in] BSTR bstrFileName, 
								 [in] LONG lLineNo, 
								 [in] LONG hrExpected, 
								 [out, retval] VARIANT_BOOL *pfResult);

	// 'Compare' will output an error message (similar to that output by 'Validate')
	// if the fWereEqual parameter passed in is FALSE.
	//
	HRESULT Compare				([in] VARIANT_BOOL fWereEqual, 
								 [in] BSTR bstrFileName, 
								 [in] LONG lLineNo, 
								 [out, retval] VARIANT_BOOL *pfWereEqual);

	// The 'LogxxxxxxxxHr' methods output error or status message to the LTM
	// window. The HRESULT parameters passed in are converted to string
	// messages for this purpose.
	//
	HRESULT LogExpectedHr		([in] LONG hrExpected );
	HRESULT LogReceivedHr		([in] LONG hrReceived, 
								 [in] BSTR bstrFileName, 
								 [in] LONG lLineNo);

	// The 'ResetxxxxErrors' methods simply reset the internal error count of 
	// a Module, Case, or Variation (respectively.) 
	//
	HRESULT ResetModErrors		();
	HRESULT ResetCaseErrors		();
	HRESULT ResetVarErrors		();

	HRESULT ResetModWarnings	();
	HRESULT ResetCaseWarnings	();
	HRESULT ResetVarWarnings	();

	// 'GetxxxxErrors' retrieve the current number of errors at the Module,
	// Test Case, or Variation level.
	//
	HRESULT GetModErrors		([out, retval] LONG *plModErrors);
	HRESULT GetCaseErrors		([out, retval] LONG *plCaseErrors);
	HRESULT GetVarErrors		([out, retval] LONG *plVarErrors);
	
	HRESULT GetModWarnings		([out, retval] LONG *plModWarnings);
	HRESULT GetCaseWarnings		([out, retval] LONG *plCaseWarnings);
	HRESULT GetVarWarnings		([out, retval] LONG *plVarWarnings);

	// 'Increment' will increment the error count of the currently running 
	// Test Module, the currently running Test Case, as well as the currently
	// running Variation.
	//
	HRESULT Increment			();

	// 'Transmit' is the way a Test Module can send text messages to LTM. These will
	// be displayed in LTM's main window, and can be used to inform the user of
	// any pertinent information at run-time.
	//
	HRESULT Transmit			([in] BSTR bstrTextString);

	// 'Initialize'
	//
	HRESULT Initialize			();
}


////////////////////////////////////////////////////////////////////////
// CONSOLEFLAGS
//
////////////////////////////////////////////////////////////////////////
typedef enum tagCONSOLEFLAGS
{
	CONSOLE_RAW		= 0x00000000,				//Raw  - Don't use, unless you know the text contains no CR/LF, no Xml reserverd chars, or no other non-respresentable characters
	CONSOLE_TEXT	= 0x00000001,				//Text - Default, Automatically fixup CR/LF correctly for log files and the screen
	CONSOLE_XML		= 0x00000002 | CONSOLE_TEXT,//Xml  - Xml is placed into a CDATA section (with no xml fixups)
} CONSOLEFLAGS;


////////////////////////////////////////////////////////////////////////
// ITestConsole
//
////////////////////////////////////////////////////////////////////////
[
	object, 
	uuid(F2B528DD-15AC-41d4-B582-C0DAA1322CE3), 
	oleautomation,
	helpstring("Console interface for communicating with LTM (extending IError)")
]
interface ITestConsole : IUnknown
{
	//(Error) Logging routines
	HRESULT		Log(	 [in] BSTR bstrActual, 
						 [in] BSTR bstrExpected, 
						 [in] BSTR bstrSource,
						 [in] BSTR bstrMessage,
						 [in] BSTR bstrDetails,
						 [in] CONSOLEFLAGS flags,
						 [in] BSTR bstrFilename, 
						 [in] LONG iline);

	//Logging routines
	HRESULT		Write(	 [in] CONSOLEFLAGS flags, [in] BSTR bstrString);
	HRESULT		WriteLine();
}


////////////////////////////////////////////////////////////////////////
// IProviderInfo
//
////////////////////////////////////////////////////////////////////////
[
	object, 
	uuid(A0C3FEC2-8FBB-11d0-98CE-444553540000), 
	helpstring("Provider interface for sending provider info from LTM to test modules"), 
	oleautomation
]
interface IProviderInfo : IUnknown
{
	// The IProviderInfo interface is just a wrapper around a structure which
	// contains all of the information LTM & Test Modules needs to know about
	// the provider they are running against (if any.)
	//
	// The properties are described as follows:
	//	>Name:			The name the provider gives itself. For Kagera this is MSDASQL.
	//	>FriendlyName:	A special name the user has given this provider configuration.
	//	>InitString:	A string which contains initialization data. The interpretation
	//					of this string is Test Module-specific -- so you simply must
	//					make users of LTM aware of what your particular Test Module
	//					wants to see in this string.
	//	>MachineName:	If you will be testing a remote provider, the user will pass
	//					the machine name the provider is located on to you through
	//					this property.
	//	>CLSID:			This is the CLSID of the provider you are to run against.
	//	>CLSCTX:		This tells you whether the provider will be InProc, Local, or
	//					Remote (values of this property are identical to the values
	//					of the CLSCTX enumeration in wtypes.h)
	HRESULT GetName				([out, retval] BSTR *pbstrProviderName);
	HRESULT SetName				([in] BSTR bstrProviderName);
	HRESULT GetFriendlyName		([out, retval] BSTR *pbstrFriendlyName);
	HRESULT SetFriendlyName		([in] BSTR bstrFriendlyName);
	HRESULT GetInitString		([out, retval] BSTR *pbstrInitString);
	HRESULT SetInitString		([in] BSTR bstrInitString);
	HRESULT GetMachineName		([out, retval] BSTR *pbstrMachineName);
	HRESULT SetMachineName		([in] BSTR bstrMachineName);
	HRESULT GetCLSID			([out, retval] BSTR *pbstrCLSID);
	HRESULT SetCLSID			([in] BSTR bstrCLSID);
	HRESULT GetCLSCTX			([out, retval] LONG *pClsCtx);
	HRESULT SetCLSCTX			([in] LONG ClsCtx);
}


////////////////////////////////////////////////////////////////////////
// IAliasInfo
//
////////////////////////////////////////////////////////////////////////
[
	object, 
	uuid(34ADBB62-E4AD-41e4-AC6B-5ED539CD63D6), 
	helpstring("Provider interface for sending Alias info from LTM to test modules"), 
	oleautomation
]
interface IAliasInfo : IProviderInfo
{
	HRESULT GetCommandLine	([out, retval] BSTR* pbstrCmdLine);
}


////////////////////////////////////////////////////////////////////////
// ModuleBase
//
////////////////////////////////////////////////////////////////////////
[
	uuid(DE32F910-2975-11d1-A5FA-00C04FC2CABA),
	helpstring("ModuleBase TypeLibrary"),
	version(1.0)
]
library ModuleBase
{
	importlib("stdole.tlb");

	interface IError;
	interface ITestConsole;
	interface IProviderInfo;
	interface IAliasInfo;
	interface ITestCases;
	interface ITestModule;
}


////////////////////////////////////////////////////////////////////////
// Forwards
//
////////////////////////////////////////////////////////////////////////
interface ITestModule;


////////////////////////////////////////////////////////////////////////
// ITestCases
//
////////////////////////////////////////////////////////////////////////
[
	object,
	uuid(A0C3FEC3-8FBB-11d0-98CE-444553540000),
	oleautomation,
	helpstring("Test Case Interface which LTM consumes to drive test runs")
]
interface ITestCases : IUnknown
{
	// LTM will use these methods to get information about this test case.
	//
	HRESULT GetName				([out, retval] BSTR *pbstrCaseName);
	HRESULT GetDescription		([out, retval] BSTR *pbstrCaseDescription);

	// SyncProviderInterface() should cause this TestCase to release its current
	// IProviderInterface (if any) and retrieve a new IProviderInterface 
	// from its owning ITestModule (via the 'GetProviderInterface' call)
	//
	// GetProviderInterface() returns the current IProviderInterface for 
	// this test case.
	//
	HRESULT SyncProviderInterface	();
	HRESULT GetProviderInterface	([out, retval] IProviderInfo **ppProvInfo);

	// 'GetOwningITestModule' should retrieve the back-pointer 
	// to this test case's owning ITestModule object.
	//
	HRESULT GetOwningITestModule([out, retval] ITestModule **ppTestModule);

	// LTM will call 'Init' before it runs any variations in this Test Case.
	// Any code that sets up objects for use by the Variations should go here.
	// 
	HRESULT Init				([out, retval] LONG *plResult);

	// LTM will call 'Terminate' after it runs any variations on this
	// object -- regardless of the outcome of those calls (even regardless
	// of whether ITestCases::Init() fails or not.)
	//
	HRESULT Terminate			([out, retval] VARIANT_BOOL *pfResult);

	// 'GetVariationCount' should return the number of variations
	// this Test Case contains.
	//
	HRESULT GetVariationCount	([out, retval] LONG *plVariationCount);

	// For these next three, the first parameter is the variation index. 'Index' in
	// this case means the 0-based index into the complete list of variations
	// for this test case (if 'GetVariationCount' returns the value 'n', these
	// functions will always be passed values between 0 and (n - 1) as the first
	// parameter).
	// Do not confuse 'index' with 'Variation ID'. The latter is a non-sequential
	// unique identifier for the variation, which can be any 32-bit number. This
	// exists so that even when variations are added or removed during test
	// development, the ID is ALWAYS the same for the same variation (though 
	// the Index will surely change.)
	//
	HRESULT ExecuteVariation	([in] LONG lIndex, [out, retval] VARIATION_STATUS *pResult);
	HRESULT GetVariationID		([in] LONG lIndex, [out, retval] LONG *plID);
	HRESULT GetVariationDesc	([in] LONG lIndex, [out, retval] BSTR *pbstrDescription);
}


////////////////////////////////////////////////////////////////////////
// ITestModule
//
////////////////////////////////////////////////////////////////////////
[
	object,
	uuid(A0C3FEC4-8FBB-11d0-98CE-444553540000),
	oleautomation,
	helpstring("Test Module Interface which LTM consumes to retrieve Test info and acquire TestCase interfaces")
]
interface ITestModule : IUnknown
{
	// LTM will use these methods to retrieve information about the Module.
	//
	HRESULT GetName				([out, retval] BSTR *pbstrName);
	HRESULT GetDescription		([out, retval] BSTR *pbstrDescription);
	HRESULT GetOwnerName		([out, retval] BSTR *pbstrOwner);
	HRESULT GetCLSID			([out, retval] BSTR *pbstrCLSID);
	HRESULT GetVersion			([out, retval] LONG *plVersion);

	// LTM will call 'SetProviderInterface' after the ITestModule object is instantiated 
	// (if appropriate).
	// 'GetProviderInterface' is added for the implementor's convenience, but is not
	// called by LTM.
	//
	HRESULT SetProviderInterface([in] IProviderInfo *pProvInfo);
	HRESULT GetProviderInterface([out, retval] IProviderInfo **ppProvInfo);

	// LTM will call 'SetErrorInterface' after the ITestModule object is instantiated.
	// 'GetErrorInterface' is added for the implementor's convenience, but is not
	// called by LTM.
	//
	HRESULT SetErrorInterface	([in] IError* pIError);
	HRESULT GetErrorInterface	([out, retval] IError** ppIError);

	// 'Init' is called at the beginning of each test run. Any global
	// data that all Test Cases in this module will use should be setup
	// here.
	//
	HRESULT Init				([out, retval] LONG *plResult);

	// 'Terminate' is called at the end of each test run, regardless of the
	// outcome of the tests (even regardless of whether ITestModule::Init()
	// succeeds or fails.)
	//
	HRESULT Terminate			([out, retval] VARIANT_BOOL *pfResult);

	// 'GetCaseCount' returns the number of test cases this test module
	// contains. This value must not be zero.
	//
	HRESULT GetCaseCount		([out, retval] LONG *plCaseCount);

	// 'GetCase' should create an ITestCases instance for LTM to use.
	// The first parameter is the 0-based index of the test case. If
	// 'GetCaseCount' returns 'n' cases, this parameter will always
	// be between 0 and (n - 1), inclusive.
	//
	HRESULT GetCase				([in] LONG lIndex, [out, retval] ITestCases** ppITestCases);
}
